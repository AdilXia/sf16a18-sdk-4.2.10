Index: gst-plugins-base-1.4.5/gst/tcp/Makefile.am
===================================================================
--- gst-plugins-base-1.4.5.orig/gst/tcp/Makefile.am	2014-10-19 19:41:04.000000000 +0800
+++ gst-plugins-base-1.4.5/gst/tcp/Makefile.am	2018-08-28 16:54:05.605729000 +0800
@@ -10,6 +10,7 @@
 libgsttcp_la_SOURCES = \
 	gsttcpplugin.c \
 	gsttcpclientsrc.c gsttcpclientsink.c \
+	gsttcppacksink.c \
 	$(multifdsink_SOURCES) \
 	gstmultihandlesink.c  \
 	gstmultisocketsink.c  \
@@ -23,6 +24,7 @@
 noinst_HEADERS = \
   gsttcp.h \
   gsttcpclientsrc.h gsttcpclientsink.h \
+  gsttcppacksink.h \
   gstmultifdsink.h  \
   gstmultisocketsink.h  \
   gsttcpserversrc.h gsttcpserversink.h gstmultihandlesink.h
Index: gst-plugins-base-1.4.5/gst/tcp/Makefile.in
===================================================================
--- gst-plugins-base-1.4.5.orig/gst/tcp/Makefile.in	2014-12-18 18:37:43.000000000 +0800
+++ gst-plugins-base-1.4.5/gst/tcp/Makefile.in	2018-08-28 16:54:05.605729000 +0800
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.14.1 from Makefile.am.
+# Makefile.in generated by automake 1.15 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2014 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -16,7 +16,17 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
+am__is_gnu_make = { \
+  if test -z '$(MAKELEVEL)'; then \
+    false; \
+  elif test -n '$(MAKE_HOST)'; then \
+    true; \
+  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
+    true; \
+  else \
+    false; \
+  fi; \
+}
 am__make_running_with_option = \
   case $${target_option-} in \
       ?) ;; \
@@ -81,8 +91,6 @@
 host_triplet = @host@
 target_triplet = @target@
 subdir = gst/tcp
-DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \
-	$(top_srcdir)/depcomp $(noinst_HEADERS) README
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/common/m4/as-ac-expand.m4 \
 	$(top_srcdir)/common/m4/as-auto-alt.m4 \
@@ -108,18 +116,14 @@
 	$(top_srcdir)/common/m4/gtk-doc.m4 \
 	$(top_srcdir)/common/m4/introspection.m4 \
 	$(top_srcdir)/common/m4/orc.m4 $(top_srcdir)/common/m4/pkg.m4 \
-	$(top_srcdir)/m4/freetype2.m4 $(top_srcdir)/m4/gettext.m4 \
-	$(top_srcdir)/m4/gst-alsa.m4 $(top_srcdir)/m4/iconv.m4 \
-	$(top_srcdir)/m4/intlmacosx.m4 $(top_srcdir)/m4/lib-ld.m4 \
+	$(top_srcdir)/m4/freetype2.m4 $(top_srcdir)/m4/lib-ld.m4 \
 	$(top_srcdir)/m4/lib-link.m4 $(top_srcdir)/m4/lib-prefix.m4 \
-	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/lrint.m4 \
-	$(top_srcdir)/m4/lrintf.m4 $(top_srcdir)/m4/ltoptions.m4 \
-	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
-	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/m4/nls.m4 \
-	$(top_srcdir)/m4/po.m4 $(top_srcdir)/m4/progtest.m4 \
-	$(top_srcdir)/configure.ac
+	$(top_srcdir)/m4/lrint.m4 $(top_srcdir)/m4/lrintf.m4 \
+	$(top_srcdir)/m4/progtest.m4 $(top_srcdir)/configure.ac
 am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
 	$(ACLOCAL_M4)
+DIST_COMMON = $(srcdir)/Makefile.am $(noinst_HEADERS) \
+	$(am__DIST_COMMON)
 mkinstalldirs = $(install_sh) -d
 CONFIG_HEADER = $(top_builddir)/config.h
 CONFIG_CLEAN_FILES =
@@ -157,13 +161,15 @@
 libgsttcp_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \
 	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
 am__libgsttcp_la_SOURCES_DIST = gsttcpplugin.c gsttcpclientsrc.c \
-	gsttcpclientsink.c gstmultifdsink.c gstmultihandlesink.c \
-	gstmultisocketsink.c gsttcpserversrc.c gsttcpserversink.c
+	gsttcpclientsink.c gsttcppacksink.c gstmultifdsink.c \
+	gstmultihandlesink.c gstmultisocketsink.c gsttcpserversrc.c \
+	gsttcpserversink.c
 @HAVE_SYS_SOCKET_H_TRUE@am__objects_1 =  \
 @HAVE_SYS_SOCKET_H_TRUE@	libgsttcp_la-gstmultifdsink.lo
 am_libgsttcp_la_OBJECTS = libgsttcp_la-gsttcpplugin.lo \
 	libgsttcp_la-gsttcpclientsrc.lo \
-	libgsttcp_la-gsttcpclientsink.lo $(am__objects_1) \
+	libgsttcp_la-gsttcpclientsink.lo \
+	libgsttcp_la-gsttcppacksink.lo $(am__objects_1) \
 	libgsttcp_la-gstmultihandlesink.lo \
 	libgsttcp_la-gstmultisocketsink.lo \
 	libgsttcp_la-gsttcpserversrc.lo \
@@ -238,6 +244,7 @@
   done | $(am__uniquify_input)`
 ETAGS = etags
 CTAGS = ctags
+am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp README
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
 ACLOCAL = @ACLOCAL@
 ACLOCAL_AMFLAGS = @ACLOCAL_AMFLAGS@
@@ -537,6 +544,7 @@
 libgsttcp_la_SOURCES = \
 	gsttcpplugin.c \
 	gsttcpclientsrc.c gsttcpclientsink.c \
+	gsttcppacksink.c \
 	$(multifdsink_SOURCES) \
 	gstmultihandlesink.c  \
 	gstmultisocketsink.c  \
@@ -549,6 +557,7 @@
 noinst_HEADERS = \
   gsttcp.h \
   gsttcpclientsrc.h gsttcpclientsink.h \
+  gsttcppacksink.h \
   gstmultifdsink.h  \
   gstmultisocketsink.h  \
   gsttcpserversrc.h gsttcpserversink.h gstmultihandlesink.h
@@ -570,7 +579,6 @@
 	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu gst/tcp/Makefile'; \
 	$(am__cd) $(top_srcdir) && \
 	  $(AUTOMAKE) --gnu gst/tcp/Makefile
-.PRECIOUS: Makefile
 Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
 	@case '$?' in \
 	  *config.status*) \
@@ -638,6 +646,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsttcp_la-gstmultisocketsink.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsttcp_la-gsttcpclientsink.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsttcp_la-gsttcpclientsrc.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsttcp_la-gsttcppacksink.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsttcp_la-gsttcpplugin.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsttcp_la-gsttcpserversink.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsttcp_la-gsttcpserversrc.Plo@am__quote@
@@ -687,6 +696,13 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgsttcp_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgsttcp_la_CFLAGS) $(CFLAGS) -c -o libgsttcp_la-gsttcpclientsink.lo `test -f 'gsttcpclientsink.c' || echo '$(srcdir)/'`gsttcpclientsink.c
 
+libgsttcp_la-gsttcppacksink.lo: gsttcppacksink.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgsttcp_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgsttcp_la_CFLAGS) $(CFLAGS) -MT libgsttcp_la-gsttcppacksink.lo -MD -MP -MF $(DEPDIR)/libgsttcp_la-gsttcppacksink.Tpo -c -o libgsttcp_la-gsttcppacksink.lo `test -f 'gsttcppacksink.c' || echo '$(srcdir)/'`gsttcppacksink.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsttcp_la-gsttcppacksink.Tpo $(DEPDIR)/libgsttcp_la-gsttcppacksink.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsttcppacksink.c' object='libgsttcp_la-gsttcppacksink.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgsttcp_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgsttcp_la_CFLAGS) $(CFLAGS) -c -o libgsttcp_la-gsttcppacksink.lo `test -f 'gsttcppacksink.c' || echo '$(srcdir)/'`gsttcppacksink.c
+
 libgsttcp_la-gstmultifdsink.lo: gstmultifdsink.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgsttcp_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgsttcp_la_CFLAGS) $(CFLAGS) -MT libgsttcp_la-gstmultifdsink.lo -MD -MP -MF $(DEPDIR)/libgsttcp_la-gstmultifdsink.Tpo -c -o libgsttcp_la-gstmultifdsink.lo `test -f 'gstmultifdsink.c' || echo '$(srcdir)/'`gstmultifdsink.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsttcp_la-gstmultifdsink.Tpo $(DEPDIR)/libgsttcp_la-gstmultifdsink.Plo
@@ -936,6 +952,8 @@
 	pdf pdf-am ps ps-am tags tags-am uninstall uninstall-am \
 	uninstall-pluginLTLIBRARIES
 
+.PRECIOUS: Makefile
+
 
 Android.mk: Makefile.am $(BUILT_SOURCES)
 	androgenizer \
Index: gst-plugins-base-1.4.5/gst/tcp/gsttcppacksink.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gst-plugins-base-1.4.5/gst/tcp/gsttcppacksink.c	2018-08-28 17:28:11.205790000 +0800
@@ -0,0 +1,325 @@
+/* GStreamer
+ * Copyright (C) <1999> Erik Walthinsen <omega@cse.ogi.edu>
+ * Copyright (C) <2004> Thomas Vander Stichele <thomas at apestaart dot org>
+ * Copyright (C) <2011> Collabora Ltd.
+ *     Author: Sebastian Dr√∂ge <sebastian.droege@collabora.co.uk>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+/**
+ * SECTION:element-tcppacksink
+ * @see_also: #tcppacksink
+ *
+ * <refsect2>
+ * <title>Example launch line</title>
+ * |[
+ * # server:
+ * nc -l -p 3000
+ * # client:
+ * gst-launch fdsink fd=1 ! tcppacksink port=3000
+ * ]| everything you type in the client is shown on the server
+ * </refsect2>
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+#include <gst/gst-i18n-plugin.h>
+
+#include "gsttcp.h"
+#include "gsttcppacksink.h"
+
+/* TCPPackSink signals and args */
+enum
+{
+  FRAME_ENCODED,
+  /* FILL ME */
+  LAST_SIGNAL
+};
+
+GST_DEBUG_CATEGORY_STATIC (tcppacksink_debug);
+#define GST_CAT_DEFAULT (tcppacksink_debug)
+
+enum
+{
+  PROP_0,
+  PROP_HOST,
+  PROP_PORT,
+  PROP_PACK_CALLBACK,
+  PROP_PACK_PRIVDATA,
+};
+
+static GstStaticPadTemplate sinktemplate = GST_STATIC_PAD_TEMPLATE ("sink",
+    GST_PAD_SINK,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS_ANY);
+
+static void gst_tcp_pack_sink_finalize (GObject * gobject);
+
+static gboolean gst_tcp_pack_sink_setcaps (GstBaseSink * bsink,
+    GstCaps * caps);
+static GstFlowReturn gst_tcp_pack_sink_render (GstBaseSink * bsink,
+    GstBuffer * buf);
+static gboolean gst_tcp_pack_sink_start (GstBaseSink * bsink);
+static gboolean gst_tcp_pack_sink_stop (GstBaseSink * bsink);
+static gboolean gst_tcp_pack_sink_unlock (GstBaseSink * bsink);
+static gboolean gst_tcp_pack_sink_unlock_stop (GstBaseSink * bsink);
+//static gboolean gst_tcp_pack_sink_event(GstBaseSink *bsink, GstEvent *event);
+
+static void gst_tcp_pack_sink_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec);
+static void gst_tcp_pack_sink_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec);
+
+
+/*static guint gst_tcp_pack_sink_signals[LAST_SIGNAL] = { 0 }; */
+
+#define gst_tcp_pack_sink_parent_class parent_class
+G_DEFINE_TYPE (GstTCPPackSink, gst_tcp_pack_sink, GST_TYPE_BASE_SINK);
+
+static void
+gst_tcp_pack_sink_class_init (GstTCPPackSinkClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstElementClass *gstelement_class;
+  GstBaseSinkClass *gstbasesink_class;
+
+  gobject_class = (GObjectClass *) klass;
+  gstelement_class = (GstElementClass *) klass;
+  gstbasesink_class = (GstBaseSinkClass *) klass;
+
+  parent_class = g_type_class_peek_parent (klass);
+
+  gobject_class->set_property = gst_tcp_pack_sink_set_property;
+  gobject_class->get_property = gst_tcp_pack_sink_get_property;
+  gobject_class->finalize = gst_tcp_pack_sink_finalize;
+
+  g_object_class_install_property (gobject_class, PROP_HOST,
+      g_param_spec_string ("host", "Host", "The host/IP to send the packets to",
+          TCP_DEFAULT_HOST, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  g_object_class_install_property (gobject_class, PROP_PORT,
+      g_param_spec_int ("port", "Port", "The port to send the packets to",
+          0, TCP_HIGHEST_PORT, TCP_DEFAULT_PORT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  g_object_class_install_property (gobject_class, PROP_PACK_CALLBACK,
+      g_param_spec_pointer ("callback", "render callback", "The render callback",
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  g_object_class_install_property (gobject_class, PROP_PACK_PRIVDATA,
+      g_param_spec_pointer ("privdata", "private data", "The tcppacksink private data",
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  gst_element_class_add_pad_template (gstelement_class,
+      gst_static_pad_template_get (&sinktemplate));
+
+  gst_element_class_set_static_metadata (gstelement_class,
+      "TCP pack sink", "Sink/Network",
+      "Send data as a client over the network via TCP",
+      "Thomas Vander Stichele <thomas at apestaart dot org>");
+
+  gstbasesink_class->start = gst_tcp_pack_sink_start;
+  gstbasesink_class->stop = gst_tcp_pack_sink_stop;
+  gstbasesink_class->set_caps = gst_tcp_pack_sink_setcaps;
+  gstbasesink_class->render = gst_tcp_pack_sink_render;
+  gstbasesink_class->unlock = gst_tcp_pack_sink_unlock;
+  gstbasesink_class->unlock_stop = gst_tcp_pack_sink_unlock_stop;
+//  gstbasesink_class->event = gst_tcp_pack_sink_event;
+
+  GST_DEBUG_CATEGORY_INIT (tcppacksink_debug, "tcppacksink", 0, "Pack sink");
+}
+
+static void
+gst_tcp_pack_sink_init (GstTCPPackSink * this)
+{
+#if 0
+  this->host = g_strdup (TCP_DEFAULT_HOST);
+  this->port = TCP_DEFAULT_PORT;
+
+  this->socket = NULL;
+  this->cancellable = g_cancellable_new ();
+
+  GST_OBJECT_FLAG_UNSET (this, GST_TCP_PACK_SINK_OPEN);
+#endif
+}
+
+void gst_tcp_pack_sink_get_type_test2(void)
+{
+	do{
+	}while(0);
+}
+static void
+gst_tcp_pack_sink_finalize (GObject * gobject)
+{
+#if 0
+  GstTCPPackSink *this = GST_TCP_PACK_SINK (gobject);
+
+  if (this->cancellable)
+    g_object_unref (this->cancellable);
+  this->cancellable = NULL;
+
+  if (this->socket)
+    g_object_unref (this->socket);
+  this->socket = NULL;
+
+  g_free (this->host);
+  this->host = NULL;
+
+  G_OBJECT_CLASS (parent_class)->finalize (gobject);
+#endif
+}
+
+static gboolean
+gst_tcp_pack_sink_setcaps (GstBaseSink * bsink, GstCaps * caps)
+{
+  return TRUE;
+}
+
+static GstFlowReturn
+gst_tcp_pack_sink_render (GstBaseSink * bsink, GstBuffer * buf)
+{
+  GstTCPPackSink *sink;
+  GstMapInfo map;
+
+  sink = GST_TCP_PACK_SINK (bsink);
+  if(!sink->render_callback){
+    GST_ERROR("Gst packsink render callback not set!\n");
+    return GST_FLOW_ERROR;
+  }else{
+
+    gst_buffer_map (buf, &map, GST_MAP_READ);
+    sink->render_callback((void *)map.data, map.size, sink->priv_data);
+    gst_buffer_unmap (buf, &map);
+    return GST_FLOW_OK;
+  }
+
+}
+
+static void
+gst_tcp_pack_sink_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstTCPPackSink *tcppacksink;
+
+  g_return_if_fail (GST_IS_TCP_PACK_SINK (object));
+  tcppacksink = GST_TCP_PACK_SINK (object);
+
+  switch (prop_id) {
+    case PROP_HOST:
+      if (!g_value_get_string (value)) {
+        g_warning ("host property cannot be NULL");
+        break;
+      }
+      g_free (tcppacksink->host);
+      tcppacksink->host = g_strdup (g_value_get_string (value));
+      break;
+    case PROP_PORT:
+      tcppacksink->port = g_value_get_int (value);
+      break;
+
+    case PROP_PACK_CALLBACK:
+    {
+      tcppacksink->render_callback = g_value_get_pointer (value);
+      break;
+    }
+
+    case PROP_PACK_PRIVDATA:
+    {
+      tcppacksink->priv_data = g_value_get_pointer (value);
+      break;
+    }
+
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_tcp_pack_sink_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstTCPPackSink *tcppacksink;
+
+  g_return_if_fail (GST_IS_TCP_PACK_SINK (object));
+  tcppacksink = GST_TCP_PACK_SINK (object);
+
+  switch (prop_id) {
+    case PROP_HOST:
+      g_value_set_string (value, tcppacksink->host);
+      break;
+    case PROP_PORT:
+      g_value_set_int (value, tcppacksink->port);
+      break;
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+
+/* create a socket for sending to remote machine */
+static gboolean
+gst_tcp_pack_sink_start (GstBaseSink * bsink)
+{
+
+  return TRUE;
+
+}
+
+static gboolean
+gst_tcp_pack_sink_stop (GstBaseSink * bsink)
+{
+
+  return TRUE;
+
+}
+
+/* will be called only between calls to start() and stop() */
+static gboolean
+gst_tcp_pack_sink_unlock (GstBaseSink * bsink)
+{
+
+  return TRUE;
+
+}
+
+/* will be called only between calls to start() and stop() */
+static gboolean
+gst_tcp_pack_sink_unlock_stop (GstBaseSink * bsink)
+{
+
+  return TRUE;
+}
+#if 0
+static gboolean
+gst_tcp_pack_sink_event (GstBaseSink * bsink, GstEvent *event)
+{
+
+  GstTCPPackSink *sink = GST_TCP_PACK_SINK (bsink);
+  switch(event->type){
+  case GST_EVENT_EOS:
+    // send eos via render callback
+    //sink->render_callback(NULL, 0, 1);
+    GST_ERROR("Gst pack sink recieve eos!\n");
+    break;
+  default:
+    break;
+  }
+  return GST_BASE_SINK_CLASS (parent_class)->event (bsink, event);
+}
+#endif
Index: gst-plugins-base-1.4.5/gst/tcp/gsttcppacksink.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gst-plugins-base-1.4.5/gst/tcp/gsttcppacksink.h	2018-08-28 16:54:05.605729000 +0800
@@ -0,0 +1,82 @@
+/* GStreamer
+ * Copyright (C) <1999> Erik Walthinsen <omega@cse.ogi.edu>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+
+#ifndef __GST_TCP_PACK_SINK_H__
+#define __GST_TCP_PACK_SINK_H__
+
+
+#include <gst/gst.h>
+#include <gst/base/gstbasesink.h>
+
+#include <gio/gio.h>
+
+#include "gsttcp.h"
+
+G_BEGIN_DECLS
+
+#define GST_TYPE_TCP_PACK_SINK \
+  (gst_tcp_pack_sink_get_type())
+#define GST_TCP_PACK_SINK(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_TCP_PACK_SINK,GstTCPPackSink))
+#define GST_TCP_PACK_SINK_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_TCP_PACK_SINK,GstTCPPackSinkClass))
+#define GST_IS_TCP_PACK_SINK(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_TCP_PACK_SINK))
+#define GST_IS_TCP_PACK_SINK_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_TCP_PACK_SINK))
+
+typedef struct _GstTCPPackSink GstTCPPackSink;
+typedef struct _GstTCPPackSinkClass GstTCPPackSinkClass;
+
+typedef enum {
+  GST_TCP_PACK_SINK_OPEN             = (GST_ELEMENT_FLAG_LAST << 0),
+
+  GST_TCP_PACK_SINK_FLAG_LAST        = (GST_ELEMENT_FLAG_LAST << 2),
+} GstTCPPackSinkFlags;
+
+struct _GstTCPPackSink {
+  GstBaseSink element;
+
+  /* server information */
+  int port;
+  gchar *host;
+
+  /* socket */
+  GSocket *socket;
+  GCancellable *cancellable;
+
+  gint (*render_callback) (void *, gint, void *);
+
+  gpointer *priv_data;
+
+  size_t data_written; /* how much bytes have we written ? */
+};
+
+struct _GstTCPPackSinkClass {
+  GstBaseSinkClass parent_class;
+};
+
+extern GType gst_tcp_pack_sink_get_type(void);
+
+extern void gst_tcp_pack_sink_get_type_test2(void);
+
+G_END_DECLS
+
+#endif /* __GST_TCP_PACK_SINK_H__ */
Index: gst-plugins-base-1.4.5/gst/tcp/gsttcpplugin.c
===================================================================
--- gst-plugins-base-1.4.5.orig/gst/tcp/gsttcpplugin.c	2014-10-19 19:41:04.000000000 +0800
+++ gst-plugins-base-1.4.5/gst/tcp/gsttcpplugin.c	2018-08-28 16:54:05.605729000 +0800
@@ -23,6 +23,7 @@
 
 #include "gsttcpclientsrc.h"
 #include "gsttcpclientsink.h"
+#include "gsttcppacksink.h"
 #include "gsttcpserversrc.h"
 #include "gsttcpserversink.h"
 #include "gstmultifdsink.h"
@@ -39,6 +40,9 @@
   if (!gst_element_register (plugin, "tcpclientsrc", GST_RANK_NONE,
           GST_TYPE_TCP_CLIENT_SRC))
     return FALSE;
+  if (!gst_element_register (plugin, "tcppacksink", GST_RANK_NONE,
+          GST_TYPE_TCP_PACK_SINK))
+    return FALSE;
   if (!gst_element_register (plugin, "tcpserversink", GST_RANK_NONE,
           GST_TYPE_TCP_SERVER_SINK))
     return FALSE;
