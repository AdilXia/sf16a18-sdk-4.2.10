
sf1688.elf:     file format elf32-tradlittlemips


Disassembly of section .text_init:

bc004000 <__reset_vector>:
__reset_vector():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:19
/**************************************************************************************
    R E S E T   E X C E P T I O N   H A N D L E R
**************************************************************************************/

LEAF(__reset_vector)
	la	a2, reset
bc004000:	3c06bc00 	lui	a2,0xbc00
bc004004:	24c64010 	addiu	a2,a2,16400
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:20
	jr	a2
bc004008:	00c00008 	jr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:21
	mtc0	zero, C0_COUNT		// Clear cp0 Count (Used to measure boot time.)
bc00400c:	40804800 	mtc0	zero,c0_count

bc004010 <reset>:
reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:26
END(__reset_vector)

reset:
	//disable cache
	mfc0	a2, C0_CONFIG
bc004010:	40068000 	mfc0	a2,c0_config
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:27
	li	a0, 2
bc004014:	24040002 	li	a0,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:28
	ins	a2, a0, 0, 3
bc004018:	7c861004 	ins	a2,a0,0x0,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:29
	mtc0	a2, C0_CONFIG
bc00401c:	40868000 	mtc0	a2,c0_config
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:31

	mfc0    a0, C0_EBASE			// Read CP0 EBase
bc004020:	40047801 	mfc0	a0,c0_ebase
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:32
	ext	r23_cpu_num, a0, 0, 4			// Extract CPUNum
bc004024:	7c971800 	ext	s7,a0,0x0,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:33
	mfc0    a0, C0_TCBIND					// Read CP0 TCBind
bc004028:	40041002 	mfc0	a0,c0_tcbind
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:34
	ext	r9_vpe_num, a0, 0, 4				// Extract CurVPE
bc00402c:	7c891800 	ext	t1,a0,0x0,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:35
	li      r22_gcr_addr, GCR_CONFIG_ADDR
bc004030:	3c16bfbf 	lui	s6,0xbfbf
bc004034:	36d68000 	ori	s6,s6,0x8000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:36
	lw      r8_core_num, (CORE_LOCAL_CONTROL_BLOCK + GCR_CL_ID) (r22_gcr_addr) // Load GCR_CL_ID
bc004038:	8ec82028 	lw	t0,8232(s6)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:38

	la      gp, _gp                // All vpe share globals.
bc00403c:	3c1cbc01 	lui	gp,0xbc01
bc004040:	279c1908 	addiu	gp,gp,6408
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:39
	li      sp, STACK_BASE_ADDR     // Each vpe gets it's own stack.
bc004044:	3c1dbc00 	lui	sp,0xbc00
bc004048:	37bd2c00 	ori	sp,sp,0x2c00
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:41

	la	a2, init_cp0    // Init CP0 Status, Count, Compare, Watch*, and Cause.
bc00404c:	3c06bc00 	lui	a2,0xbc00
bc004050:	24c64110 	addiu	a2,a2,16656
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:42
	jalr	a2
bc004054:	00c0f809 	jalr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:43
	nop
bc004058:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:45

	bnez    r9_vpe_num, init_done // If we are not a vpe0 then we are done.
bc00405c:	15200021 	bnez	t1,bc0040e4 <init_done>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:46
	nop
bc004060:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:48

	bnez    r8_core_num, init_sys_resources	//  Only done from core 0.
bc004064:	15000013 	bnez	t0,bc0040b4 <init_sys_resources>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:49
	nop
bc004068:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:51

	la a2,     disable_L2   // Disable L2 caches
bc00406c:	3c06bc00 	lui	a2,0xbc00
bc004070:	24c64250 	addiu	a2,a2,16976
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:52
	jalr a2
bc004074:	00c0f809 	jalr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:53
	nop
bc004078:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:55

	la a2,     init_icache // Initialize the L1 instruction cache. (Executing using I$ on return.)
bc00407c:	3c06bc00 	lui	a2,0xbc00
bc004080:	24c64310 	addiu	a2,a2,17168
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:56
	jalr a2
bc004084:	00c0f809 	jalr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:57
	nop
bc004088:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:62

	// The changing of Kernel mode cacheability must be done from KSEG1
	// Since the code is executing from KSEG0 It needs to do a jump to KSEG1 change
	// K0 and jump back to KSEG0
	la		a2,		change_k0_cca
bc00408c:	3c06bc00 	lui	a2,0xbc00
bc004090:	24c64440 	addiu	a2,a2,17472
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:63
	li		a1, 0xf
bc004094:	2405000f 	li	a1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:64
	ins		a2, a1, 29, 1 // changed to KSEG1 address by setting bit 29
bc004098:	7ca6ef44 	ins	a2,a1,0x1d,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:65
	jalr	a2
bc00409c:	00c0f809 	jalr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:66
	nop
bc0040a0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:68

	la a2,     init_dcache // Initialize the L1 data cache
bc0040a4:	3c06bc00 	lui	a2,0xbc00
bc0040a8:	24c643a8 	addiu	a2,a2,17320
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:69
	jalr a2
bc0040ac:	00c0f809 	jalr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:70
	nop
bc0040b0:	00000000 	nop

bc0040b4 <init_sys_resources>:
init_sys_resources():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:73

init_sys_resources:     // Only done by core0 vpe0.
	la	a2, copy_c2_ram // Copy "C" code and data to RAM and zero bss (uncached.)
bc0040b4:	3c06bc00 	lui	a2,0xbc00
bc0040b8:	24c64180 	addiu	a2,a2,16768
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:74
	jalr	a2
bc0040bc:	00c0f809 	jalr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:75
	nop
bc0040c0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:77

	la a2,     init_L2   // Initialize the unified L2 cache for non UP cores after L1 caches have been initialized
bc0040c4:	3c06bc00 	lui	a2,0xbc00
bc0040c8:	24c64284 	addiu	a2,a2,17028
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:78
	jalr a2
bc0040cc:	00c0f809 	jalr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:79
	nop
bc0040d0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:81

	la		a2, enable_L2   // enable L2 cache
bc0040d4:	3c06bc00 	lui	a2,0xbc00
bc0040d8:	24c6426c 	addiu	a2,a2,17004
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:82
	jalr	a2
bc0040dc:	00c0f809 	jalr	a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:83
	nop
bc0040e0:	00000000 	nop

bc0040e4 <init_done>:
init_done():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:86

init_done:
	la      ra, all_done	// If main return then go to all_done:.
bc0040e4:	3c1fbc00 	lui	ra,0xbc00
bc0040e8:	27ff4100 	addiu	ra,ra,16640
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:87
	la      a1, main
bc0040ec:	3c05bc00 	lui	a1,0xbc00
bc0040f0:	24a548e8 	addiu	a1,a1,18664
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:88
	mtc0    a1, C0_ERRPC			// ErrorEPC
bc0040f4:	4085f000 	mtc0	a1,c0_errorepc
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:89
	move	a0, r23_cpu_num
bc0040f8:	02e02021 	move	a0,s7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:91

	eret    // Exit reset exception handler for this vpe and start execution of main().
bc0040fc:	42000018 	eret

bc004100 <all_done>:
all_done():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:97

/**************************************************************************************
**************************************************************************************/
all_done:
	// Looks like main returned. Just busy wait spin.
	b     all_done
bc004100:	1000ffff 	b	bc004100 <all_done>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/start.S:98
	nop
bc004104:	00000000 	nop
	...

bc004110 <init_cp0>:
init_cp0():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:10
	.set	noreorder           // Don't allow the assembler to reorder instructions.
	.set	noat                // Don't allow the assembler to use r1(at) for synthetic instr.
/**************************************************************************************
**************************************************************************************/
LEAF(init_cp0)
	li	v1, 0x24400004		// (M_StatusERL | M_StatusIPL1 | M_StatusBEV)
bc004110:	3c032440 	lui	v1,0x2440
bc004114:	34630004 	ori	v1,v1,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:11
	mtc0	v1, C0_STATUS		// write C0_Status
bc004118:	40836000 	mtc0	v1,c0_status
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:14

	// Initialize Watch registers if implemented.
	mfc0	v0, C0_CONFIG1		// read C0_Config1
bc00411c:	40028001 	mfc0	v0,c0_config1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:15
	ext	v1, v0, 3, 1		// extract bit 3 WR (Watch registers implemented)
bc004120:	7c4300c0 	ext	v1,v0,0x3,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:16
	beq 	v1, zero, done_wr
bc004124:	10600011 	beqz	v1,bc00416c <done_wr>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:17
	li    	v1, 0x7				// (M_WatchHiI | M_WatchHiR | M_WatchHiW)
bc004128:	24030007 	li	v1,7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:20

	// Clear Watch Status bits and disable watch exceptions
	mtc0	v1, C0_WATCHHI		// write C0_WatchHi0
bc00412c:	40839800 	mtc0	v1,c0_watchhi
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:21
	mtc0	zero, C0_WATCHLO	// write C0_WatchLo0
bc004130:	40809000 	mtc0	zero,c0_watchlo
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:23

	mtc0	v1, C0_WATCHHI, 1	// write C0_WatchHi1
bc004134:	40839801 	mtc0	v1,c0_watchhi,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:24
	mtc0	zero, C0_WATCHLO, 1	// write C0_WatchLo1
bc004138:	40809001 	mtc0	zero,c0_watchlo,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:26

	mtc0	v1, C0_WATCHHI, 2	// write C0_WatchHi2
bc00413c:	40839802 	mtc0	v1,c0_watchhi,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:27
	mtc0	zero, C0_WATCHLO, 2	// write C0_WatchLo2
bc004140:	40809002 	mtc0	zero,c0_watchlo,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:29

	mtc0	v1, C0_WATCHHI, 3	// write C0_WatchHi3
bc004144:	40839803 	mtc0	v1,c0_watchhi,3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:30
	mtc0	zero, C0_WATCHLO, 3	// write C0_WatchLo3
bc004148:	40809003 	mtc0	zero,c0_watchlo,3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:32

	mtc0	v1, C0_WATCHHI, 4	// write C0_WatchHi4
bc00414c:	40839804 	mtc0	v1,c0_watchhi,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:33
	mtc0	zero, C0_WATCHLO, 4	// write C0_WatchLo4
bc004150:	40809004 	mtc0	zero,c0_watchlo,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:35

	mtc0	v1, C0_WATCHHI, 5	// write C0_WatchHi5
bc004154:	40839805 	mtc0	v1,c0_watchhi,5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:36
	mtc0	zero, C0_WATCHLO, 5	// write C0_WatchLo5
bc004158:	40809005 	mtc0	zero,c0_watchlo,5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:38

	mtc0	v1, C0_WATCHHI, 6	// write C0_WatchHi6
bc00415c:	40839806 	mtc0	v1,c0_watchhi,6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:39
	mtc0	zero, C0_WATCHLO, 6	// write C0_WatchLo6
bc004160:	40809006 	mtc0	zero,c0_watchlo,6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:41

	mtc0	v1, C0_WATCHHI, 7	// write C0_WatchHi7
bc004164:	40839807 	mtc0	v1,c0_watchhi,7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:42
	mtc0	zero, C0_WATCHLO, 7	// write C0_WatchLo7
bc004168:	40809007 	mtc0	zero,c0_watchlo,7

bc00416c <done_wr>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:44
done_wr:
	mtc0	zero, C0_CAUSE		// write C0_Cause: Init AFTER init of CP0 WatchHi/Lo registers.
bc00416c:	40806800 	mtc0	zero,c0_cause
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:45
	mtc0	zero, C0_COMPARE	// write C0_Compare
bc004170:	40805800 	mtc0	zero,c0_compare
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:47

	ehb
bc004174:	000000c0 	ehb
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:48
	jr      ra
bc004178:	03e00008 	jr	ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/init_cp0.S:49
	nop
bc00417c:	00000000 	nop

bc004180 <copy_c2_ram>:
copy_c2_ram():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:55
/**************************************************************************************
**************************************************************************************/
LEAF(copy_c2_ram)


    li  all_ones_s1, 0xffffffff
bc004180:	2411ffff 	li	s1,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:58

    # Copy code and read-only/initialized data from FLASH to (uncached) RAM.
    la      source_addr_a1, _start_ram_text
bc004184:	3c05bc01 	lui	a1,0xbc01
bc004188:	24a59680 	addiu	a1,a1,-27008
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:59
    la      destination_addr_a2, _fdata_ram
bc00418c:	3c06bc01 	lui	a2,0xbc01
bc004190:	24c69680 	addiu	a2,a2,-27008
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:60
    la      end_addr_a3, _edata_ram
bc004194:	3c07bc01 	lui	a3,0xbc01
bc004198:	24e79918 	addiu	a3,a3,-26344
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:64
    #ifndef EVA  // NOTE EVA mode assumed to be uncached
    	// Switch address to uncached (kseg1) so copy will go directly
    	// to memory
    	ins     destination_addr_a2, all_ones_s1, 29, 1
bc00419c:	7e26ef44 	ins	a2,s1,0x1d,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:65
    	ins     end_addr_a3, all_ones_s1, 29, 1
bc0041a0:	7e27ef44 	ins	a3,s1,0x1d,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:67
    #endif
    beq     destination_addr_a2, end_addr_a3, zero_bss
bc0041a4:	10c70006 	beq	a2,a3,bc0041c0 <zero_bss>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:68
    nop
bc0041a8:	00000000 	nop

bc0041ac <next_ram_word>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:70
next_ram_word:
    lw      data_a0, 0(source_addr_a1)
bc0041ac:	8ca40000 	lw	a0,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:71
    sw      data_a0, 0(destination_addr_a2)
bc0041b0:	acc40000 	sw	a0,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:72
    addiu   destination_addr_a2, 4
bc0041b4:	24c60004 	addiu	a2,a2,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:73
    bne     end_addr_a3, destination_addr_a2, next_ram_word
bc0041b8:	14e6fffc 	bne	a3,a2,bc0041ac <next_ram_word>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:74
    addiu   source_addr_a1, 4
bc0041bc:	24a50004 	addiu	a1,a1,4

bc0041c0 <zero_bss>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:77

zero_bss:
    la      destination_addr_a2, _fbss
bc0041c0:	3c06bc01 	lui	a2,0xbc01
bc0041c4:	24c69918 	addiu	a2,a2,-26344
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:78
    la      end_addr_a3, _end
bc0041c8:	3c07bc01 	lui	a3,0xbc01
bc0041cc:	24e79a40 	addiu	a3,a3,-26048
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:82
    #ifndef EVA  // NOTE EVA mode assumed to be uncached
    	// Switch address to uncached (kseg1) so copy will go directly
    	// to memory
	    ins     destination_addr_a2, all_ones_s1, 29, 1
bc0041d0:	7e26ef44 	ins	a2,s1,0x1d,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:83
	    ins     end_addr_a3, all_ones_s1, 29, 1
bc0041d4:	7e27ef44 	ins	a3,s1,0x1d,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:85
    #endif
    beq     destination_addr_a2, end_addr_a3, copy_c2_ram_done
bc0041d8:	10c70005 	beq	a2,a3,bc0041f0 <copy_c2_ram_done>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:86
    nop
bc0041dc:	00000000 	nop

bc0041e0 <next_bss_word>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:88
next_bss_word:
    sw      zero, 0(destination_addr_a2)
bc0041e0:	acc00000 	sw	zero,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:89
    addiu   destination_addr_a2, 4
bc0041e4:	24c60004 	addiu	a2,a2,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:90
    bne     destination_addr_a2, end_addr_a3, next_bss_word
bc0041e8:	14c7fffd 	bne	a2,a3,bc0041e0 <next_bss_word>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:91
    nop
bc0041ec:	00000000 	nop

bc0041f0 <copy_c2_ram_done>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:94

copy_c2_ram_done:
    jalr	zero,      ra
bc0041f0:	03e00009 	jalr	zero,ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/copy_c2_ram.S:95
    nop
bc0041f4:	00000000 	nop
	...

Disassembly of section .text_rom:

bc004200 <u_delay_cpu>:
u_delay_cpu():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:10

/*C0_COUNT change FREQ,SF_CPU_CLK/1MHZ/2.*/
#define CPU_USEC (SF_CPU_CLK)/2000000

LEAF(u_delay_cpu)
	mtc0 zero,C0_COUNT
bc004200:	40804800 	mtc0	zero,c0_count
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:11
	li a1,CPU_USEC
bc004204:	24050150 	li	a1,336
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:12
	mul a1,a0
bc004208:	70a42802 	mul	a1,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:14
1:
	mfc0 a0,C0_COUNT
bc00420c:	40044800 	mfc0	a0,c0_count
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:15
	subu	a2,a1,a0
bc004210:	00a43023 	subu	a2,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:16
	bgez a2,1b
bc004214:	04c1fffd 	bgez	a2,bc00420c <u_delay_cpu+0xc>
bc004218:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:19
	nop

	jr	ra
bc00421c:	03e00008 	jr	ra
bc004220:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:20
	nop
bc004224:	00000000 	nop

bc004228 <m_delay_cpu>:
m_delay_cpu():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:25
END(u_delay_cpu)

LEAF(m_delay_cpu)
	//attention: gpr a3 mustn't be used in u_delay!
	move a3,ra
bc004228:	03e03821 	move	a3,ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:30

#ifdef SIMULATION
	li	a2,1
#else
	li	a2,1000
bc00422c:	240603e8 	li	a2,1000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:32
#endif
	mul	a0,a2
bc004230:	70862002 	mul	a0,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:34

	la	a2,u_delay_cpu
bc004234:	3c06bc00 	lui	a2,0xbc00
bc004238:	24c64200 	addiu	a2,a2,16896
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:35
	jalr a2
bc00423c:	00c0f809 	jalr	a2
bc004240:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:38
	nop

	jr	a3
bc004244:	00e00008 	jr	a3
bc004248:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/cpu/cpu_timer.S:39
	nop
bc00424c:	00000000 	nop

bc004250 <disable_L2>:
disable_L2():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:61

/**************************************************************************************
**************************************************************************************/
LEAF(disable_L2)

	bnez    r8_core_num, done_disable_L2	# Only done from core 0.
bc004250:	15000004 	bnez	t0,bc004264 <done_disable_L2>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:70
    // to disable it or initialize it if it can't be disabled.
    // Disable the L2 cache using CCA override by writing a 0x50 to
    // the GCR Base register. 0x50 enables the CCA override bit and sets
    // the CCA to uncached.

	lw	    GCR_BASE, 0x0008(r22_gcr_addr)  // Read GCR_BASE
bc004254:	8ed00008 	lw	s0,8(s6)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:71
    li      TEMP_s1, 0x50                  	// Enable CCA and set to uncached
bc004258:	24110050 	li	s1,80
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:72
    ins     GCR_BASE, TEMP_s1, 0, 8    		// Insert bits
bc00425c:	7e303804 	ins	s0,s1,0x0,0x8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:73
    sw      GCR_BASE, 0x0008(r22_gcr_addr)  // Write GCR_BASE
bc004260:	aed00008 	sw	s0,8(s6)

bc004264 <done_disable_L2>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:76

done_disable_L2:
    jr      ra
bc004264:	03e00008 	jr	ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:77
    nop
bc004268:	00000000 	nop

bc00426c <enable_L2>:
enable_L2():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:83
END(disable_L2)
/**************************************************************************************
**************************************************************************************/
LEAF(enable_L2)

	bnez    r8_core_num, done_enable_L2	# Only done from core 0.
bc00426c:	15000003 	bnez	t0,bc00427c <done_enable_L2>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:90
    // Use CCA Override disable the L2 cache
    // NOTE: If you have a L3 cache you must add code here
    // to enable it or initialize it if it can't be enabled.


	lw	    GCR_BASE, 0x0008(r22_gcr_addr)  // Read GCR_BASE
bc004270:	8ed00008 	lw	s0,8(s6)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:91
 	ins     GCR_BASE, zero, 0, 8    		  // CCA Override disabled
bc004274:	7c103804 	ins	s0,zero,0x0,0x8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:92
    sw      GCR_BASE, 0x0008(r22_gcr_addr)  // Write GCR_BASE
bc004278:	aed00008 	sw	s0,8(s6)

bc00427c <done_enable_L2>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:95

done_enable_L2:
    jr      ra
bc00427c:	03e00008 	jr	ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:96
    nop
bc004280:	00000000 	nop

bc004284 <init_L2>:
init_L2():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:103
/**************************************************************************************
* Initialize the L2
**************************************************************************************/
LEAF(init_L2)
#ifndef SIMULATION
	bnez    r8_core_num, done_L2_cach_init			# Only done from core 0.
bc004284:	15000020 	bnez	t0,bc004308 <done_L2_cach_init>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:107

	// L2 Cache initialization routine
	// Check L2 cache size
	mfc0	CONFIG_L2_a2, C0_CONFIG2		// Read C0_Config2
bc004288:	40068002 	mfc0	a2,c0_config2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:109
	// Isolate L2$ Line Size
	ext	    LINE_SIZE_v1, CONFIG_L2_a2, 4, 4		// extract L2 line size
bc00428c:	7cc31900 	ext	v1,a2,0x4,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:112

	// Skip ahead if No L2$
	beq	    LINE_SIZE_v1, zero, done_L2_cach_init
bc004290:	1060001d 	beqz	v1,bc004308 <done_L2_cach_init>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:113
	nop
bc004294:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:115

	li	    TEMP_s1, 2
bc004298:	24110002 	li	s1,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:116
	sllv	LINE_SIZE_v1, TEMP_s1, LINE_SIZE_v1			// Now have true L2$ line size in bytes
bc00429c:	00711804 	sllv	v1,s1,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:119

	// Isolate L2 Sets per Way (cache lines per way)
	ext	    SET_SIZE_a0, CONFIG_L2_a2, 8, 4		// extrace sets per way encoding
bc0042a0:	7cc41a00 	ext	a0,a2,0x8,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:120
	li	    TEMP_s1, 64
bc0042a4:	24110040 	li	s1,64
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:121
	sllv	SET_SIZE_a0, TEMP_s1, SET_SIZE_a0			// L2$ Sets per way
bc0042a8:	00912004 	sllv	a0,s1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:125

	// Isolate L2 Associativity (number of ways)
	// L2$ Assoc (-1)
	ext	    ASSOC_a1, CONFIG_L2_a2, 0, 4		// extract ways encoding
bc0042ac:	7cc51800 	ext	a1,a2,0x0,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:126
	addiu	ASSOC_a1, ASSOC_a1, 1			// Decode L2 number of ways
bc0042b0:	24a50001 	addiu	a1,a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:128

	li 	TEMP_s1, (LINES_PER_ITER)
bc0042b4:	24110008 	li	s1,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:130

	mul	    SET_SIZE_a0, SET_SIZE_a0, ASSOC_a1				// Total number of sets
bc0042b8:	70852002 	mul	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:131
	mul		TOTAL_BYTES, SET_SIZE_a0, LINE_SIZE_v1		// Total number of bytes
bc0042bc:	70836002 	mul	t4,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:132
	mul		BYTES_PER_LOOP_v0, LINE_SIZE_v1, TEMP_s1		// Total bytes per loop
bc0042c0:	70711002 	mul	v0,v1,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:137

	// Set the starting address at the beginning of kgeg0 (0x80000000) which will corresponds to
	// way 0 index 0 of the cache and position so starting address is in the
	// middle of the first bytes per loop because the code will use + and - offsets
	lui	    CURRENT_ADDR, 0x8000
bc0042c4:	3c0d8000 	lui	t5,0x8000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:138
	srl		TEMP_s1, BYTES_PER_LOOP_v0, 1
bc0042c8:	00028842 	srl	s1,v0,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:139
	addu	CURRENT_ADDR, TEMP_s1, CURRENT_ADDR
bc0042cc:	022d6821 	addu	t5,s1,t5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:141

	addu	END_ADDR_a3, CURRENT_ADDR, TOTAL_BYTES		// make ending address
bc0042d0:	01ac3821 	addu	a3,t5,t4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:142
	subu	END_ADDR_a3, END_ADDR_a3, BYTES_PER_LOOP_v0		// -1 bytes per loop interration
bc0042d4:	00e23823 	subu	a3,a3,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:145

	// Clear L23TagLo/L23TagHi registers these are used to set the cache tag
	mtc0	zero, C0_TAGLO, 4
bc0042d8:	4080e004 	mtc0	zero,c0_taglo2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:146
	mtc0	zero, C0_TAGHI, 4	// Note: not all implementations will have a L23 tag Hi but writes will be ignored if not present
bc0042dc:	4080e804 	mtc0	zero,c0_taghi2

bc0042e0 <next_L2_cache_tag>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:154
// or not more than 64 bytes for a r6 and greater core

next_L2_cache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit
    cache 0xB, (L2LINE_SIZE*-2)(CURRENT_ADDR)
bc0042e0:	bdabffc0 	cache	0xb,-64(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:155
    cache 0xB, (L2LINE_SIZE*-1)(CURRENT_ADDR)
bc0042e4:	bdabffe0 	cache	0xb,-32(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:156
    cache 0xB, (L2LINE_SIZE*0)(CURRENT_ADDR)
bc0042e8:	bdab0000 	cache	0xb,0(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:157
    cache 0xB, (L2LINE_SIZE*1)(CURRENT_ADDR)
bc0042ec:	bdab0020 	cache	0xb,32(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:158
    cache 0xB, (L2LINE_SIZE*-4)(CURRENT_ADDR)
bc0042f0:	bdabff80 	cache	0xb,-128(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:159
    cache 0xB, (L2LINE_SIZE*-3)(CURRENT_ADDR)
bc0042f4:	bdabffa0 	cache	0xb,-96(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:160
    cache 0xB, (L2LINE_SIZE*2)(CURRENT_ADDR)
bc0042f8:	bdab0040 	cache	0xb,64(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:161
    cache 0xB, (L2LINE_SIZE*3)(CURRENT_ADDR)
bc0042fc:	bdab0060 	cache	0xb,96(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:162
	bne	    	CURRENT_ADDR, END_ADDR_a3, next_L2_cache_tag 	// Done yet?
bc004300:	15a7fff7 	bne	t5,a3,bc0042e0 <next_L2_cache_tag>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:163
	addu	    CURRENT_ADDR, BYTES_PER_LOOP_v0			// Get next starting line address
bc004304:	01a26821 	addu	t5,t5,v0

bc004308 <done_L2_cach_init>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:167

done_L2_cach_init:
#endif /* SIMULATION */
    jr      ra
bc004308:	03e00008 	jr	ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_L2_CM2.S:168
    nop
bc00430c:	00000000 	nop

bc004310 <init_icache>:
init_icache():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:66
**************************************************************************************/

LEAF(init_icache)
#ifndef SIMULATION
	// Can be skipped if Config7[HCI] set
	mfc0    TEMP1, C0_CONFIG, 7						// Read CP0 Config7
bc004310:	400e8007 	mfc0	t6,$16,7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:67
	ext		TEMP1, TEMP1, HCI, 1					// extract HCI
bc004314:	7dce0480 	ext	t6,t6,0x12,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:68
	bne		TEMP1, zero, done_icache
bc004318:	15c00021 	bnez	t6,bc0043a0 <done_icache>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:69
	nop
bc00431c:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:72

	// Determine how big the I$ is
	mfc0	CONFIG1_a2, C0_CONFIG1						// read C0_Config1
bc004320:	40068001 	mfc0	a2,c0_config1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:75

	// Isolate I$ Line Size
	ext	    LINE_SIZE_v1, CONFIG1_a2, CFG1_ILSHIFT, 3		// extract IL
bc004324:	7cc314c0 	ext	v1,a2,0x13,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:78

	// Skip ahead if No I$
	beq	    LINE_SIZE_v1, zero, done_icache
bc004328:	1060001d 	beqz	v1,bc0043a0 <done_icache>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:79
	nop
bc00432c:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:81

	li	    TEMP1, 2
bc004330:	240e0002 	li	t6,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:82
	sllv    LINE_SIZE_v1, TEMP1, LINE_SIZE_v1				// Now have true I$ line size in bytes
bc004334:	006e1804 	sllv	v1,t6,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:84

	ext	    SET_SIZE_a0, CONFIG1_a2, CFG1_ISSHIFT, 3		// extract IS
bc004338:	7cc41580 	ext	a0,a2,0x16,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:85
	li	    TEMP1, 64
bc00433c:	240e0040 	li	t6,64
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:86
	sllv    SET_SIZE_a0, TEMP1, SET_SIZE_a0					// I$ Sets per way
bc004340:	008e2004 	sllv	a0,t6,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:89

	// Config1IA == I$ Assoc - 1
	ext	    ASSOC_a1, CONFIG1_a2, CFG1_IASHIFT, 3			// extract IA
bc004344:	7cc51400 	ext	a1,a2,0x10,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:90
	addiu	ASSOC_a1, ASSOC_a1, 1
bc004348:	24a50001 	addiu	a1,a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:92

	li 	TEMP1, (LINES_PER_ITER)
bc00434c:	240e0008 	li	t6,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:94

	mul	    SET_SIZE_a0, SET_SIZE_a0, ASSOC_a1				// Total number of sets
bc004350:	70852002 	mul	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:95
	mul		TOTAL_BYTES, SET_SIZE_a0, LINE_SIZE_v1		// Total number of bytes
bc004354:	70836002 	mul	t4,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:96
	mul		BYTES_PER_LOOP_v0, LINE_SIZE_v1, TEMP1		// Total bytes per loop
bc004358:	706e1002 	mul	v0,v1,t6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:101

	// Set the starting address at the beginning of kgeg0 (0x80000000) which will corresponds to
	// way 0 index 0 of the cache and position so starting address is in the
	// middle of the first bytes per loop because the code will use + and - offsets
	li	    CURRENT_ADDR, 0x0000000080000000
bc00435c:	3c0d8000 	lui	t5,0x8000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:102
	srl	TEMP1, BYTES_PER_LOOP_v0, 1
bc004360:	00027042 	srl	t6,v0,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:103
	addu	CURRENT_ADDR, TEMP1, CURRENT_ADDR
bc004364:	01cd6821 	addu	t5,t6,t5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:104
	addu	END_ADDR_a3, CURRENT_ADDR, TOTAL_BYTES		// make ending address
bc004368:	01ac3821 	addu	a3,t5,t4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:105
	subu	END_ADDR_a3, END_ADDR_a3, BYTES_PER_LOOP_v0	// -1
bc00436c:	00e23823 	subu	a3,a3,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:108

	// Clear TagLo/TagHi registers
	mtc0    zero, C0_TAGLO		// write C0_ITagLo
bc004370:	4080e000 	mtc0	zero,c0_taglo
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:109
	mtc0    zero, C0_TAGHI		// Note: not all implementations will have a tag Hi but writes will be ignored if not present
bc004374:	4080e800 	mtc0	zero,c0_taghi

bc004378 <next_icache_tag>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:117
// or not more than 64 bytes for a r6 and greater core

next_icache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit
    cache 0x8, (ILINE_SIZE*-2)(CURRENT_ADDR)
bc004378:	bda8ffc0 	cache	0x8,-64(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:118
    cache 0x8, (ILINE_SIZE*-1)(CURRENT_ADDR)
bc00437c:	bda8ffe0 	cache	0x8,-32(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:119
    cache 0x8, (ILINE_SIZE*0)(CURRENT_ADDR)
bc004380:	bda80000 	cache	0x8,0(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:120
    cache 0x8, (ILINE_SIZE*1)(CURRENT_ADDR)
bc004384:	bda80020 	cache	0x8,32(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:121
    cache 0x8, (ILINE_SIZE*-4)(CURRENT_ADDR)
bc004388:	bda8ff80 	cache	0x8,-128(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:122
    cache 0x8, (ILINE_SIZE*-3)(CURRENT_ADDR)
bc00438c:	bda8ffa0 	cache	0x8,-96(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:123
    cache 0x8, (ILINE_SIZE*2)(CURRENT_ADDR)
bc004390:	bda80040 	cache	0x8,64(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:124
    cache 0x8, (ILINE_SIZE*3)(CURRENT_ADDR)
bc004394:	bda80060 	cache	0x8,96(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:125
	bne	    	CURRENT_ADDR, END_ADDR_a3, next_icache_tag 	// Done yet?
bc004398:	15a7fff7 	bne	t5,a3,bc004378 <next_icache_tag>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:126
	addu	    CURRENT_ADDR, BYTES_PER_LOOP_v0				// Get next starting line address
bc00439c:	01a26821 	addu	t5,t5,v0

bc0043a0 <done_icache>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:130

done_icache:
#endif /* SIMULATION */
    jalr	zero,      ra
bc0043a0:	03e00009 	jalr	zero,ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:131
    nop
bc0043a4:	00000000 	nop

bc0043a8 <init_dcache>:
init_dcache():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:141
**************************************************************************************/

LEAF(init_dcache)
#ifndef SIMULATION
	// Can be skipped if Config7[HCI] set
	mfc0    TEMP1, C0_CONFIG, 7						// Read CP0 Config7
bc0043a8:	400e8007 	mfc0	t6,$16,7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:142
	ext		TEMP1, TEMP1, HCI, 1					// extract HCI
bc0043ac:	7dce0480 	ext	t6,t6,0x12,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:143
	bne		TEMP1, zero, done_dcache
bc0043b0:	15c00021 	bnez	t6,bc004438 <done_dcache>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:144
	nop
bc0043b4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:146

	mfc0	CONFIG1_a2, C0_CONFIG1					// read C0_Config1
bc0043b8:	40068001 	mfc0	a2,c0_config1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:149

	// Isolate D$ Line Size
	ext	    LINE_SIZE_v1, CONFIG1_a2, CFG1_DLSHIFT, 3	// extract DL
bc0043bc:	7cc31280 	ext	v1,a2,0xa,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:152

	// Skip ahead if No D$
	beq	    LINE_SIZE_v1, zero, done_dcache
bc0043c0:	1060001d 	beqz	v1,bc004438 <done_dcache>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:153
	nop
bc0043c4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:155

	li	    TEMP1, 2
bc0043c8:	240e0002 	li	t6,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:156
	sllv	LINE_SIZE_v1, TEMP1, LINE_SIZE_v1			// Now have true D$ line size in bytes
bc0043cc:	006e1804 	sllv	v1,t6,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:158

	ext	    SET_SIZE_a0, CONFIG1_a2, CFG1_DSSHIFT, 3	// extract DS
bc0043d0:	7cc41340 	ext	a0,a2,0xd,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:159
	li	    TEMP1, 64
bc0043d4:	240e0040 	li	t6,64
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:160
	sllv	SET_SIZE_a0, TEMP1, SET_SIZE_a0				// D$ Sets per way
bc0043d8:	008e2004 	sllv	a0,t6,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:163

	// Config1DA == D$ Assoc - 1
	ext	    ASSOC_a1, CONFIG1_a2, CFG1_DASHIFT, 3		// extract DA
bc0043dc:	7cc511c0 	ext	a1,a2,0x7,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:164
	addiu	ASSOC_a1, 1
bc0043e0:	24a50001 	addiu	a1,a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:166

	li 	TEMP1, (LINES_PER_ITER)
bc0043e4:	240e0008 	li	t6,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:168

	mul	    SET_SIZE_a0, SET_SIZE_a0, ASSOC_a1			// Total number of sets
bc0043e8:	70852002 	mul	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:169
	mul		TOTAL_BYTES, SET_SIZE_a0, LINE_SIZE_v1		// Total number of bytes
bc0043ec:	70836002 	mul	t4,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:170
	mul		BYTES_PER_LOOP_v0, LINE_SIZE_v1, TEMP1		// Total bytes per loop
bc0043f0:	706e1002 	mul	v0,v1,t6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:175

	// Set the starting address at the beginning of kgeg0 (0x80000000) which will corresponds to
	// way 0 index 0 of the cache and position so starting address is in the
	// middle of the first bytes per loop because the code will use + and - offsets
	lui	    CURRENT_ADDR, 0x8000
bc0043f4:	3c0d8000 	lui	t5,0x8000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:176
	srl		TEMP1, BYTES_PER_LOOP_v0, 1
bc0043f8:	00027042 	srl	t6,v0,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:177
	addu	CURRENT_ADDR, TEMP1, CURRENT_ADDR
bc0043fc:	01cd6821 	addu	t5,t6,t5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:179

	addu	END_ADDR_a3, CURRENT_ADDR, TOTAL_BYTES		// make ending address
bc004400:	01ac3821 	addu	a3,t5,t4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:180
	subu	END_ADDR_a3, END_ADDR_a3, BYTES_PER_LOOP_v0	// -1
bc004404:	00e23823 	subu	a3,a3,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:183

	// Clear TagLo/TagHi registers
	mtc0	zero, C0_TAGLO, 2	// write C0_DTagLo
bc004408:	4080e002 	mtc0	zero,c0_taglo1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:184
	mtc0	zero, C0_TAGHI, 2	// Note: not all implementations will have a tag Hi but writes will be ignored if not present
bc00440c:	4080e802 	mtc0	zero,c0_taghi1

bc004410 <next_dcache_tag>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:192
// or not more than 64 bytes for a r6 and greater core

next_dcache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit
    cache 0x9, (DLINE_SIZE*-2)(CURRENT_ADDR)
bc004410:	bda9ffc0 	cache	0x9,-64(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:193
    cache 0x9, (DLINE_SIZE*-1)(CURRENT_ADDR)
bc004414:	bda9ffe0 	cache	0x9,-32(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:194
    cache 0x9, (DLINE_SIZE*0)(CURRENT_ADDR)
bc004418:	bda90000 	cache	0x9,0(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:195
    cache 0x9, (DLINE_SIZE*1)(CURRENT_ADDR)
bc00441c:	bda90020 	cache	0x9,32(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:196
    cache 0x9, (DLINE_SIZE*-4)(CURRENT_ADDR)
bc004420:	bda9ff80 	cache	0x9,-128(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:197
    cache 0x9, (DLINE_SIZE*-3)(CURRENT_ADDR)
bc004424:	bda9ffa0 	cache	0x9,-96(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:198
    cache 0x9, (DLINE_SIZE*2)(CURRENT_ADDR)
bc004428:	bda90040 	cache	0x9,64(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:199
    cache 0x9, (DLINE_SIZE*3)(CURRENT_ADDR)
bc00442c:	bda90060 	cache	0x9,96(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:200
	bne	    	CURRENT_ADDR, END_ADDR_a3, next_dcache_tag 	// Done yet?
bc004430:	15a7fff7 	bne	t5,a3,bc004410 <next_dcache_tag>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:201
	addu	    CURRENT_ADDR, BYTES_PER_LOOP_v0			// Get next starting line address
bc004434:	01a26821 	addu	t5,t5,v0

bc004438 <done_dcache>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:206

done_dcache:

#endif /* SIMULATION */
    jalr	zero,      ra
bc004438:	03e00009 	jalr	zero,ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:207
    nop
bc00443c:	00000000 	nop

bc004440 <change_k0_cca>:
change_k0_cca():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:213
END(init_dcache)

LEAF(change_k0_cca)
	// NOTE! This code must be executed in KSEG1 (not KSGE0 uncached)
    // Set CCA for kseg0 to cacheable
	mfc0	TEMP1, C0_CONFIG	// read C0_Config
bc004440:	400e8000 	mfc0	t6,c0_config
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:214
	beqz    r11_is_cps, set_kseg0_cca
bc004444:	11600002 	beqz	t3,bc004450 <set_kseg0_cca>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:215
	li	    TEMP2, 3			// CCA for all others
bc004448:	240f0003 	li	t7,3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:216
	li	    TEMP2, 5			// CCA for coherent cores (fall through)
bc00444c:	240f0005 	li	t7,5

bc004450 <set_kseg0_cca>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:219

set_kseg0_cca:
    ins	    TEMP1, TEMP2, 0, 3	// instert K0
bc004450:	7dee1004 	ins	t6,t7,0x0,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:220
	mtc0	TEMP1, C0_CONFIG	// write C0_Config
bc004454:	408e8000 	mtc0	t6,c0_config
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:221
	jalr.hb   zero, ra
bc004458:	03e00409 	jalr.hb	zero,ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:222
    nop
bc00445c:	00000000 	nop

bc004460 <flush_dcache>:
flush_dcache():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:229
END(change_k0_cca)


LEAF(flush_dcache)

	mfc0	CONFIG1_a2, C0_CONFIG1						// read C0_Config1
bc004460:	40068001 	mfc0	a2,c0_config1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:232

	// Isolate D$ Line Size
	ext	    LINE_SIZE_v1, CONFIG1_a2, CFG1_DLSHIFT, 3	// extract DL
bc004464:	7cc31280 	ext	v1,a2,0xa,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:235

	// Skip ahead if No D$
	beq	    LINE_SIZE_v1, zero, done_flush_dcache
bc004468:	1060001d 	beqz	v1,bc0044e0 <done_flush_dcache>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:236
	nop
bc00446c:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:238

	li	    TEMP1, 2
bc004470:	240e0002 	li	t6,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:239
	sllv	LINE_SIZE_v1, TEMP1, LINE_SIZE_v1			// Now have true D$ line size in bytes
bc004474:	006e1804 	sllv	v1,t6,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:241

	ext	    SET_SIZE_a0, CONFIG1_a2, CFG1_DSSHIFT, 3	// extract DS
bc004478:	7cc41340 	ext	a0,a2,0xd,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:242
	li	    TEMP1, 64
bc00447c:	240e0040 	li	t6,64
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:243
	sllv	SET_SIZE_a0, TEMP1, SET_SIZE_a0				// D$ Sets per way
bc004480:	008e2004 	sllv	a0,t6,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:246

	// Config1DA == D$ Assoc - 1
	ext	    ASSOC_a1, CONFIG1_a2, CFG1_DASHIFT, 3		// extract DA
bc004484:	7cc511c0 	ext	a1,a2,0x7,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:247
	addiu	ASSOC_a1, 1
bc004488:	24a50001 	addiu	a1,a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:249

	li 	TEMP1, (LINES_PER_ITER)
bc00448c:	240e0008 	li	t6,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:251

	mul	    SET_SIZE_a0, SET_SIZE_a0, ASSOC_a1			// Total number of sets
bc004490:	70852002 	mul	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:252
	mul		TOTAL_BYTES, SET_SIZE_a0, LINE_SIZE_v1		// Total number of bytes
bc004494:	70836002 	mul	t4,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:253
	mul		BYTES_PER_LOOP_v0, LINE_SIZE_v1, TEMP1		// Total bytes per loop
bc004498:	706e1002 	mul	v0,v1,t6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:255

	lui	    CURRENT_ADDR, 0x8000		    			// Get a KSeg0 address for cacheops
bc00449c:	3c0d8000 	lui	t5,0x8000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:256
	srl		TEMP1, BYTES_PER_LOOP_v0, 1
bc0044a0:	00027042 	srl	t6,v0,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:257
	addu	CURRENT_ADDR, TEMP1, CURRENT_ADDR
bc0044a4:	01cd6821 	addu	t5,t6,t5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:259

	addu	END_ADDR_a3, CURRENT_ADDR, TOTAL_BYTES		// make ending address
bc0044a8:	01ac3821 	addu	a3,t5,t4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:260
	subu	END_ADDR_a3, END_ADDR_a3, BYTES_PER_LOOP_v0	// -1
bc0044ac:	00e23823 	subu	a3,a3,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:263

	// Clear TagLo/TagHi registers
	mtc0	zero, C0_TAGLO, 2	// write C0_DTagLo
bc0044b0:	4080e002 	mtc0	zero,c0_taglo1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:264
	mtc0	zero, C0_TAGHI, 2	// Note: not all implementations will have a tag Hi but writes will be ignored if not present
bc0044b4:	4080e802 	mtc0	zero,c0_taghi1

bc0044b8 <fnext_dcache_tag>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:272
// or not more than 64 bytes for a r6 and greater core

fnext_dcache_tag:
	// Index writeback invalidate Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit
    cache 0x1, (DLINE_SIZE*-2)(CURRENT_ADDR)
bc0044b8:	bda1ffc0 	cache	0x1,-64(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:273
    cache 0x1, (DLINE_SIZE*-1)(CURRENT_ADDR)
bc0044bc:	bda1ffe0 	cache	0x1,-32(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:274
    cache 0x1, (DLINE_SIZE*0)(CURRENT_ADDR)
bc0044c0:	bda10000 	cache	0x1,0(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:275
    cache 0x1, (DLINE_SIZE*1)(CURRENT_ADDR)
bc0044c4:	bda10020 	cache	0x1,32(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:276
    cache 0x1, (DLINE_SIZE*-4)(CURRENT_ADDR)
bc0044c8:	bda1ff80 	cache	0x1,-128(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:277
    cache 0x1, (DLINE_SIZE*-3)(CURRENT_ADDR)
bc0044cc:	bda1ffa0 	cache	0x1,-96(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:278
    cache 0x1, (DLINE_SIZE*2)(CURRENT_ADDR)
bc0044d0:	bda10040 	cache	0x1,64(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:279
    cache 0x1, (DLINE_SIZE*3)(CURRENT_ADDR)
bc0044d4:	bda10060 	cache	0x1,96(t5)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:280
	bne	  CURRENT_ADDR, END_ADDR_a3, fnext_dcache_tag 	// Done yet?
bc0044d8:	15a7fff7 	bne	t5,a3,bc0044b8 <fnext_dcache_tag>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:281
	addu  CURRENT_ADDR, BYTES_PER_LOOP_v0				// Get next starting line address
bc0044dc:	01a26821 	addu	t5,t5,v0

bc0044e0 <done_flush_dcache>:
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:284

done_flush_dcache:
	sync
bc0044e0:	0000000f 	sync
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:285
    jalr	zero,      ra
bc0044e4:	03e00009 	jalr	zero,ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/arch/mips/lib/init_caches.S:286
    nop
bc0044e8:	00000000 	nop
done_flush_dcache():
bc0044ec:	00000000 	nop

bc0044f0 <memcpy>:
memcpy():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:85
#endif

/* memcpy(to, from, n) */
LEAF(memcpy)
	.set	noreorder
	move	v0,a0			# save to for return
bc0044f0:	00801021 	move	v0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:86
	beq	a2, zero, ..ret
bc0044f4:	10c00056 	beqz	a2,bc004650 <memcpy+0x160>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:87
	sltu	t2, a2, 12		# check for small copy
bc0044f8:	2cca000c 	sltiu	t2,a2,12
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:90

..forward:
	bne	t2, zero, ..smallcpy	# do a small bcopy
bc0044fc:	1540004d 	bnez	t2,bc004634 <memcpy+0x144>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:91
	xor	v1, a1, a0		# compare low bits of addresses
bc004500:	00a41826 	xor	v1,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:92
	and	v1, RS-1
bc004504:	30630003 	andi	v1,v1,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:93
	subu	a3, zero, a0		# compute # bytes to word align address
bc004508:	00043823 	negu	a3,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:94
	beq	v1, zero, ..aligned	# addresses can both be word aligned
bc00450c:	10600029 	beqz	v1,bc0045b4 <memcpy+0xc4>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:95
	and	a3, RS-1
bc004510:	30e70003 	andi	a3,a3,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:97

	beq	a3, zero, 1f
bc004514:	10e00006 	beqz	a3,bc004530 <memcpy+0x40>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:98
	subu	a2, a3			# subtract from remaining count
bc004518:	00c73023 	subu	a2,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:100

	LHI	v1, 0(a1)		# get next RS bytes (unaligned)
bc00451c:	98a30000 	lwr	v1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:101
	LLO	v1, RS-1(a1)
bc004520:	88a30003 	lwl	v1,3(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:102
	addu	a1, a3
bc004524:	00a72821 	addu	a1,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:103
	SHI	v1, 0(a0)		# store 0..RS-1 bytes to align a0
bc004528:	b8830000 	swr	v1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:104
	addu	a0, a3
bc00452c:	00872021 	addu	a0,a0,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:107

	/* Try a 4X unrolled unaligned block copy */
1:	and	v1, a2, (RS*4)-1	# remaining size % blocksize
bc004530:	30c3000f 	andi	v1,a2,0xf
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:108
	subu	a3, a2, v1		# size of remaining blocks
bc004534:	00c33823 	subu	a3,a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:109
	beq	a3, zero, 1f		# none?
bc004538:	10e00011 	beqz	a3,bc004580 <memcpy+0x90>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:110
	move	a2, v1			# bytes remaining after block copy
bc00453c:	00603021 	move	a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:111
	addu	a3, a1			# compute ending address
bc004540:	00e53821 	addu	a3,a3,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:113

2:	LHI	v1, RS*0(a1)		# copy block a1 unaligned, a0 aligned
bc004544:	98a30000 	lwr	v1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:114
	LLO	v1, RS*0+RS-1(a1)
bc004548:	88a30003 	lwl	v1,3(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:115
	LHI	t0, RS*1(a1)
bc00454c:	98a80004 	lwr	t0,4(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:116
	LLO	t0, RS*1+RS-1(a1)
bc004550:	88a80007 	lwl	t0,7(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:117
	LHI	t1, RS*2(a1)
bc004554:	98a90008 	lwr	t1,8(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:118
	LLO	t1, RS*2+RS-1(a1)
bc004558:	88a9000b 	lwl	t1,11(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:119
	LHI	t2, RS*3(a1)
bc00455c:	98aa000c 	lwr	t2,12(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:120
	LLO	t2, RS*3+RS-1(a1)
bc004560:	88aa000f 	lwl	t2,15(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:121
	S	v1, RS*0(a0)
bc004564:	ac830000 	sw	v1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:122
	S	t0, RS*1(a0)
bc004568:	ac880004 	sw	t0,4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:123
	S	t1, RS*2(a0)
bc00456c:	ac890008 	sw	t1,8(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:124
	addu	a1, RS*4
bc004570:	24a50010 	addiu	a1,a1,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:125
	addu	a0, RS*4
bc004574:	24840010 	addiu	a0,a0,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:126
	bne	a1, a3, 2b
bc004578:	14a7fff2 	bne	a1,a3,bc004544 <memcpy+0x54>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:127
	S	t2, -RS(a0)
bc00457c:	ac8afffc 	sw	t2,-4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:129

1:	and	v1, a2, RS-1		# compute number of words left
bc004580:	30c30003 	andi	v1,a2,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:130
	subu	a3, a2, v1
bc004584:	00c33823 	subu	a3,a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:131
	beq	a3, zero, ..smallcpy	# none?
bc004588:	10e0002a 	beqz	a3,bc004634 <memcpy+0x144>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:132
	move	a2, v1			# bytes remaining after word copy
bc00458c:	00603021 	move	a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:133
	addu	a3, a1			# compute ending address
bc004590:	00e53821 	addu	a3,a3,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:135

2:	LHI	v1, 0(a1)		# copy words a1 unaligned, a0 aligned
bc004594:	98a30000 	lwr	v1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:136
	LLO	v1, RS-1(a1)
bc004598:	88a30003 	lwl	v1,3(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:137
	addu	a1, RS
bc00459c:	24a50004 	addiu	a1,a1,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:138
	addu	a0, RS
bc0045a0:	24840004 	addiu	a0,a0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:139
	bne	a1, a3, 2b
bc0045a4:	14a7fffb 	bne	a1,a3,bc004594 <memcpy+0xa4>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:140
	S	v1, -RS(a0)
bc0045a8:	ac83fffc 	sw	v1,-4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:142

	b	..smallcpy
bc0045ac:	10000021 	b	bc004634 <memcpy+0x144>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:143
	nop
bc0045b0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:147

..aligned:
	/* Both addresses have the same alignment: do initial bytes to align */
	beq	a3, zero, 1f
bc0045b4:	10e00005 	beqz	a3,bc0045cc <memcpy+0xdc>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:148
	subu	a2, a3			# subtract from remaining count
bc0045b8:	00c73023 	subu	a2,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:149
	LHI	v1, 0(a1)		# copy 1, 2, or 3 bytes to align
bc0045bc:	98a30000 	lwr	v1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:150
	addu	a1,  a3
bc0045c0:	00a72821 	addu	a1,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:151
	SHI	v1, 0(a0)
bc0045c4:	b8830000 	swr	v1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:152
	addu	a0, a3
bc0045c8:	00872021 	addu	a0,a0,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:155

	/* Try a 4X unrolled block copy */
1:	and	v1, a2, (RS*4)-1	# remaining size % blocksize
bc0045cc:	30c3000f 	andi	v1,a2,0xf
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:156
	subu	a3, a2, v1		# size of remaining blocks
bc0045d0:	00c33823 	subu	a3,a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:157
	beq	a3, zero, 1f		# none?
bc0045d4:	10e0000d 	beqz	a3,bc00460c <memcpy+0x11c>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:158
	move	a2, v1			# bytes remaining after block copy
bc0045d8:	00603021 	move	a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:159
	addu	a3, a1			# compute ending address
bc0045dc:	00e53821 	addu	a3,a3,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:161

2:	L	v1, RS*0(a1)
bc0045e0:	8ca30000 	lw	v1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:162
	L	t0, RS*1(a1)
bc0045e4:	8ca80004 	lw	t0,4(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:163
	L	t1, RS*2(a1)
bc0045e8:	8ca90008 	lw	t1,8(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:164
	L	t2, RS*3(a1)
bc0045ec:	8caa000c 	lw	t2,12(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:165
	S	v1, RS*0(a0)
bc0045f0:	ac830000 	sw	v1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:166
	S	t0, RS*1(a0)
bc0045f4:	ac880004 	sw	t0,4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:167
	S	t1, RS*2(a0)
bc0045f8:	ac890008 	sw	t1,8(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:168
	addu	a1, RS*4
bc0045fc:	24a50010 	addiu	a1,a1,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:169
	addu	a0, RS*4
bc004600:	24840010 	addiu	a0,a0,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:170
	bne	a1, a3, 2b
bc004604:	14a7fff6 	bne	a1,a3,bc0045e0 <memcpy+0xf0>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:171
	S	t2, -RS(a0)
bc004608:	ac8afffc 	sw	t2,-4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:174

	/* Try a word at a time */
1:	and	v1, a2, RS-1		# remaining size % word size
bc00460c:	30c30003 	andi	v1,a2,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:175
	subu	a3, a2, v1		# size of remaining words
bc004610:	00c33823 	subu	a3,a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:176
	beq	a3, zero, ..smallcpy	# none?
bc004614:	10e00007 	beqz	a3,bc004634 <memcpy+0x144>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:177
	move	a2, v1			# bytes remaining after word copy
bc004618:	00603021 	move	a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:178
	addu	a3, a1			# compute ending address
bc00461c:	00e53821 	addu	a3,a3,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:180

2:	L	v1, 0(a1)		# copy words
bc004620:	8ca30000 	lw	v1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:181
	addu	a1, RS
bc004624:	24a50004 	addiu	a1,a1,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:182
	addu	a0, RS
bc004628:	24840004 	addiu	a0,a0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:183
	bne	a1, a3, 2b
bc00462c:	14a7fffc 	bne	a1,a3,bc004620 <memcpy+0x130>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:184
	S	v1, -RS(a0)
bc004630:	ac83fffc 	sw	v1,-4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:188

..smallcpy:
	/* Last resort: byte at a time */
	beq	a2, zero, ..ret
bc004634:	10c00006 	beqz	a2,bc004650 <memcpy+0x160>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:189
	addu	a3, a2, a1		# compute ending address
bc004638:	00c53821 	addu	a3,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:191

1:	lbu	v1, 0(a1)		# copy bytes
bc00463c:	90a30000 	lbu	v1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:192
	addu	a1, 1
bc004640:	24a50001 	addiu	a1,a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:193
	addu	a0, 1
bc004644:	24840001 	addiu	a0,a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:194
	bne	a1, a3, 1b
bc004648:	14a7fffc 	bne	a1,a3,bc00463c <memcpy+0x14c>
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:195
	sb	v1, -1(a0)
bc00464c:	a083ffff 	sb	v1,-1(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:197

..ret:	j	ra
bc004650:	03e00008 	jr	ra
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/memcpy.S:198
	nop
bc004654:	00000000 	nop
	...

bc004660 <flash_read>:
flash_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:94
	return x;
}
#define __arch__swab32(x)	___arch__swab32(x)

static int flash_read(int bldev, unsigned int off, unsigned char *buf, u32 sz)
{
bc004660:	27bdffe0 	addiu	sp,sp,-32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:95
	switch (bldev) {
bc004664:	2c820005 	sltiu	v0,a0,5
bc004668:	10400018 	beqz	v0,bc0046cc <flash_read+0x6c>
bc00466c:	afbf001c 	sw	ra,28(sp)
bc004670:	3c02bc01 	lui	v0,0xbc01
bc004674:	24428f50 	addiu	v0,v0,-28848
bc004678:	00042080 	sll	a0,a0,0x2
bc00467c:	00442021 	addu	a0,v0,a0
bc004680:	8c820000 	lw	v0,0(a0)
bc004684:	00400008 	jr	v0
bc004688:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:112
	default:
		return -EINVAL;
	}

	return 0;
}
bc00468c:	8fbf001c 	lw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:98
static int flash_read(int bldev, unsigned int off, unsigned char *buf, u32 sz)
{
	switch (bldev) {
	case BOOT_SPI_FLASH:
	case BOOT_EFLASH:
		return SPI_FLASH_Read(DL_SPI_CTRL_NO, off, buf, sz);
bc004690:	00002021 	move	a0,zero
bc004694:	0b001bb2 	j	bc006ec8 <SPI_FLASH_Read>
bc004698:	27bd0020 	addiu	sp,sp,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:112
	default:
		return -EINVAL;
	}

	return 0;
}
bc00469c:	8fbf001c 	lw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:100
	switch (bldev) {
	case BOOT_SPI_FLASH:
	case BOOT_EFLASH:
		return SPI_FLASH_Read(DL_SPI_CTRL_NO, off, buf, sz);
	case BOOT_SPI_NAND:
		return SPI_NAND_read(off, buf, DL_SPI_CTRL_NO, sz);
bc0046a0:	00a02021 	move	a0,a1
bc0046a4:	00c02821 	move	a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:112
	default:
		return -EINVAL;
	}

	return 0;
}
bc0046a8:	27bd0020 	addiu	sp,sp,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:100
	switch (bldev) {
	case BOOT_SPI_FLASH:
	case BOOT_EFLASH:
		return SPI_FLASH_Read(DL_SPI_CTRL_NO, off, buf, sz);
	case BOOT_SPI_NAND:
		return SPI_NAND_read(off, buf, DL_SPI_CTRL_NO, sz);
bc0046ac:	0b001c95 	j	bc007254 <SPI_NAND_read>
bc0046b0:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:105
	case BOOT_EMMC:
		mmc_data_read(off, buf, DL_EMMC_BLKSIZ, sz);
		break;
	case BOOT_SD:
		mmc_data_read(off, buf, DL_SDIO_BLKSIZ, sz);
bc0046b4:	00a02021 	move	a0,a1
bc0046b8:	00c02821 	move	a1,a2
bc0046bc:	0f002000 	jal	bc008000 <mmc_data_read>
bc0046c0:	24060200 	li	a2,512
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:106
		break;
bc0046c4:	0b0011b4 	j	bc0046d0 <flash_read+0x70>
bc0046c8:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:108
	default:
		return -EINVAL;
bc0046cc:	2402ffea 	li	v0,-22
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:112
	}

	return 0;
}
bc0046d0:	8fbf001c 	lw	ra,28(sp)
bc0046d4:	03e00008 	jr	ra
bc0046d8:	27bd0020 	addiu	sp,sp,32

bc0046dc <load_image>:
load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:131
/*
 * Return the entry point of uboot.
 * Retrun 0 on failure.
 */
static int load_image(int bl_dev, int boot)
{
bc0046dc:	27bdff70 	addiu	sp,sp,-144
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:137
	image_header_t header;
	unsigned int size, load, magic, offset;
	unsigned char factory[32];
	int err;

	if ((err = flash_read(bl_dev, SYS_FACTORY_OFFS, factory, 32)))
bc0046e0:	27a60058 	addiu	a2,sp,88
bc0046e4:	24070020 	li	a3,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:131
/*
 * Return the entry point of uboot.
 * Retrun 0 on failure.
 */
static int load_image(int bl_dev, int boot)
{
bc0046e8:	afb10080 	sw	s1,128(sp)
bc0046ec:	00a08821 	move	s1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:137
	image_header_t header;
	unsigned int size, load, magic, offset;
	unsigned char factory[32];
	int err;

	if ((err = flash_read(bl_dev, SYS_FACTORY_OFFS, factory, 32)))
bc0046f0:	3c050009 	lui	a1,0x9
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:131
/*
 * Return the entry point of uboot.
 * Retrun 0 on failure.
 */
static int load_image(int bl_dev, int boot)
{
bc0046f4:	afb20084 	sw	s2,132(sp)
bc0046f8:	afbf008c 	sw	ra,140(sp)
bc0046fc:	afb30088 	sw	s3,136(sp)
bc004700:	afb0007c 	sw	s0,124(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:137
	image_header_t header;
	unsigned int size, load, magic, offset;
	unsigned char factory[32];
	int err;

	if ((err = flash_read(bl_dev, SYS_FACTORY_OFFS, factory, 32)))
bc004704:	0f001198 	jal	bc004660 <flash_read>
bc004708:	00809021 	move	s2,a0
bc00470c:	14400036 	bnez	v0,bc0047e8 <load_image+0x10c>
bc004710:	93a3006f 	lbu	v1,111(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:139
		return err;
	if (factory[23] == 'P' && factory[24] == 'C' && factory[25] == 'B' &&
bc004714:	24020050 	li	v0,80
bc004718:	1462000d 	bne	v1,v0,bc004750 <load_image+0x74>
bc00471c:	3c100002 	lui	s0,0x2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:139 (discriminator 1)
bc004720:	93a30070 	lbu	v1,112(sp)
bc004724:	24020043 	li	v0,67
bc004728:	1462000a 	bne	v1,v0,bc004754 <load_image+0x78>
bc00472c:	02402021 	move	a0,s2
bc004730:	93a30071 	lbu	v1,113(sp)
bc004734:	24020042 	li	v0,66
bc004738:	14620007 	bne	v1,v0,bc004758 <load_image+0x7c>
bc00473c:	02002821 	move	a1,s0
bc004740:	93a30072 	lbu	v1,114(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:143 (discriminator 1)
			factory[26] == 'T')
		offset = SYS_SPI_PCBA_OFFS;
	else
		offset = SYS_SPI_U_BOOT_OFFS;
bc004744:	3c0200f8 	lui	v0,0xf8
bc004748:	38630054 	xori	v1,v1,0x54
bc00474c:	0043800a 	movz	s0,v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:144
	flash_read(bl_dev, offset, (unsigned char *)&header, sizeof(header));
bc004750:	02402021 	move	a0,s2
bc004754:	02002821 	move	a1,s0
bc004758:	27a60018 	addiu	a2,sp,24
bc00475c:	0f001198 	jal	bc004660 <flash_read>
bc004760:	24070040 	li	a3,64
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:147

	magic = __arch__swab32(header.ih_magic);
	if (magic != IH_MAGIC)
bc004764:	3c032705 	lui	v1,0x2705
bc004768:	24631956 	addiu	v1,v1,6486
___arch__swab32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:83
	LED_BLINK
};

static __inline__ u32 ___arch__swab32(__u32 x)
{
	__asm__(
bc00476c:	8fa40018 	lw	a0,24(sp)
load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:148
		offset = SYS_SPI_U_BOOT_OFFS;
	flash_read(bl_dev, offset, (unsigned char *)&header, sizeof(header));

	magic = __arch__swab32(header.ih_magic);
	if (magic != IH_MAGIC)
		return 0;
bc004770:	00001021 	move	v0,zero
___arch__swab32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:83
	LED_BLINK
};

static __inline__ u32 ___arch__swab32(__u32 x)
{
	__asm__(
bc004774:	7c0420a0 	wsbh	a0,a0
bc004778:	00242402 	ror	a0,a0,0x10
load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:147
	else
		offset = SYS_SPI_U_BOOT_OFFS;
	flash_read(bl_dev, offset, (unsigned char *)&header, sizeof(header));

	magic = __arch__swab32(header.ih_magic);
	if (magic != IH_MAGIC)
bc00477c:	1483001b 	bne	a0,v1,bc0047ec <load_image+0x110>
bc004780:	8fbf008c 	lw	ra,140(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:150
		return 0;

	if (header.ih_os != IH_OS_U_BOOT)
bc004784:	93a40034 	lbu	a0,52(sp)
bc004788:	24030011 	li	v1,17
bc00478c:	14830018 	bne	a0,v1,bc0047f0 <load_image+0x114>
bc004790:	8fb30088 	lw	s3,136(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:153
		return 0;

	if (!boot)
bc004794:	52200017 	beqzl	s1,bc0047f4 <load_image+0x118>
bc004798:	8fb20084 	lw	s2,132(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:162
	size = __arch__swab32(header.ih_size);
	load = __arch__swab32(header.ih_load);

	/* If uboot name longer than IH_NMLEN bytes, cut down it. */
	header.ih_name[IH_NMLEN - 1] = '\0';
	printf("U-image: %s, size is %d\n", header.ih_name, size);
bc00479c:	3c04bc01 	lui	a0,0xbc01
___arch__swab32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:83
	LED_BLINK
};

static __inline__ u32 ___arch__swab32(__u32 x)
{
	__asm__(
bc0047a0:	8fb30024 	lw	s3,36(sp)
load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:162
	size = __arch__swab32(header.ih_size);
	load = __arch__swab32(header.ih_load);

	/* If uboot name longer than IH_NMLEN bytes, cut down it. */
	header.ih_name[IH_NMLEN - 1] = '\0';
	printf("U-image: %s, size is %d\n", header.ih_name, size);
bc0047a4:	24848f64 	addiu	a0,a0,-28828
___arch__swab32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:83
	LED_BLINK
};

static __inline__ u32 ___arch__swab32(__u32 x)
{
	__asm__(
bc0047a8:	7c1398a0 	wsbh	s3,s3
bc0047ac:	00339c02 	ror	s3,s3,0x10
load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:162
	size = __arch__swab32(header.ih_size);
	load = __arch__swab32(header.ih_load);

	/* If uboot name longer than IH_NMLEN bytes, cut down it. */
	header.ih_name[IH_NMLEN - 1] = '\0';
	printf("U-image: %s, size is %d\n", header.ih_name, size);
bc0047b0:	27a50038 	addiu	a1,sp,56
bc0047b4:	02603021 	move	a2,s3
___arch__swab32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:83
	LED_BLINK
};

static __inline__ u32 ___arch__swab32(__u32 x)
{
	__asm__(
bc0047b8:	8fb10028 	lw	s1,40(sp)
load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:161
	/* TODO: check header & data crc */
	size = __arch__swab32(header.ih_size);
	load = __arch__swab32(header.ih_load);

	/* If uboot name longer than IH_NMLEN bytes, cut down it. */
	header.ih_name[IH_NMLEN - 1] = '\0';
bc0047bc:	a3a00057 	sb	zero,87(sp)
___arch__swab32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:83
	LED_BLINK
};

static __inline__ u32 ___arch__swab32(__u32 x)
{
	__asm__(
bc0047c0:	7c1188a0 	wsbh	s1,s1
bc0047c4:	00318c02 	ror	s1,s1,0x10
load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:162
	size = __arch__swab32(header.ih_size);
	load = __arch__swab32(header.ih_load);

	/* If uboot name longer than IH_NMLEN bytes, cut down it. */
	header.ih_name[IH_NMLEN - 1] = '\0';
	printf("U-image: %s, size is %d\n", header.ih_name, size);
bc0047c8:	0f002379 	jal	bc008de4 <printf>
bc0047cc:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:164

	flash_read(bl_dev, offset + sizeof(header), (unsigned char *)load, size);
bc0047d0:	02402021 	move	a0,s2
bc0047d4:	26050040 	addiu	a1,s0,64
bc0047d8:	02203021 	move	a2,s1
bc0047dc:	0f001198 	jal	bc004660 <flash_read>
bc0047e0:	02603821 	move	a3,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:187
	rsa_verify_image((void *)load, size, (void *)key);

	end = readl((void *)0xB8600004);
	printf("The process of verifing img cast %d us\n", (start > end ? (start - end) : ((0xFFFFFFFF - end) + start)) / 198);
#endif
	return load;
bc0047e4:	02201021 	move	v0,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:188
}
bc0047e8:	8fbf008c 	lw	ra,140(sp)
bc0047ec:	8fb30088 	lw	s3,136(sp)
bc0047f0:	8fb20084 	lw	s2,132(sp)
bc0047f4:	8fb10080 	lw	s1,128(sp)
bc0047f8:	8fb0007c 	lw	s0,124(sp)
bc0047fc:	03e00008 	jr	ra
bc004800:	27bd0090 	addiu	sp,sp,144

bc004804 <do_led.constprop.1>:
do_led():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:253
err:
	printf("%s failed\n", __func__);
	return 0;
}

static int do_led(int id, int cmd)
bc004804:	27bdffd8 	addiu	sp,sp,-40
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:257
{
	int i, blink_time = 10;

	sf_pad_set_func(id, GPIO_OUTPUT);
bc004808:	24050005 	li	a1,5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:253
err:
	printf("%s failed\n", __func__);
	return 0;
}

static int do_led(int id, int cmd)
bc00480c:	afb0001c 	sw	s0,28(sp)
bc004810:	00808021 	move	s0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:257
{
	int i, blink_time = 10;

	sf_pad_set_func(id, GPIO_OUTPUT);
bc004814:	24040024 	li	a0,36
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:253
err:
	printf("%s failed\n", __func__);
	return 0;
}

static int do_led(int id, int cmd)
bc004818:	afbf0024 	sw	ra,36(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:257
{
	int i, blink_time = 10;

	sf_pad_set_func(id, GPIO_OUTPUT);
bc00481c:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc004820:	afb10020 	sw	s1,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:259

	switch (cmd) {
bc004824:	24020001 	li	v0,1
bc004828:	1202000f 	beq	s0,v0,bc004868 <do_led.constprop.1+0x64>
bc00482c:	24040024 	li	a0,36
bc004830:	2a020002 	slti	v0,s0,2
bc004834:	50400005 	beqzl	v0,bc00484c <do_led.constprop.1+0x48>
bc004838:	24020002 	li	v0,2
bc00483c:	1600001d 	bnez	s0,bc0048b4 <do_led.constprop.1+0xb0>
bc004840:	00002821 	move	a1,zero
bc004844:	0b001220 	j	bc004880 <do_led.constprop.1+0x7c>
bc004848:	00000000 	nop
bc00484c:	12020008 	beq	s0,v0,bc004870 <do_led.constprop.1+0x6c>
bc004850:	00000000 	nop
bc004854:	24020003 	li	v0,3
bc004858:	1202000d 	beq	s0,v0,bc004890 <do_led.constprop.1+0x8c>
bc00485c:	2411000a 	li	s1,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:276
			do_led(id, LED_TOGGLE);
			m_delay(50);
		}
		break;
	default:
		return -EINVAL;
bc004860:	0b00122e 	j	bc0048b8 <do_led.constprop.1+0xb4>
bc004864:	2402ffea 	li	v0,-22
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:264
	switch (cmd) {
	case LED_ON:
		sf_pad_set_value(id, 0);
		break;
	case LED_OFF:
		sf_pad_set_value(id, 1);
bc004868:	0b001220 	j	bc004880 <do_led.constprop.1+0x7c>
bc00486c:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:267
		break;
	case LED_TOGGLE:
		sf_pad_set_value(id, !sf_pad_get_value(id));
bc004870:	0f0016cb 	jal	bc005b2c <sf_pad_get_value>
bc004874:	24040024 	li	a0,36
bc004878:	2c450001 	sltiu	a1,v0,1
bc00487c:	24040024 	li	a0,36
bc004880:	0f0016bf 	jal	bc005afc <sf_pad_set_value>
bc004884:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:279
		break;
	default:
		return -EINVAL;
	}

	return 0;
bc004888:	0b00122e 	j	bc0048b8 <do_led.constprop.1+0xb4>
bc00488c:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:271
	case LED_TOGGLE:
		sf_pad_set_value(id, !sf_pad_get_value(id));
		break;
	case LED_BLINK:
		for (i = 0; i < blink_time; i++) {
			do_led(id, LED_TOGGLE);
bc004890:	0f001201 	jal	bc004804 <do_led.constprop.1>
bc004894:	24040002 	li	a0,2
bc004898:	2631ffff 	addiu	s1,s1,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:272
			m_delay(50);
bc00489c:	0f00108a 	jal	bc004228 <m_delay_cpu>
bc0048a0:	24040032 	li	a0,50
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:270
		break;
	case LED_TOGGLE:
		sf_pad_set_value(id, !sf_pad_get_value(id));
		break;
	case LED_BLINK:
		for (i = 0; i < blink_time; i++) {
bc0048a4:	1620fffa 	bnez	s1,bc004890 <do_led.constprop.1+0x8c>
bc0048a8:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:280
	default:
		return -EINVAL;
	}

	return 0;
}
bc0048ac:	0b00122f 	j	bc0048bc <do_led.constprop.1+0xb8>
bc0048b0:	8fbf0024 	lw	ra,36(sp)
bc0048b4:	2402ffea 	li	v0,-22
bc0048b8:	8fbf0024 	lw	ra,36(sp)
bc0048bc:	8fb10020 	lw	s1,32(sp)
bc0048c0:	8fb0001c 	lw	s0,28(sp)
bc0048c4:	03e00008 	jr	ra
bc0048c8:	27bd0028 	addiu	sp,sp,40

bc0048cc <hang>:
hang():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:297
	return;
}

void hang(void)
{
	puts("### ERROR ### Please RESET the board ###\n");
bc0048cc:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:296

	return;
}

void hang(void)
{
bc0048d0:	27bdffe0 	addiu	sp,sp,-32
bc0048d4:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:297
	puts("### ERROR ### Please RESET the board ###\n");
bc0048d8:	0f00239b 	jal	bc008e6c <puts>
bc0048dc:	24848f80 	addiu	a0,a0,-28800
bc0048e0:	0b001238 	j	bc0048e0 <hang+0x14>
bc0048e4:	00000000 	nop

bc0048e8 <main>:
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:311
int main(int cpu_num, char **arv)
{
	unsigned int addr;
	int led_id = 36;

	if (cpu_num == 0) {
bc0048e8:	1480005a 	bnez	a0,bc004a54 <main+0x16c>
bc0048ec:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:307
 *	Main function.
 *	the cpu_num is get from start.S,and the
 *	setup should only be done by core0 vpe0.
 */
int main(int cpu_num, char **arv)
{
bc0048f0:	27bdffe0 	addiu	sp,sp,-32
bc0048f4:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:313
	unsigned int addr;
	int led_id = 36;

	if (cpu_num == 0) {
		/* clock gating, sys-manager init */
		clk_gating_init();
bc0048f8:	0f00175d 	jal	bc005d74 <clk_gating_init>
bc0048fc:	afb00018 	sw	s0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:319
#ifdef LED_ID
		led_id = LED_ID;
#endif

#ifndef MPW0
		clk_update();
bc004900:	0f00178b 	jal	bc005e2c <clk_update>
bc004904:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:321
#endif
		sys_init();
bc004908:	0f00143e 	jal	bc0050f8 <sys_init>
bc00490c:	00000000 	nop
preloader_console_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:231
	return -ENODEV;
}

static int preloader_console_init(void)
{
	return uart_init_debug_channel(UART_DEBUG_CHANNEL);
bc004910:	0f001d1e 	jal	bc007478 <uart_init_debug_channel>
bc004914:	00002021 	move	a0,zero
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:325
#endif
		sys_init();
		preloader_console_init();

		/* set led on */
		do_led(led_id, LED_ON);
bc004918:	0f001201 	jal	bc004804 <do_led.constprop.1>
bc00491c:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:327

		printf("SiFlower SFAX8 Bootloader (%s - %s)\n",
bc004920:	3c04bc01 	lui	a0,0xbc01
bc004924:	3c05bc01 	lui	a1,0xbc01
bc004928:	3c06bc01 	lui	a2,0xbc01
bc00492c:	24a58fd4 	addiu	a1,a1,-28716
bc004930:	24c68fe0 	addiu	a2,a2,-28704
bc004934:	0f002379 	jal	bc008de4 <printf>
bc004938:	24848fac 	addiu	a0,a0,-28756
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:330
							   __DATE__, __TIME__);

		ddr_init();
bc00493c:	0f0017ff 	jal	bc005ffc <ddr_init>
bc004940:	00000000 	nop
get_boot_dev():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:195
static boot_dev get_boot_dev(void)
{
	u32 devid = 0;

#ifndef SKIP_SPI_FLASH
	sf_module_set_pad_func(SF_SPI0);
bc004944:	0f0016ee 	jal	bc005bb8 <sf_module_set_pad_func>
bc004948:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:196
	devid = SPI_FLASH_GetDeviceID(0);
bc00494c:	0f001bf4 	jal	bc006fd0 <SPI_FLASH_GetDeviceID>
bc004950:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:199
#endif

	if ((devid != 0xffffff) && (devid != 0)) {
bc004954:	3c0300ff 	lui	v1,0xff
bc004958:	3463ffff 	ori	v1,v1,0xffff
bc00495c:	10430010 	beq	v0,v1,bc0049a0 <main+0xb8>
bc004960:	00000000 	nop
bc004964:	1040000e 	beqz	v0,bc0049a0 <main+0xb8>
bc004968:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:200
		if (load_image(BOOT_SPI_FLASH, 0)) {
bc00496c:	0f0011b7 	jal	bc0046dc <load_image>
bc004970:	00002821 	move	a1,zero
bc004974:	50400006 	beqzl	v0,bc004990 <main+0xa8>
bc004978:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:201
			printf("Boot from spi-nand\n");
bc00497c:	3c04bc01 	lui	a0,0xbc01
bc004980:	0f00239b 	jal	bc008e6c <puts>
bc004984:	24848fec 	addiu	a0,a0,-28692
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:202
			return BOOT_SPI_NAND;
bc004988:	0b001286 	j	bc004a18 <main+0x130>
bc00498c:	24040001 	li	a0,1
bl_load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:204
		} else {
			printf("Boot from spi-flash\n");
bc004990:	0f00239b 	jal	bc008e6c <puts>
bc004994:	24849000 	addiu	a0,a0,-28672
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:205
			return BOOT_SPI_FLASH;
bc004998:	0b001286 	j	bc004a18 <main+0x130>
bc00499c:	00002021 	move	a0,zero
bl_load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:208
		}
	} else {
		devid = (u32)mmc_initialization(1);
bc0049a0:	0f001ee8 	jal	bc007ba0 <mmc_initialization>
bc0049a4:	24040001 	li	a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:210

		if(devid == 0x1234) {
bc0049a8:	24031234 	li	v1,4660
bc0049ac:	14430005 	bne	v0,v1,bc0049c4 <main+0xdc>
bc0049b0:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:211
			printf("Boot from sd\n");
bc0049b4:	0f00239b 	jal	bc008e6c <puts>
bc0049b8:	24849014 	addiu	a0,a0,-28652
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:212
			return BOOT_SD;
bc0049bc:	0b001286 	j	bc004a18 <main+0x130>
bc0049c0:	24040004 	li	a0,4
bl_load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:214
		} else {
			sf_module_set_pad_func(SF_EMMC);
bc0049c4:	0f0016ee 	jal	bc005bb8 <sf_module_set_pad_func>
bc0049c8:	24040001 	li	a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:215
			devid = (u32)mmc_initialization(0);
bc0049cc:	0f001ee8 	jal	bc007ba0 <mmc_initialization>
bc0049d0:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:217

			if (devid == 0x4321) {
bc0049d4:	24034321 	li	v1,17185
bc0049d8:	54430006 	bnel	v0,v1,bc0049f4 <main+0x10c>
bc0049dc:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:218
				printf("Boot from emmc\n");
bc0049e0:	3c04bc01 	lui	a0,0xbc01
bc0049e4:	0f00239b 	jal	bc008e6c <puts>
bc0049e8:	24849024 	addiu	a0,a0,-28636
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:219
				return BOOT_EMMC;
bc0049ec:	0b001286 	j	bc004a18 <main+0x130>
bc0049f0:	24040003 	li	a0,3
bl_load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:221
			} else {
				printf("Error: No booting device!!!\n");
bc0049f4:	0f00239b 	jal	bc008e6c <puts>
bc0049f8:	24849034 	addiu	a0,a0,-28620
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:249
	if (addr == 0)
		goto err;

	return addr;
err:
	printf("%s failed\n", __func__);
bc0049fc:	3c04bc01 	lui	a0,0xbc01
bc004a00:	3c05bc01 	lui	a1,0xbc01
bc004a04:	24849050 	addiu	a0,a0,-28592
bc004a08:	0f002379 	jal	bc008de4 <printf>
bc004a0c:	24a5907c 	addiu	a1,a1,-28548
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:337
		sfax8_ip808_init();
#endif
		/* load uboot */
		addr = bl_load_image();
		if (addr == 0)
			hang();
bc004a10:	0f001233 	jal	bc0048cc <hang>
bc004a14:	00000000 	nop
bl_load_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:243

	bl_dev = get_boot_dev();
	if (bl_dev < 0)
		goto err;

	addr = load_image(bl_dev, 1);
bc004a18:	0f0011b7 	jal	bc0046dc <load_image>
bc004a1c:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:244
	if (addr == 0)
bc004a20:	1040fff6 	beqz	v0,bc0049fc <main+0x114>
bc004a24:	00408021 	move	s0,v0
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:339
		/* load uboot */
		addr = bl_load_image();
		if (addr == 0)
			hang();

		printf("loaded - jumping to U-Boot...\n");
bc004a28:	3c04bc01 	lui	a0,0xbc01
bc004a2c:	0f00239b 	jal	bc008e6c <puts>
bc004a30:	2484905c 	addiu	a0,a0,-28580
jump_to_image():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:290
	return;
}

static void jump_to_image(unsigned int addr)
{
	((void (*)())addr)();
bc004a34:	0200c821 	move	t9,s0
bc004a38:	0320f809 	jalr	t9
bc004a3c:	00000000 	nop
main():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/main.c:346

		jump_to_image(addr);
	}

	return 0;
}
bc004a40:	8fbf001c 	lw	ra,28(sp)
bc004a44:	8fb00018 	lw	s0,24(sp)
bc004a48:	00001021 	move	v0,zero
bc004a4c:	03e00008 	jr	ra
bc004a50:	27bd0020 	addiu	sp,sp,32
bc004a54:	03e00008 	jr	ra
bc004a58:	00001021 	move	v0,zero

bc004a5c <sys_apb_reset_i2s>:
sys_apb_reset_i2s():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:9
#include "sys_manager.h"
#include <errorno.h>

int sys_apb_reset_i2s(void)
{
	writew(0x0, IIS_SYSM_RESET);
bc004a5c:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:10
	writew(0x1, IIS_SYSM_RESET);
bc004a60:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:9
#include "sys_manager.h"
#include <errorno.h>

int sys_apb_reset_i2s(void)
{
	writew(0x0, IIS_SYSM_RESET);
bc004a64:	a4402d44 	sh	zero,11588(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:10
	writew(0x1, IIS_SYSM_RESET);
bc004a68:	a4432d44 	sh	v1,11588(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:12

	writew(0xFF, IIS_SOFT_CLK_EN);
bc004a6c:	3c02b9e2 	lui	v0,0xb9e2
bc004a70:	240300ff 	li	v1,255
bc004a74:	a4434004 	sh	v1,16388(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:14

	writew(0xFF, IIS_SOFT_RESET);
bc004a78:	a4434000 	sh	v1,16384(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:17
	writew(0x00, IIS_SOFT_RESET);

	writew(0x0F, IIS_SOFT_BOE);
bc004a7c:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:15
	writew(0x1, IIS_SYSM_RESET);

	writew(0xFF, IIS_SOFT_CLK_EN);

	writew(0xFF, IIS_SOFT_RESET);
	writew(0x00, IIS_SOFT_RESET);
bc004a80:	a4404000 	sh	zero,16384(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:17

	writew(0x0F, IIS_SOFT_BOE);
bc004a84:	a443400c 	sh	v1,16396(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:20

	return 0;
}
bc004a88:	03e00008 	jr	ra
bc004a8c:	00001021 	move	v0,zero

bc004a90 <sys_apb_reset_i2c>:
sys_apb_reset_i2c():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:24

int sys_apb_reset_i2c(void)
{
	writew(0x0, IIC_SYSM_RESET);
bc004a90:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:25
	writew(0x1, IIC_SYSM_RESET);
bc004a94:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:24
	return 0;
}

int sys_apb_reset_i2c(void)
{
	writew(0x0, IIC_SYSM_RESET);
bc004a98:	a4402d48 	sh	zero,11592(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:25
	writew(0x1, IIC_SYSM_RESET);
bc004a9c:	a4432d48 	sh	v1,11592(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:27

	writew(0xFF, IIC_SOFT_CLK_EN);
bc004aa0:	3c02b9e2 	lui	v0,0xb9e2
bc004aa4:	240300ff 	li	v1,255
bc004aa8:	a4434404 	sh	v1,17412(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:29

	writew(0xFF, IIC_SOFT_RESET);
bc004aac:	a4434400 	sh	v1,17408(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:32
	writew(0x00, IIC_SOFT_RESET);

	writew(0x0F, IIC_SOFT_BOE);
bc004ab0:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:30
	writew(0x1, IIC_SYSM_RESET);

	writew(0xFF, IIC_SOFT_CLK_EN);

	writew(0xFF, IIC_SOFT_RESET);
	writew(0x00, IIC_SOFT_RESET);
bc004ab4:	a4404400 	sh	zero,17408(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:32

	writew(0x0F, IIC_SOFT_BOE);
bc004ab8:	a443440c 	sh	v1,17420(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:35

	return 0;
}
bc004abc:	03e00008 	jr	ra
bc004ac0:	00001021 	move	v0,zero

bc004ac4 <sys_apb_reset_spi>:
sys_apb_reset_spi():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:39

int sys_apb_reset_spi(void)
{
	writew(0x0, SPI_SYSM_RESET);
bc004ac4:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:40
	writew(0x1, SPI_SYSM_RESET);
bc004ac8:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:39
	return 0;
}

int sys_apb_reset_spi(void)
{
	writew(0x0, SPI_SYSM_RESET);
bc004acc:	a4402d4c 	sh	zero,11596(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:40
	writew(0x1, SPI_SYSM_RESET);
bc004ad0:	a4432d4c 	sh	v1,11596(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:42

	writew(0xFF, SPI_SOFT_CLK_EN);
bc004ad4:	3c02b9e2 	lui	v0,0xb9e2
bc004ad8:	240300ff 	li	v1,255
bc004adc:	a4434804 	sh	v1,18436(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:44

	writew(0xFF, SPI_SOFT_RESET);
bc004ae0:	a4434800 	sh	v1,18432(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:47
	writew(0x00, SPI_SOFT_RESET);

	writew(0x0F, SPI_SOFT_BOE);
bc004ae4:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:45
	writew(0x1, SPI_SYSM_RESET);

	writew(0xFF, SPI_SOFT_CLK_EN);

	writew(0xFF, SPI_SOFT_RESET);
	writew(0x00, SPI_SOFT_RESET);
bc004ae8:	a4404800 	sh	zero,18432(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:47

	writew(0x0F, SPI_SOFT_BOE);
bc004aec:	a443480c 	sh	v1,18444(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:50

	return 0;
}
bc004af0:	03e00008 	jr	ra
bc004af4:	00001021 	move	v0,zero

bc004af8 <sys_apb_reset_uart>:
sys_apb_reset_uart():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:54

int sys_apb_reset_uart(void)
{
	writew(0x0, UART_SYSM_RESET);
bc004af8:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:55
	writew(0x1, UART_SYSM_RESET);
bc004afc:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:54
	return 0;
}

int sys_apb_reset_uart(void)
{
	writew(0x0, UART_SYSM_RESET);
bc004b00:	a4402d50 	sh	zero,11600(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:55
	writew(0x1, UART_SYSM_RESET);
bc004b04:	a4432d50 	sh	v1,11600(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:57

	writew(0xFF, UART_SOFT_CLK_EN);
bc004b08:	3c02b9e2 	lui	v0,0xb9e2
bc004b0c:	240300ff 	li	v1,255
bc004b10:	a4434c04 	sh	v1,19460(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:59

	writew(0xFF, UART_SOFT_RESET);
bc004b14:	a4434c00 	sh	v1,19456(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:62
	writew(0x00, UART_SOFT_RESET);

	writew(0x0F, UART_SOFT_BOE);
bc004b18:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:60
	writew(0x1, UART_SYSM_RESET);

	writew(0xFF, UART_SOFT_CLK_EN);

	writew(0xFF, UART_SOFT_RESET);
	writew(0x00, UART_SOFT_RESET);
bc004b1c:	a4404c00 	sh	zero,19456(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:62

	writew(0x0F, UART_SOFT_BOE);
bc004b20:	a4434c0c 	sh	v1,19468(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:65

	return 0;
}
bc004b24:	03e00008 	jr	ra
bc004b28:	00001021 	move	v0,zero

bc004b2c <sys_apb_reset_pcm>:
sys_apb_reset_pcm():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:69

int sys_apb_reset_pcm(void)
{
	writew(0x0, PCM_SYSM_RESET);
bc004b2c:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:70
	writew(0x1, PCM_SYSM_RESET);
bc004b30:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:69
	return 0;
}

int sys_apb_reset_pcm(void)
{
	writew(0x0, PCM_SYSM_RESET);
bc004b34:	a4402d54 	sh	zero,11604(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:70
	writew(0x1, PCM_SYSM_RESET);
bc004b38:	a4432d54 	sh	v1,11604(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:72

	writew(0xFF, PCM_SOFT_CLK_EN);
bc004b3c:	3c02b9e2 	lui	v0,0xb9e2
bc004b40:	240300ff 	li	v1,255
bc004b44:	a4435004 	sh	v1,20484(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:74

	writew(0xFF, PCM_SOFT_RESET);
bc004b48:	a4435000 	sh	v1,20480(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:77
	writew(0x00, PCM_SOFT_RESET);

	writew(0x0F, PCM_SOFT_BOE);
bc004b4c:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:75
	writew(0x1, PCM_SYSM_RESET);

	writew(0xFF, PCM_SOFT_CLK_EN);

	writew(0xFF, PCM_SOFT_RESET);
	writew(0x00, PCM_SOFT_RESET);
bc004b50:	a4405000 	sh	zero,20480(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:77

	writew(0x0F, PCM_SOFT_BOE);
bc004b54:	a443500c 	sh	v1,20492(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:80

	return 0;
}
bc004b58:	03e00008 	jr	ra
bc004b5c:	00001021 	move	v0,zero

bc004b60 <sys_apb_reset_pwm>:
sys_apb_reset_pwm():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:84

int sys_apb_reset_pwm(void)
{
	writew(0x0, PWM_SYSM_RESET);
bc004b60:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:85
	writew(0x1, PWM_SYSM_RESET);
bc004b64:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:84
	return 0;
}

int sys_apb_reset_pwm(void)
{
	writew(0x0, PWM_SYSM_RESET);
bc004b68:	a4402d58 	sh	zero,11608(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:85
	writew(0x1, PWM_SYSM_RESET);
bc004b6c:	a4432d58 	sh	v1,11608(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:87

	writew(0xFF, PWM_SOFT_CLK_EN);
bc004b70:	3c02b9e2 	lui	v0,0xb9e2
bc004b74:	240300ff 	li	v1,255
bc004b78:	a4435404 	sh	v1,21508(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:89

	writew(0xFF, PWM_SOFT_RESET);
bc004b7c:	a4435400 	sh	v1,21504(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:92
	writew(0x00, PWM_SOFT_RESET);

	writew(0x0F, PWM_SOFT_BOE);
bc004b80:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:90
	writew(0x1, PWM_SYSM_RESET);

	writew(0xFF, PWM_SOFT_CLK_EN);

	writew(0xFF, PWM_SOFT_RESET);
	writew(0x00, PWM_SOFT_RESET);
bc004b84:	a4405400 	sh	zero,21504(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:92

	writew(0x0F, PWM_SOFT_BOE);
bc004b88:	a443540c 	sh	v1,21516(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:95

	return 0;
}
bc004b8c:	03e00008 	jr	ra
bc004b90:	00001021 	move	v0,zero

bc004b94 <sys_apb_reset_timer>:
sys_apb_reset_timer():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:99

int sys_apb_reset_timer(void)
{
	writew(0x0, TIMER_SYSM_RESET);
bc004b94:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:100
	writew(0x1, TIMER_SYSM_RESET);
bc004b98:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:99
	return 0;
}

int sys_apb_reset_timer(void)
{
	writew(0x0, TIMER_SYSM_RESET);
bc004b9c:	a4402d5c 	sh	zero,11612(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:100
	writew(0x1, TIMER_SYSM_RESET);
bc004ba0:	a4432d5c 	sh	v1,11612(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:102

	writew(0xFF, TIMER_SOFT_CLK_EN);
bc004ba4:	3c02b9e2 	lui	v0,0xb9e2
bc004ba8:	240300ff 	li	v1,255
bc004bac:	a4435804 	sh	v1,22532(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:104

	writew(0xFF, TIMER_SOFT_RESET);
bc004bb0:	a4435800 	sh	v1,22528(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:107
	writew(0x00, TIMER_SOFT_RESET);

	writew(0x0F, TIMER_SOFT_BOE);
bc004bb4:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:105
	writew(0x1, TIMER_SYSM_RESET);

	writew(0xFF, TIMER_SOFT_CLK_EN);

	writew(0xFF, TIMER_SOFT_RESET);
	writew(0x00, TIMER_SOFT_RESET);
bc004bb8:	a4405800 	sh	zero,22528(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:107

	writew(0x0F, TIMER_SOFT_BOE);
bc004bbc:	a443580c 	sh	v1,22540(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:110

	return 0;
}
bc004bc0:	03e00008 	jr	ra
bc004bc4:	00001021 	move	v0,zero

bc004bc8 <sys_apb_reset_watchdog>:
sys_apb_reset_watchdog():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:114

int sys_apb_reset_watchdog(void)
{
	writew(0x0, WDT_SYSM_RESET);
bc004bc8:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:115
	writew(0x1, WDT_SYSM_RESET);
bc004bcc:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:114
	return 0;
}

int sys_apb_reset_watchdog(void)
{
	writew(0x0, WDT_SYSM_RESET);
bc004bd0:	a4402d60 	sh	zero,11616(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:115
	writew(0x1, WDT_SYSM_RESET);
bc004bd4:	a4432d60 	sh	v1,11616(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:117

	writew(0xFF, WDT_SOFT_CLK_EN);
bc004bd8:	3c02b9e2 	lui	v0,0xb9e2
bc004bdc:	240300ff 	li	v1,255
bc004be0:	a4435c04 	sh	v1,23556(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:119

	writew(0xFF, WDT_SOFT_RESET);
bc004be4:	a4435c00 	sh	v1,23552(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:122
	writew(0x00, WDT_SOFT_RESET);

	writew(0x0F, WDT_SOFT_BOE);
bc004be8:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:120
	writew(0x1, WDT_SYSM_RESET);

	writew(0xFF, WDT_SOFT_CLK_EN);

	writew(0xFF, WDT_SOFT_RESET);
	writew(0x00, WDT_SOFT_RESET);
bc004bec:	a4405c00 	sh	zero,23552(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:122

	writew(0x0F, WDT_SOFT_BOE);
bc004bf0:	a4435c0c 	sh	v1,23564(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:125

	return 0;
}
bc004bf4:	03e00008 	jr	ra
bc004bf8:	00001021 	move	v0,zero

bc004bfc <sys_apb_reset_spdif>:
sys_apb_reset_spdif():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:129

int sys_apb_reset_spdif(void)
{
	writew(0x0, SPDIF_SYSM_RESET);
bc004bfc:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:130
	writew(0x1, SPDIF_SYSM_RESET);
bc004c00:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:129
	return 0;
}

int sys_apb_reset_spdif(void)
{
	writew(0x0, SPDIF_SYSM_RESET);
bc004c04:	a4402d64 	sh	zero,11620(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:130
	writew(0x1, SPDIF_SYSM_RESET);
bc004c08:	a4432d64 	sh	v1,11620(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:132

	writew(0xFF, SPDIF_SOFT_CLK_EN);
bc004c0c:	3c02b9e2 	lui	v0,0xb9e2
bc004c10:	240300ff 	li	v1,255
bc004c14:	a4436004 	sh	v1,24580(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:134

	writew(0xFF, SPDIF_SOFT_RESET);
bc004c18:	a4436000 	sh	v1,24576(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:137
	writew(0x00, SPDIF_SOFT_RESET);

	writew(0x0F, SPDIF_SOFT_BOE);
bc004c1c:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:135
	writew(0x1, SPDIF_SYSM_RESET);

	writew(0xFF, SPDIF_SOFT_CLK_EN);

	writew(0xFF, SPDIF_SOFT_RESET);
	writew(0x00, SPDIF_SOFT_RESET);
bc004c20:	a4406000 	sh	zero,24576(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:137

	writew(0x0F, SPDIF_SOFT_BOE);
bc004c24:	a443600c 	sh	v1,24588(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:140

	return 0;
}
bc004c28:	03e00008 	jr	ra
bc004c2c:	00001021 	move	v0,zero

bc004c30 <sys_gpio_reset>:
sys_gpio_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:144

int sys_gpio_reset(void)
{
	writew(0x0, GPIO_SYSM_RESET);
bc004c30:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:145
	writew(0x1, GPIO_SYSM_RESET);
bc004c34:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:144
	return 0;
}

int sys_gpio_reset(void)
{
	writew(0x0, GPIO_SYSM_RESET);
bc004c38:	a4402db8 	sh	zero,11704(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:145
	writew(0x1, GPIO_SYSM_RESET);
bc004c3c:	a4432db8 	sh	v1,11704(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:147

	writew(0xFF, GPIO_SOFT_CLK_EN);
bc004c40:	3c02b9e2 	lui	v0,0xb9e2
bc004c44:	3442b404 	ori	v0,v0,0xb404
bc004c48:	240300ff 	li	v1,255
bc004c4c:	a4430000 	sh	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:149

	writew(0xFF, GPIO_SOFT_RESET);
bc004c50:	a443fffc 	sh	v1,-4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:152
	writew(0x00, GPIO_SOFT_RESET);

	writew(0x0F, GPIO_SOFT_BOE);
bc004c54:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:150
	writew(0x1, GPIO_SYSM_RESET);

	writew(0xFF, GPIO_SOFT_CLK_EN);

	writew(0xFF, GPIO_SOFT_RESET);
	writew(0x00, GPIO_SOFT_RESET);
bc004c58:	a440fffc 	sh	zero,-4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:152

	writew(0x0F, GPIO_SOFT_BOE);
bc004c5c:	a4430008 	sh	v1,8(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:155

	return 0;
}
bc004c60:	03e00008 	jr	ra
bc004c64:	00001021 	move	v0,zero

bc004c68 <sys_apb_bus_reset>:
sys_apb_bus_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:159

int sys_apb_bus_reset(void)
{
	writew(0x0, PBUS_SYSM_RESET);
bc004c68:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:160
	writew(0x1, PBUS_SYSM_RESET);
bc004c6c:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:159
	return 0;
}

int sys_apb_bus_reset(void)
{
	writew(0x0, PBUS_SYSM_RESET);
bc004c70:	a4402c38 	sh	zero,11320(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:160
	writew(0x1, PBUS_SYSM_RESET);
bc004c74:	a4432c38 	sh	v1,11320(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:163

	return 0;
}
bc004c78:	03e00008 	jr	ra
bc004c7c:	00001021 	move	v0,zero

bc004c80 <sys_apb_modules_reset>:
sys_apb_modules_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:166

int sys_apb_modules_reset(void)
{
bc004c80:	27bdffe0 	addiu	sp,sp,-32
bc004c84:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:167
	sys_apb_bus_reset();
bc004c88:	0f00131a 	jal	bc004c68 <sys_apb_bus_reset>
bc004c8c:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:168
	sys_apb_reset_i2s();
bc004c90:	0f001297 	jal	bc004a5c <sys_apb_reset_i2s>
bc004c94:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:169
	sys_apb_reset_i2c();
bc004c98:	0f0012a4 	jal	bc004a90 <sys_apb_reset_i2c>
bc004c9c:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:170
	sys_apb_reset_spi();
bc004ca0:	0f0012b1 	jal	bc004ac4 <sys_apb_reset_spi>
bc004ca4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:171
	sys_apb_reset_uart();
bc004ca8:	0f0012be 	jal	bc004af8 <sys_apb_reset_uart>
bc004cac:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:172
	sys_apb_reset_pcm();
bc004cb0:	0f0012cb 	jal	bc004b2c <sys_apb_reset_pcm>
bc004cb4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:173
	sys_apb_reset_pwm();
bc004cb8:	0f0012d8 	jal	bc004b60 <sys_apb_reset_pwm>
bc004cbc:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:174
	sys_apb_reset_timer();
bc004cc0:	0f0012e5 	jal	bc004b94 <sys_apb_reset_timer>
bc004cc4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:175
	sys_apb_reset_watchdog();
bc004cc8:	0f0012f2 	jal	bc004bc8 <sys_apb_reset_watchdog>
bc004ccc:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:176
	sys_apb_reset_spdif();
bc004cd0:	0f0012ff 	jal	bc004bfc <sys_apb_reset_spdif>
bc004cd4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:179

	return 0;
}
bc004cd8:	8fbf001c 	lw	ra,28(sp)
bc004cdc:	00001021 	move	v0,zero
bc004ce0:	03e00008 	jr	ra
bc004ce4:	27bd0020 	addiu	sp,sp,32

bc004ce8 <sys_dma_reset>:
sys_dma_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:183

int sys_dma_reset(void)
{
	writew(0x0, DMA_SYSM_RESET);
bc004ce8:	3c02b9e0 	lui	v0,0xb9e0
bc004cec:	24432c6c 	addiu	v1,v0,11372
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:184
	writew(0x1, DMA_SYSM_RESET);
bc004cf0:	24040001 	li	a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:183
	return 0;
}

int sys_dma_reset(void)
{
	writew(0x0, DMA_SYSM_RESET);
bc004cf4:	a4402c6c 	sh	zero,11372(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:184
	writew(0x1, DMA_SYSM_RESET);
bc004cf8:	a4442c6c 	sh	a0,11372(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:186

	writew(0x1, DMA_BOOT_MANAGER_NS);
bc004cfc:	24625bd4 	addiu	v0,v1,23508
bc004d00:	a4645bd4 	sh	a0,23508(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:187
	writew(0xFF, DMA_BOOT_IRQ_NS70);
bc004d04:	240300ff 	li	v1,255
bc004d08:	a4430008 	sh	v1,8(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:188
	writew(0xFF, DMA_BOOT_IRQ_NS158);
bc004d0c:	a443000c 	sh	v1,12(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:189
	writew(0xFF, DMA_BOOT_IRQ_NS2316);
bc004d10:	a4430010 	sh	v1,16(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:190
	writew(0xFF, DMA_BOOT_PERIPH_NS70);
bc004d14:	a4430014 	sh	v1,20(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:191
	writew(0xFF, DMA_BOOT_PERIPH_NS158);
bc004d18:	a4430018 	sh	v1,24(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:192
	writew(0xFF, DMA_BOOT_PERIPH_NS2316);
bc004d1c:	a443001c 	sh	v1,28(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:194

	writew(0xFF, DMA_SOFT_CLK_EN);
bc004d20:	a443ffc4 	sh	v1,-60(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:196

	writew(0xFF, DMA_SOFT_RESET);
bc004d24:	a443ffc0 	sh	v1,-64(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:199
	writew(0x00, DMA_SOFT_RESET);

	writew(0x0F, DMA_SOFT_BOE);
bc004d28:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:197
	writew(0xFF, DMA_BOOT_PERIPH_NS2316);

	writew(0xFF, DMA_SOFT_CLK_EN);

	writew(0xFF, DMA_SOFT_RESET);
	writew(0x00, DMA_SOFT_RESET);
bc004d2c:	a440ffc0 	sh	zero,-64(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:199

	writew(0x0F, DMA_SOFT_BOE);
bc004d30:	a443ffcc 	sh	v1,-52(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:202

	return 0;
}
bc004d34:	03e00008 	jr	ra
bc004d38:	00001021 	move	v0,zero

bc004d3c <sys_module_select>:
sys_module_select():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:211
	gdu,
};

void sys_module_select(enum bus_sel module)
{
	u32 tmp = readl(SYS_MISC_CTRL);
bc004d3c:	3c02b9e0 	lui	v0,0xb9e0
bc004d40:	8c42202c 	lw	v0,8236(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:213

	switch (module) {
bc004d44:	10800004 	beqz	a0,bc004d58 <sys_module_select+0x1c>
bc004d48:	34430004 	ori	v1,v0,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:215
	case gdu:
		tmp |= 1 << 2;
bc004d4c:	38840001 	xori	a0,a0,0x1
bc004d50:	0b001358 	j	bc004d60 <sys_module_select+0x24>
bc004d54:	0064100a 	movz	v0,v1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:218
		break;
	case gmac:
		tmp &= ~(1 << 2);
bc004d58:	2403fffb 	li	v1,-5
bc004d5c:	00431024 	and	v0,v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:223
		break;
	default:
		break;
	}
	writel(tmp, SYS_MISC_CTRL);
bc004d60:	3c03b9e0 	lui	v1,0xb9e0
bc004d64:	ac62202c 	sw	v0,8236(v1)
bc004d68:	03e00008 	jr	ra
bc004d6c:	00000000 	nop

bc004d70 <sys_gmac_reset>:
sys_gmac_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:238
#define GMAC_PHY_INTF_SEL_REVMII   0x7
#define GMAC_PHY_INTF_SEL_MASK     0x7
#define CLK_RMII_OEN		(1 << 5)

int sys_gmac_reset(void)
{
bc004d70:	27bdffe0 	addiu	sp,sp,-32
bc004d74:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:239
	sys_module_select(gmac);
bc004d78:	0f00134f 	jal	bc004d3c <sys_module_select>
bc004d7c:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:241

	writew(0x0, EMAC_SYSM_RESETN);
bc004d80:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:242
	writew(0x1, EMAC_SYSM_RESETN);
bc004d84:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:241

int sys_gmac_reset(void)
{
	sys_module_select(gmac);

	writew(0x0, EMAC_SYSM_RESETN);
bc004d88:	a4402c48 	sh	zero,11336(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:242
	writew(0x1, EMAC_SYSM_RESETN);
bc004d8c:	a4432c48 	sh	v1,11336(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:244

	writew(0xFF, EMAC_SOFT_CLKGATE_EN);
bc004d90:	240300ff 	li	v1,255
bc004d94:	a4434404 	sh	v1,17412(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:246

	writew(0xFF, EMAC_SOFT_RESET);
bc004d98:	a4434400 	sh	v1,17408(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:267
	writew(0x30, EMAC_CLK_TX_I_DLY);
	writew(0x40, EMAC_CLK_PHY_RX_I_DLY);
	writew(0x1, EMAC_CLK_PHY_RX_I_DLY_EN);
#endif
	writew(0x00, EMAC_SOFT_RESET);
	writew(0x0F, EMAC_SOFT_BOE);
bc004d9c:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:266
	// x(1 <= x <= 256) means to delay (x * 0.04)ns
	writew(0x30, EMAC_CLK_TX_I_DLY);
	writew(0x40, EMAC_CLK_PHY_RX_I_DLY);
	writew(0x1, EMAC_CLK_PHY_RX_I_DLY_EN);
#endif
	writew(0x00, EMAC_SOFT_RESET);
bc004da0:	a4404400 	sh	zero,17408(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:267
	writew(0x0F, EMAC_SOFT_BOE);
bc004da4:	a443440c 	sh	v1,17420(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:270

	return 0;
}
bc004da8:	8fbf001c 	lw	ra,28(sp)
bc004dac:	00001021 	move	v0,zero
bc004db0:	03e00008 	jr	ra
bc004db4:	27bd0020 	addiu	sp,sp,32

bc004db8 <sys_usb_reset>:
sys_usb_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:274

int sys_usb_reset(void)
{
	writew(0x0, USB_SYSM_RESET);
bc004db8:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:275
	writew(0x1, USB_SYSM_RESET);
bc004dbc:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:274
	return 0;
}

int sys_usb_reset(void)
{
	writew(0x0, USB_SYSM_RESET);
bc004dc0:	a4402c84 	sh	zero,11396(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:275
	writew(0x1, USB_SYSM_RESET);
bc004dc4:	a4432c84 	sh	v1,11396(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:277

	writew(0xFF, USB_SOFT_CLK_EN);
bc004dc8:	3442c004 	ori	v0,v0,0xc004
bc004dcc:	240300ff 	li	v1,255
bc004dd0:	a4430000 	sh	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:279

	writew(0xFF, USB_SOFT_RESET);
bc004dd4:	a443fffc 	sh	v1,-4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:282
	writew(0x00, USB_SOFT_RESET);

	writew(0x0F, USB_SOFT_BOE);
bc004dd8:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:280
	writew(0x1, USB_SYSM_RESET);

	writew(0xFF, USB_SOFT_CLK_EN);

	writew(0xFF, USB_SOFT_RESET);
	writew(0x00, USB_SOFT_RESET);
bc004ddc:	a440fffc 	sh	zero,-4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:282

	writew(0x0F, USB_SOFT_BOE);
bc004de0:	a4430008 	sh	v1,8(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:285

	return 0;
}
bc004de4:	03e00008 	jr	ra
bc004de8:	00001021 	move	v0,zero

bc004dec <sys_emmc_reset>:
sys_emmc_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:289

int sys_emmc_reset(void)
{
	writew(0x0, EMMC_SYSM_RESET);
bc004dec:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:290
	writew(0x1, EMMC_SYSM_RESET);
bc004df0:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:289
	return 0;
}

int sys_emmc_reset(void)
{
	writew(0x0, EMMC_SYSM_RESET);
bc004df4:	a4402c88 	sh	zero,11400(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:290
	writew(0x1, EMMC_SYSM_RESET);
bc004df8:	a4432c88 	sh	v1,11400(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:292

	writew(0xFF, EMMC_SOFT_CLK_EN);
bc004dfc:	3442c404 	ori	v0,v0,0xc404
bc004e00:	240300ff 	li	v1,255
bc004e04:	a4430000 	sh	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:294

	writew(0xFF, EMMC_SOFT_RESET);
bc004e08:	a443fffc 	sh	v1,-4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:297
	writew(0x00, EMMC_SOFT_RESET);

	writew(0x0F, EMMC_SOFT_BOE);
bc004e0c:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:295
	writew(0x1, EMMC_SYSM_RESET);

	writew(0xFF, EMMC_SOFT_CLK_EN);

	writew(0xFF, EMMC_SOFT_RESET);
	writew(0x00, EMMC_SOFT_RESET);
bc004e10:	a440fffc 	sh	zero,-4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:297

	writew(0x0F, EMMC_SOFT_BOE);
bc004e14:	a4430008 	sh	v1,8(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:300

	return 0;
}
bc004e18:	03e00008 	jr	ra
bc004e1c:	00001021 	move	v0,zero

bc004e20 <sys_sdio_reset>:
sys_sdio_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:304

int sys_sdio_reset(void)
{
	writew(0x0, SDIO_SYSM_RESET);
bc004e20:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:305
	writew(0x1, SDIO_SYSM_RESET);
bc004e24:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:304
	return 0;
}

int sys_sdio_reset(void)
{
	writew(0x0, SDIO_SYSM_RESET);
bc004e28:	a4402c8c 	sh	zero,11404(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:305
	writew(0x1, SDIO_SYSM_RESET);
bc004e2c:	a4432c8c 	sh	v1,11404(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:307

	writew(0xFF, SDIO_SOFT_CLK_EN);
bc004e30:	3442c804 	ori	v0,v0,0xc804
bc004e34:	240300ff 	li	v1,255
bc004e38:	a4430000 	sh	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:309

	writew(0xFF, SDIO_SOFT_RESET);
bc004e3c:	a443fffc 	sh	v1,-4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:312
	writew(0x00, SDIO_SOFT_RESET);

	writew(0x0F, SDIO_SOFT_BOE);
bc004e40:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:310
	writew(0x1, SDIO_SYSM_RESET);

	writew(0xFF, SDIO_SOFT_CLK_EN);

	writew(0xFF, SDIO_SOFT_RESET);
	writew(0x00, SDIO_SOFT_RESET);
bc004e44:	a440fffc 	sh	zero,-4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:312

	writew(0x0F, SDIO_SOFT_BOE);
bc004e48:	a4430008 	sh	v1,8(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:316
#ifdef MPW0
	writew(0xFF, SDIO_SW_MSC_REG);
#else
	writew(0, SDIO_SW_MSC_REG);
bc004e4c:	3c02b9e3 	lui	v0,0xb9e3
bc004e50:	3442ffe4 	ori	v0,v0,0xffe4
bc004e54:	a4400000 	sh	zero,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:319
#endif
	return 0;
}
bc004e58:	03e00008 	jr	ra
bc004e5c:	00001021 	move	v0,zero

bc004e60 <sys_crypto_reset>:
sys_crypto_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:340
	return 0;
}

int sys_crypto_reset(void)
{
	writew(0x0, CRYPTO_SYSM_RESET);
bc004e60:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:341
	writew(0x1, CRYPTO_SYSM_RESET);
bc004e64:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:340
	return 0;
}

int sys_crypto_reset(void)
{
	writew(0x0, CRYPTO_SYSM_RESET);
bc004e68:	a4402c50 	sh	zero,11344(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:341
	writew(0x1, CRYPTO_SYSM_RESET);
bc004e6c:	a4432c50 	sh	v1,11344(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:343

	writew(0xFF, CRYPTO_SOFT_CLK_EN);
bc004e70:	240300ff 	li	v1,255
bc004e74:	a4434c04 	sh	v1,19460(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:345

	writew(0xFF, CRYPTO_SOFT_RESET);
bc004e78:	a4434c00 	sh	v1,19456(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:348
	writew(0x00, CRYPTO_SOFT_RESET);

	writew(0x0F, CRYPTO_SOFT_BOE);
bc004e7c:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:346
	writew(0x1, CRYPTO_SYSM_RESET);

	writew(0xFF, CRYPTO_SOFT_CLK_EN);

	writew(0xFF, CRYPTO_SOFT_RESET);
	writew(0x00, CRYPTO_SOFT_RESET);
bc004e80:	a4404c00 	sh	zero,19456(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:348

	writew(0x0F, CRYPTO_SOFT_BOE);
bc004e84:	a4434c08 	sh	v1,19464(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:351

	return 0;
}
bc004e88:	03e00008 	jr	ra
bc004e8c:	00001021 	move	v0,zero

bc004e90 <sys_wifi_1_reset>:
sys_wifi_1_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:371
	return 0;
}

int sys_wifi_1_reset(void)
{
	writew(0x0, WIFI_1_SYSM_RESET);
bc004e90:	3c03b9e0 	lui	v1,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:372
	writew(0x1, WIFI_1_SYSM_RESET);
bc004e94:	24040001 	li	a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:371
	return 0;
}

int sys_wifi_1_reset(void)
{
	writew(0x0, WIFI_1_SYSM_RESET);
bc004e98:	24622c64 	addiu	v0,v1,11364
bc004e9c:	a4602c64 	sh	zero,11364(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:372
	writew(0x1, WIFI_1_SYSM_RESET);
bc004ea0:	a4642c64 	sh	a0,11364(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:374

	writew(0xFF, WIFI_1_SOFT_CLK_EN);
bc004ea4:	240300ff 	li	v1,255
bc004ea8:	a44353a0 	sh	v1,21408(v0)
bc004eac:	244453a0 	addiu	a0,v0,21408
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:376

	writew(0xFF, WIFI_1_SOFT_RESET);
bc004eb0:	a443539c 	sh	v1,21404(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:377
	writew(0x00, WIFI_1_SOFT_RESET);
bc004eb4:	a440539c 	sh	zero,21404(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:379

	writew(0x0F, WIFI_1_SOFT_BOE);
bc004eb8:	2402000f 	li	v0,15
bc004ebc:	a4820008 	sh	v0,8(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:382

	return 0;
}
bc004ec0:	03e00008 	jr	ra
bc004ec4:	00001021 	move	v0,zero

bc004ec8 <sys_wifi_2_reset>:
sys_wifi_2_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:386

int sys_wifi_2_reset(void)
{
	writew(0x0, WIFI_2_SYSM_RESET);
bc004ec8:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:387
	writew(0x1, WIFI_2_SYSM_RESET);
bc004ecc:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:386
	return 0;
}

int sys_wifi_2_reset(void)
{
	writew(0x0, WIFI_2_SYSM_RESET);
bc004ed0:	a4402c68 	sh	zero,11368(v0)
bc004ed4:	24442c68 	addiu	a0,v0,11368
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:387
	writew(0x1, WIFI_2_SYSM_RESET);
bc004ed8:	a4432c68 	sh	v1,11368(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:389

	writew(0xFF, WIFI_2_SOFT_CLK_EN);
bc004edc:	240300ff 	li	v1,255
bc004ee0:	a483579c 	sh	v1,22428(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:391

	writew(0xFF, WIFI_2_SOFT_RESET);
bc004ee4:	a4835798 	sh	v1,22424(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:394
	writew(0x00, WIFI_2_SOFT_RESET);

	writew(0x0F, WIFI_2_SOFT_BOE);
bc004ee8:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:392
	writew(0x1, WIFI_2_SYSM_RESET);

	writew(0xFF, WIFI_2_SOFT_CLK_EN);

	writew(0xFF, WIFI_2_SOFT_RESET);
	writew(0x00, WIFI_2_SOFT_RESET);
bc004eec:	a4805798 	sh	zero,22424(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:397

	writew(0x0F, WIFI_2_SOFT_BOE);

	return 0;
}
bc004ef0:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:394
	writew(0xFF, WIFI_2_SOFT_CLK_EN);

	writew(0xFF, WIFI_2_SOFT_RESET);
	writew(0x00, WIFI_2_SOFT_RESET);

	writew(0x0F, WIFI_2_SOFT_BOE);
bc004ef4:	a48357a4 	sh	v1,22436(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:397

	return 0;
}
bc004ef8:	03e00008 	jr	ra
bc004efc:	00000000 	nop

bc004f00 <sys_catip_reset>:
sys_catip_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:401

int sys_catip_reset(void)
{
	writew(0x0, CATIP_SYSM_RESET);
bc004f00:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:402
	writew(0x1, CATIP_SYSM_RESET);
bc004f04:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:401
	return 0;
}

int sys_catip_reset(void)
{
	writew(0x0, CATIP_SYSM_RESET);
bc004f08:	a4402c70 	sh	zero,11376(v0)
bc004f0c:	24442c70 	addiu	a0,v0,11376
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:402
	writew(0x1, CATIP_SYSM_RESET);
bc004f10:	a4432c70 	sh	v1,11376(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:404

	writew(0xFF, CATIP_SOFT_CLK_EN);
bc004f14:	240300ff 	li	v1,255
bc004f18:	a4835f94 	sh	v1,24468(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:406

	writew(0xFF, CATIP_SOFT_RESET);
bc004f1c:	a4835f90 	sh	v1,24464(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:409
	writew(0x00, CATIP_SOFT_RESET);

	writew(0x0F, CATIP_SOFT_BOE);
bc004f20:	2403000f 	li	v1,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:407
	writew(0x1, CATIP_SYSM_RESET);

	writew(0xFF, CATIP_SOFT_CLK_EN);

	writew(0xFF, CATIP_SOFT_RESET);
	writew(0x00, CATIP_SOFT_RESET);
bc004f24:	a4805f90 	sh	zero,24464(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:417
	//disable the main clk output debug enable
	writel(0x0, (void*)CATIP_MAIN_CLK_DEBUG_EN);
#endif

	return 0;
}
bc004f28:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:409
	writew(0xFF, CATIP_SOFT_CLK_EN);

	writew(0xFF, CATIP_SOFT_RESET);
	writew(0x00, CATIP_SOFT_RESET);

	writew(0x0F, CATIP_SOFT_BOE);
bc004f2c:	a4835f9c 	sh	v1,24476(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:413

#ifndef MPW0
	//disable the main clk output debug enable
	writel(0x0, (void*)CATIP_MAIN_CLK_DEBUG_EN);
bc004f30:	ac806010 	sw	zero,24592(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:417
#endif

	return 0;
}
bc004f34:	03e00008 	jr	ra
bc004f38:	00000000 	nop

bc004f3c <sys_wifi_reset>:
sys_wifi_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:420

int sys_wifi_reset(void)
{
bc004f3c:	27bdffe0 	addiu	sp,sp,-32
bc004f40:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:422
	sys_wifi_scdma_reset();
	sys_wifi_1_reset();
bc004f44:	0f0013a4 	jal	bc004e90 <sys_wifi_1_reset>
bc004f48:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:423
	sys_wifi_2_reset();
bc004f4c:	0f0013b2 	jal	bc004ec8 <sys_wifi_2_reset>
bc004f50:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:424
	sys_catip_reset();
bc004f54:	0f0013c0 	jal	bc004f00 <sys_catip_reset>
bc004f58:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:427

	return 0;
}
bc004f5c:	8fbf001c 	lw	ra,28(sp)
bc004f60:	00001021 	move	v0,zero
bc004f64:	03e00008 	jr	ra
bc004f68:	27bd0020 	addiu	sp,sp,32

bc004f6c <memory_soft_reset>:
memory_soft_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:432

int memory_soft_reset(void)
{
	/* reset ddr reg, bit 1 */
	writew(0x1, PBUS_RESET);
bc004f6c:	3c02b9e0 	lui	v0,0xb9e0
bc004f70:	24030001 	li	v1,1
bc004f74:	a4432dc4 	sh	v1,11716(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:434
	/* reset bus cpu to ddr, bit 1 */
	writew(0x1, CPU_RESET);
bc004f78:	a4432dcc 	sh	v1,11724(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:436
	/* reset memory */
	writew(0x0, MEM_RESET);
bc004f7c:	a4402dc8 	sh	zero,11720(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:437
	writew(0x1, MEM_RESET);
bc004f80:	a4432dc8 	sh	v1,11720(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:438
	writew(0x3, CPU_RESET);
bc004f84:	24030003 	li	v1,3
bc004f88:	a4432dcc 	sh	v1,11724(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:439
	writew(0x3, PBUS_RESET);
bc004f8c:	a4432dc4 	sh	v1,11716(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:442

	return 0;
}
bc004f90:	03e00008 	jr	ra
bc004f94:	00001021 	move	v0,zero

bc004f98 <bus_soft_reset>:
bus_soft_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:452
*    This part is used to reset bus.                                                           *
*                                                                                                 *
***************************************************************************************************/
int bus_soft_reset(void)
{
	writew(0x0, BUS1_RESET);
bc004f98:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:453
	writew(0x1, BUS1_RESET);
bc004f9c:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:452
*    This part is used to reset bus.                                                           *
*                                                                                                 *
***************************************************************************************************/
int bus_soft_reset(void)
{
	writew(0x0, BUS1_RESET);
bc004fa0:	a4402dd0 	sh	zero,11728(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:453
	writew(0x1, BUS1_RESET);
bc004fa4:	a4432dd0 	sh	v1,11728(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:455

	writew(0x0, BUS2_RESET);
bc004fa8:	a4402dd4 	sh	zero,11732(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:456
	writew(0x1, BUS2_RESET);
bc004fac:	a4432dd4 	sh	v1,11732(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:458

	writew(0x0, BUS3_RESET);
bc004fb0:	a4402dd8 	sh	zero,11736(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:459
	writew(0x1, BUS3_RESET);
bc004fb4:	a4432dd8 	sh	v1,11736(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:462

	return 0;
}
bc004fb8:	03e00008 	jr	ra
bc004fbc:	00001021 	move	v0,zero

bc004fc0 <io_soft_reset>:
io_soft_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:466

int io_soft_reset(void)
{
	writew(0x0, IO_SYSM_RESET);
bc004fc0:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:467
	writew(0x1, IO_SYSM_RESET);
bc004fc4:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:466
	return 0;
}

int io_soft_reset(void)
{
	writew(0x0, IO_SYSM_RESET);
bc004fc8:	a4402df4 	sh	zero,11764(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:467
	writew(0x1, IO_SYSM_RESET);
bc004fcc:	a4432df4 	sh	v1,11764(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:470

	return 0;
}
bc004fd0:	03e00008 	jr	ra
bc004fd4:	00001021 	move	v0,zero

bc004fd8 <sys_omini_phy_reset>:
sys_omini_phy_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:508
	/*
	 * emac2_cfg_np_msg_code[2:0]
	 * emac[5-1]_cfg_power_down[4:0]
	 * Default value of True power down bit (Reg24.0)
	 */
	writeb(0x0, OMINI_PHY_CFG_POWERDOWN);
bc004fd8:	3c02b9e0 	lui	v0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:527
	 *	111 All capable, Full Duplex, 10 & 100 BT,
	 *	Auto negotiation enabled AutoMDIX enable --0xE0
	 * emac1_cfg_mode[2:0]
	 *	011 100Base-TX, Full Duplex, Auto-negotiation disabled --0x60
	 */
	writeb(OMINI_PHY1_ADDR | OMINI_PHY_CFG_MODE, OMINI_PHY1_CFG_ADDR);
bc004fdc:	2403fff0 	li	v1,-16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:508
	/*
	 * emac2_cfg_np_msg_code[2:0]
	 * emac[5-1]_cfg_power_down[4:0]
	 * Default value of True power down bit (Reg24.0)
	 */
	writeb(0x0, OMINI_PHY_CFG_POWERDOWN);
bc004fe0:	a0404044 	sb	zero,16452(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:515
	/*
	 * emac3_cfg_np_msg_code[2:0]
	 * emac[5-1]_cfg_powerup_reset[4:0]
	 * Power Up Reset bit(Reg24.1)
	 */
	writeb(0x0, OMINI_PHY_CFG_POWERUP_RESET);
bc004fe4:	a0404048 	sb	zero,16456(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:527
	 *	111 All capable, Full Duplex, 10 & 100 BT,
	 *	Auto negotiation enabled AutoMDIX enable --0xE0
	 * emac1_cfg_mode[2:0]
	 *	011 100Base-TX, Full Duplex, Auto-negotiation disabled --0x60
	 */
	writeb(OMINI_PHY1_ADDR | OMINI_PHY_CFG_MODE, OMINI_PHY1_CFG_ADDR);
bc004fe8:	a043404c 	sb	v1,16460(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:528
	writeb(OMINI_PHY2_ADDR | OMINI_PHY_CFG_MODE, OMINI_PHY2_CFG_ADDR);
bc004fec:	2403fff1 	li	v1,-15
bc004ff0:	a0434050 	sb	v1,16464(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:529
	writeb(OMINI_PHY3_ADDR | OMINI_PHY_CFG_MODE, OMINI_PHY3_CFG_ADDR);
bc004ff4:	2403fff2 	li	v1,-14
bc004ff8:	a0434054 	sb	v1,16468(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:530
	writeb(OMINI_PHY4_ADDR | OMINI_PHY_CFG_MODE, OMINI_PHY4_CFG_ADDR);
bc004ffc:	2403fff3 	li	v1,-13
bc005000:	a0434058 	sb	v1,16472(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:531
	writeb(OMINI_PHY5_ADDR | OMINI_PHY_CFG_MODE, OMINI_PHY5_CFG_ADDR);
bc005004:	2403fff4 	li	v1,-12
bc005008:	a043405c 	sb	v1,16476(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:532
	writeb(0x80, OMINI_PHY1_CFG_FX_PLL_MODE);
bc00500c:	2403ff80 	li	v1,-128
bc005010:	a0434060 	sb	v1,16480(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:533
	writeb(0x80, OMINI_PHY2_CFG_FX_PLL_MODE);
bc005014:	a0434064 	sb	v1,16484(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:534
	writeb(0x80, OMINI_PHY3_CFG_FX_PLL_MODE);
bc005018:	a0434068 	sb	v1,16488(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:535
	writeb(0x80, OMINI_PHY4_CFG_FX_PLL_MODE);
bc00501c:	a043406c 	sb	v1,16492(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:536
	writeb(0x80, OMINI_PHY5_CFG_FX_PLL_MODE);
bc005020:	a0434070 	sb	v1,16496(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:552
	 * emac[5-1]_cfg_ref_clk_sel(NA now)
	 */
	writeb(0x00, OMINI_PHY_CFG_CLK_REF_SEL);

	/* mac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_1 & 0xFF, OMINI_PHY1_CFG_PHY_ID_LOW8);
bc005024:	2403001f 	li	v1,31
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:543
	/*
	 * emac4_cfg_np_msg_code[2:0]
	 * emac[5-1]_cfg_clk_freq
	 * ‘0’ for 25 MHz clock input; ‘1’ for 50 MHz clock input.
	 */
	writeb(0x00, OMINI_PHY_CFG_CLK_FREQ);
bc005028:	a0404074 	sb	zero,16500(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:558

	/* mac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_1 & 0xFF00) >> 8), OMINI_PHY1_CFG_PHY_ID_HIGH8);

	/* {emac1_cfg_model_nr[1:0],emac1_cfg_phy_id[21:16]} */
	writeb(((OMINI_PHY_ID_1 & 0x3F0000) >> 16) |
bc00502c:	2404ffcf 	li	a0,-49
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:549

	/*
	 * emac5_cfg_np_msg_code[2:0]
	 * emac[5-1]_cfg_ref_clk_sel(NA now)
	 */
	writeb(0x00, OMINI_PHY_CFG_CLK_REF_SEL);
bc005030:	a0404078 	sb	zero,16504(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:567
	writeb((OMINI_PHY_REV_NUMBER << 4) |
		((OMINI_PHY_MODEL_NUMBER & 0x3C) >> 2), OMINI_PHY1_CFG_REV_NR);


	/* emac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_2 & 0xFF, OMINI_PHY2_CFG_PHY_ID_LOW8);
bc005034:	2405002f 	li	a1,47
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:552
	 * emac[5-1]_cfg_ref_clk_sel(NA now)
	 */
	writeb(0x00, OMINI_PHY_CFG_CLK_REF_SEL);

	/* mac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_1 & 0xFF, OMINI_PHY1_CFG_PHY_ID_LOW8);
bc005038:	a043407c 	sb	v1,16508(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:555

	/* mac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_1 & 0xFF00) >> 8), OMINI_PHY1_CFG_PHY_ID_HIGH8);
bc00503c:	a0434080 	sb	v1,16512(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:562
	/* {emac1_cfg_model_nr[1:0],emac1_cfg_phy_id[21:16]} */
	writeb(((OMINI_PHY_ID_1 & 0x3F0000) >> 16) |
	       ((OMINI_PHY_MODEL_NUMBER & 0x3) << 6), OMINI_PHY1_CFG_MODEL_NR);

	/* {emac1_cfg_rev_nr[3:0],emac1_cfg_model_nr[5:2]} */
	writeb((OMINI_PHY_REV_NUMBER << 4) |
bc005040:	24030017 	li	v1,23
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:558

	/* mac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_1 & 0xFF00) >> 8), OMINI_PHY1_CFG_PHY_ID_HIGH8);

	/* {emac1_cfg_model_nr[1:0],emac1_cfg_phy_id[21:16]} */
	writeb(((OMINI_PHY_ID_1 & 0x3F0000) >> 16) |
bc005044:	a0444084 	sb	a0,16516(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:562
	       ((OMINI_PHY_MODEL_NUMBER & 0x3) << 6), OMINI_PHY1_CFG_MODEL_NR);

	/* {emac1_cfg_rev_nr[3:0],emac1_cfg_model_nr[5:2]} */
	writeb((OMINI_PHY_REV_NUMBER << 4) |
bc005048:	a0434088 	sb	v1,16520(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:567
		((OMINI_PHY_MODEL_NUMBER & 0x3C) >> 2), OMINI_PHY1_CFG_REV_NR);


	/* emac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_2 & 0xFF, OMINI_PHY2_CFG_PHY_ID_LOW8);
bc00504c:	a045408c 	sb	a1,16524(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:570

	/* emac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_2 & 0xFF00) >> 8), OMINI_PHY2_CFG_PHY_ID_HIGH8);
bc005050:	a0454090 	sb	a1,16528(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:582
	writeb((OMINI_PHY_REV_NUMBER << 4) |
		((OMINI_PHY_MODEL_NUMBER & 0x3C) >> 2), OMINI_PHY2_CFG_REV_NR);


	/* emac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_3 & 0xFF, OMINI_PHY3_CFG_PHY_ID_LOW8);
bc005054:	2405003f 	li	a1,63
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:573

	/* emac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_2 & 0xFF00) >> 8), OMINI_PHY2_CFG_PHY_ID_HIGH8);

	/* {emac1_cfg_model_nr[1:0],emac1_cfg_phy_id[21:16]} */
	writeb(((OMINI_PHY_ID_2 & 0x3F0000) >> 16) |
bc005058:	a0444094 	sb	a0,16532(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:599

	/* emac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_4 & 0xFF, OMINI_PHY4_CFG_PHY_ID_LOW8);

	/* emac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_4 & 0xFF00) >> 8), OMINI_PHY4_CFG_PHY_ID_HIGH8);
bc00505c:	2406004f 	li	a2,79
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:577
	/* {emac1_cfg_model_nr[1:0],emac1_cfg_phy_id[21:16]} */
	writeb(((OMINI_PHY_ID_2 & 0x3F0000) >> 16) |
	       ((OMINI_PHY_MODEL_NUMBER & 0x3) << 6), OMINI_PHY2_CFG_MODEL_NR);

	/* {emac1_cfg_rev_nr[3:0],emac1_cfg_model_nr[5:2]} */
	writeb((OMINI_PHY_REV_NUMBER << 4) |
bc005060:	a0434098 	sb	v1,16536(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:582
		((OMINI_PHY_MODEL_NUMBER & 0x3C) >> 2), OMINI_PHY2_CFG_REV_NR);


	/* emac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_3 & 0xFF, OMINI_PHY3_CFG_PHY_ID_LOW8);
bc005064:	a045409c 	sb	a1,16540(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:585

	/* emac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_3 & 0xFF00) >> 8), OMINI_PHY3_CFG_PHY_ID_HIGH8);
bc005068:	a04540a0 	sb	a1,16544(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:596
	/* {emac1_cfg_rev_nr[3:0],emac1_cfg_model_nr[5:2]} */
	writeb((OMINI_PHY_REV_NUMBER << 4) |
		((OMINI_PHY_MODEL_NUMBER & 0x3C) >> 2), OMINI_PHY3_CFG_REV_NR);

	/* emac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_4 & 0xFF, OMINI_PHY4_CFG_PHY_ID_LOW8);
bc00506c:	2405005f 	li	a1,95
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:588

	/* emac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_3 & 0xFF00) >> 8), OMINI_PHY3_CFG_PHY_ID_HIGH8);

	/* {emac1_cfg_model_nr[1:0],emac1_cfg_phy_id[21:16]} */
	writeb(((OMINI_PHY_ID_3 & 0x3F0000) >> 16) |
bc005070:	a04440a4 	sb	a0,16548(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:592
	       ((OMINI_PHY_MODEL_NUMBER & 0x3) << 6), OMINI_PHY3_CFG_MODEL_NR);

	/* {emac1_cfg_rev_nr[3:0],emac1_cfg_model_nr[5:2]} */
	writeb((OMINI_PHY_REV_NUMBER << 4) |
bc005074:	a04340a8 	sb	v1,16552(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:596
		((OMINI_PHY_MODEL_NUMBER & 0x3C) >> 2), OMINI_PHY3_CFG_REV_NR);

	/* emac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_4 & 0xFF, OMINI_PHY4_CFG_PHY_ID_LOW8);
bc005078:	a04540ac 	sb	a1,16556(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:599

	/* emac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_4 & 0xFF00) >> 8), OMINI_PHY4_CFG_PHY_ID_HIGH8);
bc00507c:	a04640b0 	sb	a2,16560(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:602

	/* {emac1_cfg_model_nr[1:0],emac1_cfg_phy_id[21:16]} */
	writeb(((OMINI_PHY_ID_4 & 0x3F0000) >> 16) |
bc005080:	a04440b4 	sb	a0,16564(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:606
	       ((OMINI_PHY_MODEL_NUMBER & 0x3) << 6), OMINI_PHY4_CFG_MODEL_NR);

	/* {emac1_cfg_rev_nr[3:0],emac1_cfg_model_nr[5:2]} */
	writeb((OMINI_PHY_REV_NUMBER << 4) |
bc005084:	a04340b8 	sb	v1,16568(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:610
		((OMINI_PHY_MODEL_NUMBER & 0x3C) >> 2), OMINI_PHY4_CFG_REV_NR);

	/* emac1_cfg_phy_id[7:0] */
	writeb(OMINI_PHY_ID_5 & 0xFF, OMINI_PHY5_CFG_PHY_ID_LOW8);
bc005088:	a04540bc 	sb	a1,16572(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:613

	/* emac1_cfg_phy_id[15:8] */
	writeb(((OMINI_PHY_ID_5 & 0xFF00) >> 8), OMINI_PHY5_CFG_PHY_ID_HIGH8);
bc00508c:	a04540c0 	sb	a1,16576(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:616

	/* {emac1_cfg_model_nr[1:0],emac1_cfg_phy_id[21:16]} */
	writeb(((OMINI_PHY_ID_5 & 0x3F0000) >> 16) |
bc005090:	a04440c4 	sb	a0,16580(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:620
	       ((OMINI_PHY_MODEL_NUMBER & 0x3) << 6), OMINI_PHY5_CFG_MODEL_NR);

	/* {emac1_cfg_rev_nr[3:0],emac1_cfg_model_nr[5:2]} */
	writeb((OMINI_PHY_REV_NUMBER << 4) |
bc005094:	a04340c8 	sb	v1,16584(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:624
		((OMINI_PHY_MODEL_NUMBER & 0x3C) >> 2), OMINI_PHY5_CFG_REV_NR);

	return 0;
}
bc005098:	03e00008 	jr	ra
bc00509c:	00001021 	move	v0,zero

bc0050a0 <sys_npu_reset>:
sys_npu_reset():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:628


int sys_npu_reset(void)
{
bc0050a0:	27bdffe0 	addiu	sp,sp,-32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:630
	writew(0x0, NPU_SYSM_RESET);
	writew(0x1, NPU_SYSM_RESET);
bc0050a4:	24020001 	li	v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:628
	return 0;
}


int sys_npu_reset(void)
{
bc0050a8:	afb00018 	sw	s0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:629
	writew(0x0, NPU_SYSM_RESET);
bc0050ac:	3c10b9e0 	lui	s0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:628
	return 0;
}


int sys_npu_reset(void)
{
bc0050b0:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:629
	writew(0x0, NPU_SYSM_RESET);
bc0050b4:	a6002c44 	sh	zero,11332(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:630
	writew(0x1, NPU_SYSM_RESET);
bc0050b8:	a6022c44 	sh	v0,11332(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:632

	writew(0xFF, NPU_SOFT_CLK_EN);
bc0050bc:	240200ff 	li	v0,255
bc0050c0:	a6024004 	sh	v0,16388(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:634

	writew(0xFF, NPU_SOFT_RESET);
bc0050c4:	a6024000 	sh	v0,16384(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:637
#ifndef FPGA
	/* emac[5-1]_phy_enable[4:0] */
	writeb(0xFF, OMINI_PHY_ENABLE);
bc0050c8:	2402ffff 	li	v0,-1
bc0050cc:	a2024040 	sb	v0,16448(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:638
	sys_omini_phy_reset();
bc0050d0:	0f0013f6 	jal	bc004fd8 <sys_omini_phy_reset>
bc0050d4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:642
#endif
	writew(0x00, NPU_SOFT_RESET);

	writew(0x0F, NPU_SOFT_BOE);
bc0050d8:	2402000f 	li	v0,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:640
#ifndef FPGA
	/* emac[5-1]_phy_enable[4:0] */
	writeb(0xFF, OMINI_PHY_ENABLE);
	sys_omini_phy_reset();
#endif
	writew(0x00, NPU_SOFT_RESET);
bc0050dc:	a6004000 	sh	zero,16384(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:642

	writew(0x0F, NPU_SOFT_BOE);
bc0050e0:	a602400c 	sh	v0,16396(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:645

	return 0;
}
bc0050e4:	8fbf001c 	lw	ra,28(sp)
bc0050e8:	8fb00018 	lw	s0,24(sp)
bc0050ec:	00001021 	move	v0,zero
bc0050f0:	03e00008 	jr	ra
bc0050f4:	27bd0020 	addiu	sp,sp,32

bc0050f8 <sys_init>:
sys_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:675

/*
 * TODO: cut down code size.
 */
int sys_init(void)
{
bc0050f8:	27bdffd8 	addiu	sp,sp,-40
set_clk_ratio():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:652
static inline int set_clk_ratio(void)
{
	/* FIXME: some fullmask board need some delay
	 * before memory_soft_reset()
	 */
	volatile int i = (1<< 10);
bc0050fc:	24020400 	li	v0,1024
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:654

	writel(4, CORE_L2_CLK_RATIO);
bc005100:	24030004 	li	v1,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:652
static inline int set_clk_ratio(void)
{
	/* FIXME: some fullmask board need some delay
	 * before memory_soft_reset()
	 */
	volatile int i = (1<< 10);
bc005104:	afa20018 	sw	v0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:654

	writel(4, CORE_L2_CLK_RATIO);
bc005108:	3c02b9e0 	lui	v0,0xb9e0
sys_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:675

/*
 * TODO: cut down code size.
 */
int sys_init(void)
{
bc00510c:	afbf0024 	sw	ra,36(sp)
bc005110:	afb00020 	sw	s0,32(sp)
set_clk_ratio():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:654
	/* FIXME: some fullmask board need some delay
	 * before memory_soft_reset()
	 */
	volatile int i = (1<< 10);

	writel(4, CORE_L2_CLK_RATIO);
bc005114:	ac430038 	sw	v1,56(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:656

	while(i--)
bc005118:	8fa20018 	lw	v0,24(sp)
bc00511c:	2443ffff 	addiu	v1,v0,-1
bc005120:	afa30018 	sw	v1,24(sp)
bc005124:	1440fffc 	bnez	v0,bc005118 <sys_init+0x20>
bc005128:	3c10b9e0 	lui	s0,0xb9e0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:659
		;

	writel(1, CORE_L2_SET_CLK_RATIO);
bc00512c:	24020001 	li	v0,1
bc005130:	ae02003c 	sw	v0,60(s0)
sys_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:679
int sys_init(void)
{
	/* set clock divider to 1:3 */
	set_clk_ratio();

	memory_soft_reset();
bc005134:	0f0013db 	jal	bc004f6c <memory_soft_reset>
bc005138:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:680
	bus_soft_reset();
bc00513c:	0f0013e6 	jal	bc004f98 <bus_soft_reset>
bc005140:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:681
	io_soft_reset();
bc005144:	0f0013f0 	jal	bc004fc0 <io_soft_reset>
bc005148:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:682
	sys_apb_modules_reset();
bc00514c:	0f001320 	jal	bc004c80 <sys_apb_modules_reset>
bc005150:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:683
	sys_dma_reset();
bc005154:	0f00133a 	jal	bc004ce8 <sys_dma_reset>
bc005158:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:684
	sys_npu_reset();
bc00515c:	0f001428 	jal	bc0050a0 <sys_npu_reset>
bc005160:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:685
	sys_wifi_reset();
bc005164:	0f0013cf 	jal	bc004f3c <sys_wifi_reset>
bc005168:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:686
	sys_usb_reset();
bc00516c:	0f00136e 	jal	bc004db8 <sys_usb_reset>
bc005170:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:687
	sys_gmac_reset();
bc005174:	0f00135c 	jal	bc004d70 <sys_gmac_reset>
bc005178:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:688
	sys_emmc_reset();
bc00517c:	0f00137b 	jal	bc004dec <sys_emmc_reset>
bc005180:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:689
	sys_sdio_reset();
bc005184:	0f001388 	jal	bc004e20 <sys_sdio_reset>
bc005188:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:691
	// sys_gdu_reset();
	sys_crypto_reset();
bc00518c:	0f001398 	jal	bc004e60 <sys_crypto_reset>
bc005190:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:692
	sys_gpio_reset();
bc005194:	0f00130c 	jal	bc004c30 <sys_gpio_reset>
bc005198:	00000000 	nop
sys_remap_n_enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:475
}

static inline int sys_remap_n_enable(void)
{
	/* used to access block devices(except sdio) + npu */
	writel(readl(SYS_MISC_CTRL) | 0x1, SYS_MISC_CTRL);
bc00519c:	8e02202c 	lw	v0,8236(s0)
bc0051a0:	34420001 	ori	v0,v0,0x1
bc0051a4:	ae02202c 	sw	v0,8236(s0)
sys_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/sys_manager.c:696
	sys_crypto_reset();
	sys_gpio_reset();
	sys_remap_n_enable();

	return 0;
}
bc0051a8:	8fbf0024 	lw	ra,36(sp)
bc0051ac:	8fb00020 	lw	s0,32(sp)
bc0051b0:	00001021 	move	v0,zero
bc0051b4:	03e00008 	jr	ra
bc0051b8:	27bd0028 	addiu	sp,sp,40

bc0051bc <sf_pad_set_func>:
sf_pad_set_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:232
	int mod_cnt = 0;
	int mod_num = 0;
	int fun_cnt = 0;
	int fun_num = 0;

	if(index > PAD_INDEX_MAX)
bc0051bc:	2c820047 	sltiu	v0,a0,71
bc0051c0:	1040024b 	beqz	v0,bc005af0 <sf_pad_set_func+0x934>
bc0051c4:	00803821 	move	a3,a0
bc0051c8:	00a03021 	move	a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:240
	fun_cnt = index / 8;
	fun_num = index % 8;
	mod_cnt = index / PAD_PER_GROUP_PINS;
	mod_num = index % PAD_PER_GROUP_PINS;

	switch (func)
bc0051cc:	2ca50006 	sltiu	a1,a1,6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:235
	int fun_num = 0;

	if(index > PAD_INDEX_MAX)
		return -EINVAL;

	fun_cnt = index / 8;
bc0051d0:	000410c2 	srl	v0,a0,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:237
	fun_num = index % 8;
	mod_cnt = index / PAD_PER_GROUP_PINS;
bc0051d4:	00071882 	srl	v1,a3,0x2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:236

	if(index > PAD_INDEX_MAX)
		return -EINVAL;

	fun_cnt = index / 8;
	fun_num = index % 8;
bc0051d8:	30840007 	andi	a0,a0,0x7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:240
	mod_cnt = index / PAD_PER_GROUP_PINS;
	mod_num = index % PAD_PER_GROUP_PINS;

	switch (func)
bc0051dc:	10a0023a 	beqz	a1,bc005ac8 <sf_pad_set_func+0x90c>
bc0051e0:	30e80003 	andi	t0,a3,0x3
bc0051e4:	3c05bc01 	lui	a1,0xbc01
bc0051e8:	24a590b8 	addiu	a1,a1,-28488
bc0051ec:	00063080 	sll	a2,a2,0x2
bc0051f0:	00a63021 	addu	a2,a1,a2
bc0051f4:	8cc50000 	lw	a1,0(a2)
bc0051f8:	00a00008 	jr	a1
bc0051fc:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:243
	{
		case FUNC0:
		tmp = readb(FUNC_SW_IE(fun_cnt));
bc005200:	24050008 	li	a1,8
bc005204:	50450006 	beql	v0,a1,bc005220 <sf_pad_set_func+0x64>
bc005208:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:243 (discriminator 1)
bc00520c:	24453fa8 	addiu	a1,v0,16296
bc005210:	00052880 	sll	a1,a1,0x2
bc005214:	3c06b9e3 	lui	a2,0xb9e3
bc005218:	0b001489 	j	bc005224 <sf_pad_set_func+0x68>
bc00521c:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:243
bc005220:	34a5faa0 	ori	a1,a1,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:243 (discriminator 3)
bc005224:	90a70000 	lbu	a3,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:244 (discriminator 3)
		tmp |= 1 << fun_num;
bc005228:	24050001 	li	a1,1
bc00522c:	00852004 	sllv	a0,a1,a0
bc005230:	7c042c20 	seb	a1,a0
bc005234:	00a73825 	or	a3,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:245 (discriminator 3)
		writeb(tmp, FUNC_SW_IE(fun_cnt));
bc005238:	24060008 	li	a2,8
bc00523c:	10460006 	beq	v0,a2,bc005258 <sf_pad_set_func+0x9c>
bc005240:	30e700ff 	andi	a3,a3,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:245 (discriminator 1)
bc005244:	24463fa8 	addiu	a2,v0,16296
bc005248:	00063080 	sll	a2,a2,0x2
bc00524c:	3c09b9e3 	lui	t1,0xb9e3
bc005250:	0b001498 	j	bc005260 <sf_pad_set_func+0xa4>
bc005254:	00c93021 	addu	a2,a2,t1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:245
bc005258:	3c06b9e3 	lui	a2,0xb9e3
bc00525c:	34c6faa0 	ori	a2,a2,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:245 (discriminator 3)
bc005260:	a0c70000 	sb	a3,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:247 (discriminator 3)

		tmp = readb(FUNC_SW_SEL(fun_cnt));
bc005264:	24060008 	li	a2,8
bc005268:	50460006 	beql	v0,a2,bc005284 <sf_pad_set_func+0xc8>
bc00526c:	3c06b9e3 	lui	a2,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:247 (discriminator 1)
bc005270:	24463f10 	addiu	a2,v0,16144
bc005274:	00063080 	sll	a2,a2,0x2
bc005278:	3c07b9e3 	lui	a3,0xb9e3
bc00527c:	0b0014a2 	j	bc005288 <sf_pad_set_func+0xcc>
bc005280:	00c73021 	addu	a2,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:247
bc005284:	34c6f840 	ori	a2,a2,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:247 (discriminator 3)
bc005288:	90c60000 	lbu	a2,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:248 (discriminator 3)
		tmp |= (1 << fun_num);
bc00528c:	00a62825 	or	a1,a1,a2
bc005290:	30a600ff 	andi	a2,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:249 (discriminator 3)
		writeb(tmp, FUNC_SW_SEL(fun_cnt));
bc005294:	24050008 	li	a1,8
bc005298:	50450006 	beql	v0,a1,bc0052b4 <sf_pad_set_func+0xf8>
bc00529c:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:249 (discriminator 1)
bc0052a0:	24453f10 	addiu	a1,v0,16144
bc0052a4:	00052880 	sll	a1,a1,0x2
bc0052a8:	3c07b9e3 	lui	a3,0xb9e3
bc0052ac:	0b0014ae 	j	bc0052b8 <sf_pad_set_func+0xfc>
bc0052b0:	00a72821 	addu	a1,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:249
bc0052b4:	34a5f840 	ori	a1,a1,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:249 (discriminator 3)
bc0052b8:	a0a60000 	sb	a2,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:251 (discriminator 3)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
bc0052bc:	24050008 	li	a1,8
bc0052c0:	50450006 	beql	v0,a1,bc0052dc <sf_pad_set_func+0x120>
bc0052c4:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:251 (discriminator 1)
bc0052c8:	24453fd8 	addiu	a1,v0,16344
bc0052cc:	00052880 	sll	a1,a1,0x2
bc0052d0:	3c06b9e3 	lui	a2,0xb9e3
bc0052d4:	0b0014b8 	j	bc0052e0 <sf_pad_set_func+0x124>
bc0052d8:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:251
bc0052dc:	34a5fb60 	ori	a1,a1,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:251 (discriminator 3)
bc0052e0:	90a50000 	lbu	a1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:252 (discriminator 3)
		tmp &= ~(1 << fun_num);
bc0052e4:	00042027 	nor	a0,zero,a0
bc0052e8:	00852024 	and	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:253 (discriminator 3)
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));
bc0052ec:	24050008 	li	a1,8
bc0052f0:	10450006 	beq	v0,a1,bc00530c <sf_pad_set_func+0x150>
bc0052f4:	308400ff 	andi	a0,a0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:253 (discriminator 1)
bc0052f8:	24423fd8 	addiu	v0,v0,16344
bc0052fc:	00021080 	sll	v0,v0,0x2
bc005300:	3c05b9e3 	lui	a1,0xb9e3
bc005304:	0b0014c5 	j	bc005314 <sf_pad_set_func+0x158>
bc005308:	00451021 	addu	v0,v0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:253
bc00530c:	3c02b9e3 	lui	v0,0xb9e3
bc005310:	3442fb60 	ori	v0,v0,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:253 (discriminator 3)
bc005314:	a0440000 	sb	a0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:256 (discriminator 3)

//		tmp = readb(PAD_MODE_SEL + mod_cnt * PAD_OFFSET);
		tmp = readb(PAD_MODE_SEL(mod_cnt));
bc005318:	28620010 	slti	v0,v1,16
bc00531c:	14400002 	bnez	v0,bc005328 <sf_pad_set_func+0x16c>
bc005320:	24643f00 	addiu	a0,v1,16128
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:256 (discriminator 2)
bc005324:	24643df0 	addiu	a0,v1,15856
bc005328:	3c05b9e3 	lui	a1,0xb9e3
bc00532c:	00042080 	sll	a0,a0,0x2
bc005330:	00852021 	addu	a0,a0,a1
bc005334:	90850000 	lbu	a1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:257 (discriminator 2)
		tmp &= ~(0x3 << (mod_num * 2));
bc005338:	00084040 	sll	t0,t0,0x1
bc00533c:	24040003 	li	a0,3
bc005340:	01042004 	sllv	a0,a0,t0
bc005344:	00042027 	nor	a0,zero,a0
bc005348:	00852024 	and	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:260 (discriminator 2)
		tmp |= (0 << (mod_num * 2));
//		writeb(tmp, (PAD_MODE_SEL + mod_cnt * PAD_OFFSET));
		writeb(tmp, PAD_MODE_SEL(mod_cnt));
bc00534c:	10400003 	beqz	v0,bc00535c <sf_pad_set_func+0x1a0>
bc005350:	308400ff 	andi	a0,a0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:260 (discriminator 1)
bc005354:	0b0014d8 	j	bc005360 <sf_pad_set_func+0x1a4>
bc005358:	24633f00 	addiu	v1,v1,16128
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:260 (discriminator 2)
bc00535c:	24633df0 	addiu	v1,v1,15856
bc005360:	00031880 	sll	v1,v1,0x2
bc005364:	3c02b9e3 	lui	v0,0xb9e3
bc005368:	00621821 	addu	v1,v1,v0
bc00536c:	a0640000 	sb	a0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:369 (discriminator 2)
		printf("sf_pad_set_func error! index:%d func:%d \n", index, func);
		return -EINVAL;
		break;
	}

	return 0;
bc005370:	03e00008 	jr	ra
bc005374:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:265
		writeb(tmp, PAD_MODE_SEL(mod_cnt));
		break;


		case FUNC1:
		tmp = readb(FUNC_SW_IE(fun_cnt));
bc005378:	24050008 	li	a1,8
bc00537c:	50450006 	beql	v0,a1,bc005398 <sf_pad_set_func+0x1dc>
bc005380:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:265 (discriminator 1)
bc005384:	24453fa8 	addiu	a1,v0,16296
bc005388:	00052880 	sll	a1,a1,0x2
bc00538c:	3c06b9e3 	lui	a2,0xb9e3
bc005390:	0b0014e7 	j	bc00539c <sf_pad_set_func+0x1e0>
bc005394:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:265
bc005398:	34a5faa0 	ori	a1,a1,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:265 (discriminator 3)
bc00539c:	90a70000 	lbu	a3,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:266 (discriminator 3)
		tmp |= 1 << fun_num;
bc0053a0:	24050001 	li	a1,1
bc0053a4:	00852004 	sllv	a0,a1,a0
bc0053a8:	7c042c20 	seb	a1,a0
bc0053ac:	00a73825 	or	a3,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:267 (discriminator 3)
		writeb(tmp, FUNC_SW_IE(fun_cnt));
bc0053b0:	24060008 	li	a2,8
bc0053b4:	10460006 	beq	v0,a2,bc0053d0 <sf_pad_set_func+0x214>
bc0053b8:	30e700ff 	andi	a3,a3,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:267 (discriminator 1)
bc0053bc:	24463fa8 	addiu	a2,v0,16296
bc0053c0:	00063080 	sll	a2,a2,0x2
bc0053c4:	3c09b9e3 	lui	t1,0xb9e3
bc0053c8:	0b0014f6 	j	bc0053d8 <sf_pad_set_func+0x21c>
bc0053cc:	00c93021 	addu	a2,a2,t1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:267
bc0053d0:	3c06b9e3 	lui	a2,0xb9e3
bc0053d4:	34c6faa0 	ori	a2,a2,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:267 (discriminator 3)
bc0053d8:	a0c70000 	sb	a3,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:269 (discriminator 3)

		tmp = readb(FUNC_SW_SEL(fun_cnt));
bc0053dc:	24060008 	li	a2,8
bc0053e0:	50460006 	beql	v0,a2,bc0053fc <sf_pad_set_func+0x240>
bc0053e4:	3c06b9e3 	lui	a2,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:269 (discriminator 1)
bc0053e8:	24463f10 	addiu	a2,v0,16144
bc0053ec:	00063080 	sll	a2,a2,0x2
bc0053f0:	3c07b9e3 	lui	a3,0xb9e3
bc0053f4:	0b001500 	j	bc005400 <sf_pad_set_func+0x244>
bc0053f8:	00c73021 	addu	a2,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:269
bc0053fc:	34c6f840 	ori	a2,a2,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:269 (discriminator 3)
bc005400:	90c60000 	lbu	a2,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:270 (discriminator 3)
		tmp |= (1 << fun_num);
bc005404:	00a62825 	or	a1,a1,a2
bc005408:	30a600ff 	andi	a2,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:271 (discriminator 3)
		writeb(tmp, FUNC_SW_SEL(fun_cnt));
bc00540c:	24050008 	li	a1,8
bc005410:	50450006 	beql	v0,a1,bc00542c <sf_pad_set_func+0x270>
bc005414:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:271 (discriminator 1)
bc005418:	24453f10 	addiu	a1,v0,16144
bc00541c:	00052880 	sll	a1,a1,0x2
bc005420:	3c07b9e3 	lui	a3,0xb9e3
bc005424:	0b00150c 	j	bc005430 <sf_pad_set_func+0x274>
bc005428:	00a72821 	addu	a1,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:271
bc00542c:	34a5f840 	ori	a1,a1,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:271 (discriminator 3)
bc005430:	a0a60000 	sb	a2,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:273 (discriminator 3)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
bc005434:	24050008 	li	a1,8
bc005438:	50450006 	beql	v0,a1,bc005454 <sf_pad_set_func+0x298>
bc00543c:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:273 (discriminator 1)
bc005440:	24453fd8 	addiu	a1,v0,16344
bc005444:	00052880 	sll	a1,a1,0x2
bc005448:	3c06b9e3 	lui	a2,0xb9e3
bc00544c:	0b001516 	j	bc005458 <sf_pad_set_func+0x29c>
bc005450:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:273
bc005454:	34a5fb60 	ori	a1,a1,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:273 (discriminator 3)
bc005458:	90a50000 	lbu	a1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:274 (discriminator 3)
		tmp &= ~(1 << fun_num);
bc00545c:	00042027 	nor	a0,zero,a0
bc005460:	00852024 	and	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:275 (discriminator 3)
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));
bc005464:	24050008 	li	a1,8
bc005468:	10450006 	beq	v0,a1,bc005484 <sf_pad_set_func+0x2c8>
bc00546c:	308400ff 	andi	a0,a0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:275 (discriminator 1)
bc005470:	24423fd8 	addiu	v0,v0,16344
bc005474:	00021080 	sll	v0,v0,0x2
bc005478:	3c05b9e3 	lui	a1,0xb9e3
bc00547c:	0b001523 	j	bc00548c <sf_pad_set_func+0x2d0>
bc005480:	00451021 	addu	v0,v0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:275
bc005484:	3c02b9e3 	lui	v0,0xb9e3
bc005488:	3442fb60 	ori	v0,v0,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:275 (discriminator 3)
bc00548c:	a0440000 	sb	a0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:277 (discriminator 3)

		tmp = readb(PAD_MODE_SEL(mod_cnt));
bc005490:	28620010 	slti	v0,v1,16
bc005494:	14400002 	bnez	v0,bc0054a0 <sf_pad_set_func+0x2e4>
bc005498:	24643f00 	addiu	a0,v1,16128
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:277 (discriminator 2)
bc00549c:	24643df0 	addiu	a0,v1,15856
bc0054a0:	3c05b9e3 	lui	a1,0xb9e3
bc0054a4:	00042080 	sll	a0,a0,0x2
bc0054a8:	00852021 	addu	a0,a0,a1
bc0054ac:	90850000 	lbu	a1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:279 (discriminator 2)

		tmp &= ~(0x3 << (mod_num * 2));
bc0054b0:	00084040 	sll	t0,t0,0x1
bc0054b4:	24040003 	li	a0,3
bc0054b8:	01042004 	sllv	a0,a0,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:277 (discriminator 2)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
		tmp &= ~(1 << fun_num);
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));

		tmp = readb(PAD_MODE_SEL(mod_cnt));
bc0054bc:	30a500ff 	andi	a1,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:279 (discriminator 2)

		tmp &= ~(0x3 << (mod_num * 2));
bc0054c0:	00042027 	nor	a0,zero,a0
bc0054c4:	00a42024 	and	a0,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:280 (discriminator 2)
		tmp |= (1 << (mod_num * 2));
bc0054c8:	0b00157b 	j	bc0055ec <sf_pad_set_func+0x430>
bc0054cc:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:286
		writeb(tmp, PAD_MODE_SEL(mod_cnt));
		break;


		case FUNC2:
		tmp = readb(FUNC_SW_IE(fun_cnt));
bc0054d0:	24050008 	li	a1,8
bc0054d4:	10450050 	beq	v0,a1,bc005618 <sf_pad_set_func+0x45c>
bc0054d8:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:286 (discriminator 1)
bc0054dc:	24453fa8 	addiu	a1,v0,16296
bc0054e0:	00052880 	sll	a1,a1,0x2
bc0054e4:	3c06b9e3 	lui	a2,0xb9e3
bc0054e8:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:286 (discriminator 3)
bc0054ec:	90a70000 	lbu	a3,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:287 (discriminator 3)
		tmp |= 1 << fun_num;
bc0054f0:	24050001 	li	a1,1
bc0054f4:	00852004 	sllv	a0,a1,a0
bc0054f8:	7c042c20 	seb	a1,a0
bc0054fc:	00a73825 	or	a3,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:288 (discriminator 3)
		writeb(tmp, FUNC_SW_IE(fun_cnt));
bc005500:	24060008 	li	a2,8
bc005504:	10460046 	beq	v0,a2,bc005620 <sf_pad_set_func+0x464>
bc005508:	30e700ff 	andi	a3,a3,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:288 (discriminator 1)
bc00550c:	24463fa8 	addiu	a2,v0,16296
bc005510:	00063080 	sll	a2,a2,0x2
bc005514:	3c09b9e3 	lui	t1,0xb9e3
bc005518:	00c93021 	addu	a2,a2,t1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:288 (discriminator 3)
bc00551c:	a0c70000 	sb	a3,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:290 (discriminator 3)

		tmp = readb(FUNC_SW_SEL(fun_cnt));
bc005520:	24060008 	li	a2,8
bc005524:	10460041 	beq	v0,a2,bc00562c <sf_pad_set_func+0x470>
bc005528:	3c06b9e3 	lui	a2,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:290 (discriminator 1)
bc00552c:	24463f10 	addiu	a2,v0,16144
bc005530:	00063080 	sll	a2,a2,0x2
bc005534:	3c07b9e3 	lui	a3,0xb9e3
bc005538:	00c73021 	addu	a2,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:290 (discriminator 3)
bc00553c:	90c60000 	lbu	a2,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:291 (discriminator 3)
		tmp |= (1 << fun_num);
bc005540:	00a62825 	or	a1,a1,a2
bc005544:	30a600ff 	andi	a2,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:292 (discriminator 3)
		writeb(tmp, FUNC_SW_SEL(fun_cnt));
bc005548:	24050008 	li	a1,8
bc00554c:	10450039 	beq	v0,a1,bc005634 <sf_pad_set_func+0x478>
bc005550:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:292 (discriminator 1)
bc005554:	24453f10 	addiu	a1,v0,16144
bc005558:	00052880 	sll	a1,a1,0x2
bc00555c:	3c07b9e3 	lui	a3,0xb9e3
bc005560:	00a72821 	addu	a1,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:292 (discriminator 3)
bc005564:	a0a60000 	sb	a2,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:294 (discriminator 3)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
bc005568:	24050008 	li	a1,8
bc00556c:	10450033 	beq	v0,a1,bc00563c <sf_pad_set_func+0x480>
bc005570:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:294 (discriminator 1)
bc005574:	24453fd8 	addiu	a1,v0,16344
bc005578:	00052880 	sll	a1,a1,0x2
bc00557c:	3c06b9e3 	lui	a2,0xb9e3
bc005580:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:294 (discriminator 3)
bc005584:	90a50000 	lbu	a1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:295 (discriminator 3)
		tmp &= ~(1 << fun_num);
bc005588:	00042027 	nor	a0,zero,a0
bc00558c:	00852024 	and	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:296 (discriminator 3)
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));
bc005590:	24050008 	li	a1,8
bc005594:	1045002b 	beq	v0,a1,bc005644 <sf_pad_set_func+0x488>
bc005598:	308400ff 	andi	a0,a0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:296 (discriminator 1)
bc00559c:	24423fd8 	addiu	v0,v0,16344
bc0055a0:	00021080 	sll	v0,v0,0x2
bc0055a4:	3c05b9e3 	lui	a1,0xb9e3
bc0055a8:	00451021 	addu	v0,v0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:296 (discriminator 3)
bc0055ac:	a0440000 	sb	a0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:298 (discriminator 3)

		tmp = readb(PAD_MODE_SEL(mod_cnt));
bc0055b0:	28620010 	slti	v0,v1,16
bc0055b4:	14400002 	bnez	v0,bc0055c0 <sf_pad_set_func+0x404>
bc0055b8:	24643f00 	addiu	a0,v1,16128
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:298 (discriminator 2)
bc0055bc:	24643df0 	addiu	a0,v1,15856
bc0055c0:	3c05b9e3 	lui	a1,0xb9e3
bc0055c4:	00042080 	sll	a0,a0,0x2
bc0055c8:	00852021 	addu	a0,a0,a1
bc0055cc:	90850000 	lbu	a1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:299 (discriminator 2)
		tmp &= ~(0x3 << (mod_num * 2));
bc0055d0:	00084040 	sll	t0,t0,0x1
bc0055d4:	24040003 	li	a0,3
bc0055d8:	01042004 	sllv	a0,a0,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:298 (discriminator 2)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
		tmp &= ~(1 << fun_num);
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));

		tmp = readb(PAD_MODE_SEL(mod_cnt));
bc0055dc:	30a500ff 	andi	a1,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:299 (discriminator 2)
		tmp &= ~(0x3 << (mod_num * 2));
bc0055e0:	00042027 	nor	a0,zero,a0
bc0055e4:	00a42024 	and	a0,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:300 (discriminator 2)
		tmp |= (2 << (mod_num * 2));
bc0055e8:	24050002 	li	a1,2
bc0055ec:	01054004 	sllv	t0,a1,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:320 (discriminator 2)
		tmp &= ~(1 << fun_num);
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));

		tmp = readb(PAD_MODE_SEL(mod_cnt));
		tmp &= ~(0x3 << (mod_num * 2));
		tmp |= (3 << (mod_num * 2));
bc0055f0:	01044025 	or	t0,t0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:321 (discriminator 2)
		writeb(tmp, PAD_MODE_SEL(mod_cnt));
bc0055f4:	1440006b 	bnez	v0,bc0057a4 <sf_pad_set_func+0x5e8>
bc0055f8:	310800ff 	andi	t0,t0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:281 (discriminator 2)

		tmp = readb(PAD_MODE_SEL(mod_cnt));

		tmp &= ~(0x3 << (mod_num * 2));
		tmp |= (1 << (mod_num * 2));
		writeb(tmp, PAD_MODE_SEL(mod_cnt));
bc0055fc:	24633df0 	addiu	v1,v1,15856
bc005600:	00031880 	sll	v1,v1,0x2
bc005604:	3c02b9e3 	lui	v0,0xb9e3
bc005608:	00621821 	addu	v1,v1,v0
bc00560c:	a0680000 	sb	t0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:282 (discriminator 3)
		break;
bc005610:	03e00008 	jr	ra
bc005614:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:286


		case FUNC2:
		tmp = readb(FUNC_SW_IE(fun_cnt));
bc005618:	0b00153b 	j	bc0054ec <sf_pad_set_func+0x330>
bc00561c:	34a5faa0 	ori	a1,a1,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:288
		tmp |= 1 << fun_num;
		writeb(tmp, FUNC_SW_IE(fun_cnt));
bc005620:	3c06b9e3 	lui	a2,0xb9e3
bc005624:	0b001547 	j	bc00551c <sf_pad_set_func+0x360>
bc005628:	34c6faa0 	ori	a2,a2,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:290

		tmp = readb(FUNC_SW_SEL(fun_cnt));
bc00562c:	0b00154f 	j	bc00553c <sf_pad_set_func+0x380>
bc005630:	34c6f840 	ori	a2,a2,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:292
		tmp |= (1 << fun_num);
		writeb(tmp, FUNC_SW_SEL(fun_cnt));
bc005634:	0b001559 	j	bc005564 <sf_pad_set_func+0x3a8>
bc005638:	34a5f840 	ori	a1,a1,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:294

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
bc00563c:	0b001561 	j	bc005584 <sf_pad_set_func+0x3c8>
bc005640:	34a5fb60 	ori	a1,a1,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:296
		tmp &= ~(1 << fun_num);
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));
bc005644:	3c02b9e3 	lui	v0,0xb9e3
bc005648:	0b00156b 	j	bc0055ac <sf_pad_set_func+0x3f0>
bc00564c:	3442fb60 	ori	v0,v0,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:306
		writeb(tmp, PAD_MODE_SEL(mod_cnt));
		break;


		case FUNC3:
		tmp = readb(FUNC_SW_IE(fun_cnt));
bc005650:	24050008 	li	a1,8
bc005654:	50450006 	beql	v0,a1,bc005670 <sf_pad_set_func+0x4b4>
bc005658:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:306 (discriminator 1)
bc00565c:	24453fa8 	addiu	a1,v0,16296
bc005660:	00052880 	sll	a1,a1,0x2
bc005664:	3c06b9e3 	lui	a2,0xb9e3
bc005668:	0b00159d 	j	bc005674 <sf_pad_set_func+0x4b8>
bc00566c:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:306
bc005670:	34a5faa0 	ori	a1,a1,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:306 (discriminator 3)
bc005674:	90a70000 	lbu	a3,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:307 (discriminator 3)
		tmp |= 1 << fun_num;
bc005678:	24050001 	li	a1,1
bc00567c:	00852004 	sllv	a0,a1,a0
bc005680:	7c042c20 	seb	a1,a0
bc005684:	00a73825 	or	a3,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:308 (discriminator 3)
		writeb(tmp, FUNC_SW_IE(fun_cnt));
bc005688:	24060008 	li	a2,8
bc00568c:	10460006 	beq	v0,a2,bc0056a8 <sf_pad_set_func+0x4ec>
bc005690:	30e700ff 	andi	a3,a3,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:308 (discriminator 1)
bc005694:	24463fa8 	addiu	a2,v0,16296
bc005698:	00063080 	sll	a2,a2,0x2
bc00569c:	3c09b9e3 	lui	t1,0xb9e3
bc0056a0:	0b0015ac 	j	bc0056b0 <sf_pad_set_func+0x4f4>
bc0056a4:	00c93021 	addu	a2,a2,t1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:308
bc0056a8:	3c06b9e3 	lui	a2,0xb9e3
bc0056ac:	34c6faa0 	ori	a2,a2,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:308 (discriminator 3)
bc0056b0:	a0c70000 	sb	a3,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:310 (discriminator 3)

		tmp = readb(FUNC_SW_SEL(fun_cnt));
bc0056b4:	24060008 	li	a2,8
bc0056b8:	50460006 	beql	v0,a2,bc0056d4 <sf_pad_set_func+0x518>
bc0056bc:	3c06b9e3 	lui	a2,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:310 (discriminator 1)
bc0056c0:	24463f10 	addiu	a2,v0,16144
bc0056c4:	00063080 	sll	a2,a2,0x2
bc0056c8:	3c07b9e3 	lui	a3,0xb9e3
bc0056cc:	0b0015b6 	j	bc0056d8 <sf_pad_set_func+0x51c>
bc0056d0:	00c73021 	addu	a2,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:310
bc0056d4:	34c6f840 	ori	a2,a2,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:310 (discriminator 3)
bc0056d8:	90c60000 	lbu	a2,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:311 (discriminator 3)
		tmp |= (1 << fun_num);
bc0056dc:	00a62825 	or	a1,a1,a2
bc0056e0:	30a600ff 	andi	a2,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:312 (discriminator 3)
		writeb(tmp, FUNC_SW_SEL(fun_cnt));
bc0056e4:	24050008 	li	a1,8
bc0056e8:	50450006 	beql	v0,a1,bc005704 <sf_pad_set_func+0x548>
bc0056ec:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:312 (discriminator 1)
bc0056f0:	24453f10 	addiu	a1,v0,16144
bc0056f4:	00052880 	sll	a1,a1,0x2
bc0056f8:	3c07b9e3 	lui	a3,0xb9e3
bc0056fc:	0b0015c2 	j	bc005708 <sf_pad_set_func+0x54c>
bc005700:	00a72821 	addu	a1,a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:312
bc005704:	34a5f840 	ori	a1,a1,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:312 (discriminator 3)
bc005708:	a0a60000 	sb	a2,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:314 (discriminator 3)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
bc00570c:	24050008 	li	a1,8
bc005710:	50450006 	beql	v0,a1,bc00572c <sf_pad_set_func+0x570>
bc005714:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:314 (discriminator 1)
bc005718:	24453fd8 	addiu	a1,v0,16344
bc00571c:	00052880 	sll	a1,a1,0x2
bc005720:	3c06b9e3 	lui	a2,0xb9e3
bc005724:	0b0015cc 	j	bc005730 <sf_pad_set_func+0x574>
bc005728:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:314
bc00572c:	34a5fb60 	ori	a1,a1,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:314 (discriminator 3)
bc005730:	90a50000 	lbu	a1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:315 (discriminator 3)
		tmp &= ~(1 << fun_num);
bc005734:	00042027 	nor	a0,zero,a0
bc005738:	00852024 	and	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:316 (discriminator 3)
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));
bc00573c:	24050008 	li	a1,8
bc005740:	10450006 	beq	v0,a1,bc00575c <sf_pad_set_func+0x5a0>
bc005744:	308400ff 	andi	a0,a0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:316 (discriminator 1)
bc005748:	24423fd8 	addiu	v0,v0,16344
bc00574c:	00021080 	sll	v0,v0,0x2
bc005750:	3c05b9e3 	lui	a1,0xb9e3
bc005754:	0b0015d9 	j	bc005764 <sf_pad_set_func+0x5a8>
bc005758:	00451021 	addu	v0,v0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:316
bc00575c:	3c02b9e3 	lui	v0,0xb9e3
bc005760:	3442fb60 	ori	v0,v0,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:316 (discriminator 3)
bc005764:	a0440000 	sb	a0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:318 (discriminator 3)

		tmp = readb(PAD_MODE_SEL(mod_cnt));
bc005768:	28620010 	slti	v0,v1,16
bc00576c:	14400002 	bnez	v0,bc005778 <sf_pad_set_func+0x5bc>
bc005770:	24643f00 	addiu	a0,v1,16128
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:318 (discriminator 2)
bc005774:	24643df0 	addiu	a0,v1,15856
bc005778:	3c05b9e3 	lui	a1,0xb9e3
bc00577c:	00042080 	sll	a0,a0,0x2
bc005780:	00852021 	addu	a0,a0,a1
bc005784:	90840000 	lbu	a0,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:319 (discriminator 2)
		tmp &= ~(0x3 << (mod_num * 2));
bc005788:	24050003 	li	a1,3
bc00578c:	00084040 	sll	t0,t0,0x1
bc005790:	01054004 	sllv	t0,a1,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:318 (discriminator 2)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
		tmp &= ~(1 << fun_num);
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));

		tmp = readb(PAD_MODE_SEL(mod_cnt));
bc005794:	308400ff 	andi	a0,a0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:319 (discriminator 2)
		tmp &= ~(0x3 << (mod_num * 2));
bc005798:	00082827 	nor	a1,zero,t0
bc00579c:	0b00157c 	j	bc0055f0 <sf_pad_set_func+0x434>
bc0057a0:	00852024 	and	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:321 (discriminator 1)
		tmp |= (3 << (mod_num * 2));
		writeb(tmp, PAD_MODE_SEL(mod_cnt));
bc0057a4:	0b001580 	j	bc005600 <sf_pad_set_func+0x444>
bc0057a8:	24633f00 	addiu	v1,v1,16128
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:326
		break;


		case GPIO_INPUT:
		tmp = readb(FUNC_SW_SEL(fun_cnt));
bc0057ac:	24030008 	li	v1,8
bc0057b0:	50430006 	beql	v0,v1,bc0057cc <sf_pad_set_func+0x610>
bc0057b4:	3c03b9e3 	lui	v1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:326 (discriminator 1)
bc0057b8:	24433f10 	addiu	v1,v0,16144
bc0057bc:	00031880 	sll	v1,v1,0x2
bc0057c0:	3c05b9e3 	lui	a1,0xb9e3
bc0057c4:	0b0015f4 	j	bc0057d0 <sf_pad_set_func+0x614>
bc0057c8:	00651821 	addu	v1,v1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:326
bc0057cc:	3463f840 	ori	v1,v1,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:326 (discriminator 3)
bc0057d0:	90650000 	lbu	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:327 (discriminator 3)
		tmp |= (1 << fun_num);
bc0057d4:	24030001 	li	v1,1
bc0057d8:	00832004 	sllv	a0,v1,a0
bc0057dc:	7c042420 	seb	a0,a0
bc0057e0:	00852825 	or	a1,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:328 (discriminator 3)
		writeb(tmp, FUNC_SW_SEL(fun_cnt));
bc0057e4:	24030008 	li	v1,8
bc0057e8:	10430006 	beq	v0,v1,bc005804 <sf_pad_set_func+0x648>
bc0057ec:	30a500ff 	andi	a1,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:328 (discriminator 1)
bc0057f0:	24433f10 	addiu	v1,v0,16144
bc0057f4:	00031880 	sll	v1,v1,0x2
bc0057f8:	3c06b9e3 	lui	a2,0xb9e3
bc0057fc:	0b001603 	j	bc00580c <sf_pad_set_func+0x650>
bc005800:	00661821 	addu	v1,v1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:328
bc005804:	3c03b9e3 	lui	v1,0xb9e3
bc005808:	3463f840 	ori	v1,v1,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:328 (discriminator 3)
bc00580c:	a0650000 	sb	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:330 (discriminator 3)

		tmp = readb(FUNC_SW_IE(fun_cnt));
bc005810:	24030008 	li	v1,8
bc005814:	50430006 	beql	v0,v1,bc005830 <sf_pad_set_func+0x674>
bc005818:	3c03b9e3 	lui	v1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:330 (discriminator 1)
bc00581c:	24433fa8 	addiu	v1,v0,16296
bc005820:	00031880 	sll	v1,v1,0x2
bc005824:	3c05b9e3 	lui	a1,0xb9e3
bc005828:	0b00160d 	j	bc005834 <sf_pad_set_func+0x678>
bc00582c:	00651821 	addu	v1,v1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:330
bc005830:	3463faa0 	ori	v1,v1,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:330 (discriminator 3)
bc005834:	90650000 	lbu	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:332 (discriminator 3)
		tmp |= 1 << fun_num;
		writeb(tmp, FUNC_SW_IE(fun_cnt));
bc005838:	24030008 	li	v1,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:331 (discriminator 3)
		tmp = readb(FUNC_SW_SEL(fun_cnt));
		tmp |= (1 << fun_num);
		writeb(tmp, FUNC_SW_SEL(fun_cnt));

		tmp = readb(FUNC_SW_IE(fun_cnt));
		tmp |= 1 << fun_num;
bc00583c:	00852825 	or	a1,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:332 (discriminator 3)
		writeb(tmp, FUNC_SW_IE(fun_cnt));
bc005840:	10430006 	beq	v0,v1,bc00585c <sf_pad_set_func+0x6a0>
bc005844:	30a500ff 	andi	a1,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:332 (discriminator 1)
bc005848:	24433fa8 	addiu	v1,v0,16296
bc00584c:	00031880 	sll	v1,v1,0x2
bc005850:	3c06b9e3 	lui	a2,0xb9e3
bc005854:	0b001619 	j	bc005864 <sf_pad_set_func+0x6a8>
bc005858:	00661821 	addu	v1,v1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:332
bc00585c:	3c03b9e3 	lui	v1,0xb9e3
bc005860:	3463faa0 	ori	v1,v1,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:332 (discriminator 3)
bc005864:	a0650000 	sb	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:333 (discriminator 3)
		tmp = readb(FUNC_SW_OEN(fun_cnt));
bc005868:	24030008 	li	v1,8
bc00586c:	50430006 	beql	v0,v1,bc005888 <sf_pad_set_func+0x6cc>
bc005870:	3c03b9e3 	lui	v1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:333 (discriminator 1)
bc005874:	24433f20 	addiu	v1,v0,16160
bc005878:	00031880 	sll	v1,v1,0x2
bc00587c:	3c05b9e3 	lui	a1,0xb9e3
bc005880:	0b001623 	j	bc00588c <sf_pad_set_func+0x6d0>
bc005884:	00651821 	addu	v1,v1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:333
bc005888:	3463f880 	ori	v1,v1,0xf880
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:333 (discriminator 3)
bc00588c:	90650000 	lbu	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:335 (discriminator 3)
		tmp |= 1 << fun_num;
		writeb(tmp, FUNC_SW_OEN(fun_cnt));
bc005890:	24030008 	li	v1,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:334 (discriminator 3)

		tmp = readb(FUNC_SW_IE(fun_cnt));
		tmp |= 1 << fun_num;
		writeb(tmp, FUNC_SW_IE(fun_cnt));
		tmp = readb(FUNC_SW_OEN(fun_cnt));
		tmp |= 1 << fun_num;
bc005894:	00852825 	or	a1,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:335 (discriminator 3)
		writeb(tmp, FUNC_SW_OEN(fun_cnt));
bc005898:	10430006 	beq	v0,v1,bc0058b4 <sf_pad_set_func+0x6f8>
bc00589c:	30a500ff 	andi	a1,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:335 (discriminator 1)
bc0058a0:	24433f20 	addiu	v1,v0,16160
bc0058a4:	00031880 	sll	v1,v1,0x2
bc0058a8:	3c06b9e3 	lui	a2,0xb9e3
bc0058ac:	0b00162f 	j	bc0058bc <sf_pad_set_func+0x700>
bc0058b0:	00661821 	addu	v1,v1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:335
bc0058b4:	3c03b9e3 	lui	v1,0xb9e3
bc0058b8:	3463f880 	ori	v1,v1,0xf880
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:335 (discriminator 3)
bc0058bc:	a0650000 	sb	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:337 (discriminator 3)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
bc0058c0:	24030008 	li	v1,8
bc0058c4:	50430006 	beql	v0,v1,bc0058e0 <sf_pad_set_func+0x724>
bc0058c8:	3c03b9e3 	lui	v1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:337 (discriminator 1)
bc0058cc:	24433fd8 	addiu	v1,v0,16344
bc0058d0:	00031880 	sll	v1,v1,0x2
bc0058d4:	3c05b9e3 	lui	a1,0xb9e3
bc0058d8:	0b001639 	j	bc0058e4 <sf_pad_set_func+0x728>
bc0058dc:	00651821 	addu	v1,v1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:337
bc0058e0:	3463fb60 	ori	v1,v1,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:337 (discriminator 3)
bc0058e4:	90630000 	lbu	v1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:338 (discriminator 3)
		tmp |= 1 << fun_num;
bc0058e8:	00832025 	or	a0,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:339 (discriminator 3)
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));
bc0058ec:	24030008 	li	v1,8
bc0058f0:	10430006 	beq	v0,v1,bc00590c <sf_pad_set_func+0x750>
bc0058f4:	308400ff 	andi	a0,a0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:339 (discriminator 1)
bc0058f8:	24423fd8 	addiu	v0,v0,16344
bc0058fc:	00021080 	sll	v0,v0,0x2
bc005900:	3c03b9e3 	lui	v1,0xb9e3
bc005904:	0b001645 	j	bc005914 <sf_pad_set_func+0x758>
bc005908:	00431021 	addu	v0,v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:339
bc00590c:	3c02b9e3 	lui	v0,0xb9e3
bc005910:	3442fb60 	ori	v0,v0,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:339 (discriminator 3)
bc005914:	a0440000 	sb	a0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:341 (discriminator 3)

		writeb(1, GPIO_DIR(index));
bc005918:	3c0202e7 	lui	v0,0x2e7
bc00591c:	24424000 	addiu	v0,v0,16384
bc005920:	00e23821 	addu	a3,a3,v0
bc005924:	00073980 	sll	a3,a3,0x6
bc005928:	24020001 	li	v0,1
bc00592c:	a0e20008 	sb	v0,8(a3)
bc005930:	0b001584 	j	bc005610 <sf_pad_set_func+0x454>
bc005934:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:345
		break;

		case GPIO_OUTPUT:
		tmp = readb(FUNC_SW_SEL(fun_cnt));
bc005938:	24030008 	li	v1,8
bc00593c:	50430006 	beql	v0,v1,bc005958 <sf_pad_set_func+0x79c>
bc005940:	3c03b9e3 	lui	v1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:345 (discriminator 1)
bc005944:	24433f10 	addiu	v1,v0,16144
bc005948:	00031880 	sll	v1,v1,0x2
bc00594c:	3c05b9e3 	lui	a1,0xb9e3
bc005950:	0b001657 	j	bc00595c <sf_pad_set_func+0x7a0>
bc005954:	00651821 	addu	v1,v1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:345
bc005958:	3463f840 	ori	v1,v1,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:345 (discriminator 3)
bc00595c:	90660000 	lbu	a2,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:346 (discriminator 3)
		tmp |= (1 << fun_num);
bc005960:	24030001 	li	v1,1
bc005964:	00832004 	sllv	a0,v1,a0
bc005968:	7c041c20 	seb	v1,a0
bc00596c:	00663025 	or	a2,v1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:347 (discriminator 3)
		writeb(tmp, FUNC_SW_SEL(fun_cnt));
bc005970:	24050008 	li	a1,8
bc005974:	10450006 	beq	v0,a1,bc005990 <sf_pad_set_func+0x7d4>
bc005978:	30c600ff 	andi	a2,a2,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:347 (discriminator 1)
bc00597c:	24453f10 	addiu	a1,v0,16144
bc005980:	00052880 	sll	a1,a1,0x2
bc005984:	3c08b9e3 	lui	t0,0xb9e3
bc005988:	0b001666 	j	bc005998 <sf_pad_set_func+0x7dc>
bc00598c:	00a82821 	addu	a1,a1,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:347
bc005990:	3c05b9e3 	lui	a1,0xb9e3
bc005994:	34a5f840 	ori	a1,a1,0xf840
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:347 (discriminator 3)
bc005998:	a0a60000 	sb	a2,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:349 (discriminator 3)

		tmp = readb(FUNC_SW_OEN(fun_cnt));
bc00599c:	24050008 	li	a1,8
bc0059a0:	50450006 	beql	v0,a1,bc0059bc <sf_pad_set_func+0x800>
bc0059a4:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:349 (discriminator 1)
bc0059a8:	24453f20 	addiu	a1,v0,16160
bc0059ac:	00052880 	sll	a1,a1,0x2
bc0059b0:	3c06b9e3 	lui	a2,0xb9e3
bc0059b4:	0b001670 	j	bc0059c0 <sf_pad_set_func+0x804>
bc0059b8:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:349
bc0059bc:	34a5f880 	ori	a1,a1,0xf880
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:349 (discriminator 3)
bc0059c0:	90a60000 	lbu	a2,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:350 (discriminator 3)
		tmp &= ~(1 << fun_num);
bc0059c4:	00042027 	nor	a0,zero,a0
bc0059c8:	7c042420 	seb	a0,a0
bc0059cc:	00863024 	and	a2,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:351 (discriminator 3)
		writeb(tmp, FUNC_SW_OEN(fun_cnt));
bc0059d0:	24050008 	li	a1,8
bc0059d4:	10450006 	beq	v0,a1,bc0059f0 <sf_pad_set_func+0x834>
bc0059d8:	30c600ff 	andi	a2,a2,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:351 (discriminator 1)
bc0059dc:	24453f20 	addiu	a1,v0,16160
bc0059e0:	00052880 	sll	a1,a1,0x2
bc0059e4:	3c08b9e3 	lui	t0,0xb9e3
bc0059e8:	0b00167e 	j	bc0059f8 <sf_pad_set_func+0x83c>
bc0059ec:	00a82821 	addu	a1,a1,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:351
bc0059f0:	3c05b9e3 	lui	a1,0xb9e3
bc0059f4:	34a5f880 	ori	a1,a1,0xf880
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:351 (discriminator 3)
bc0059f8:	a0a60000 	sb	a2,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:352 (discriminator 3)
		tmp = readb(FUNC_SW_IE(fun_cnt));
bc0059fc:	24050008 	li	a1,8
bc005a00:	50450006 	beql	v0,a1,bc005a1c <sf_pad_set_func+0x860>
bc005a04:	3c05b9e3 	lui	a1,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:352 (discriminator 1)
bc005a08:	24453fa8 	addiu	a1,v0,16296
bc005a0c:	00052880 	sll	a1,a1,0x2
bc005a10:	3c06b9e3 	lui	a2,0xb9e3
bc005a14:	0b001688 	j	bc005a20 <sf_pad_set_func+0x864>
bc005a18:	00a62821 	addu	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:352
bc005a1c:	34a5faa0 	ori	a1,a1,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:352 (discriminator 3)
bc005a20:	90a50000 	lbu	a1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:353 (discriminator 3)
		tmp &= ~(1 << fun_num);
bc005a24:	00852024 	and	a0,a0,a1
bc005a28:	308500ff 	andi	a1,a0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:354 (discriminator 3)
		writeb(tmp, FUNC_SW_IE(fun_cnt));
bc005a2c:	24040008 	li	a0,8
bc005a30:	50440006 	beql	v0,a0,bc005a4c <sf_pad_set_func+0x890>
bc005a34:	3c04b9e3 	lui	a0,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:354 (discriminator 1)
bc005a38:	24443fa8 	addiu	a0,v0,16296
bc005a3c:	00042080 	sll	a0,a0,0x2
bc005a40:	3c06b9e3 	lui	a2,0xb9e3
bc005a44:	0b001694 	j	bc005a50 <sf_pad_set_func+0x894>
bc005a48:	00862021 	addu	a0,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:354
bc005a4c:	3484faa0 	ori	a0,a0,0xfaa0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:354 (discriminator 3)
bc005a50:	a0850000 	sb	a1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:356 (discriminator 3)

		tmp = readb(PAD_FUCN_SEL(fun_cnt));
bc005a54:	24040008 	li	a0,8
bc005a58:	50440006 	beql	v0,a0,bc005a74 <sf_pad_set_func+0x8b8>
bc005a5c:	3c04b9e3 	lui	a0,0xb9e3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:356 (discriminator 1)
bc005a60:	24443fd8 	addiu	a0,v0,16344
bc005a64:	00042080 	sll	a0,a0,0x2
bc005a68:	3c05b9e3 	lui	a1,0xb9e3
bc005a6c:	0b00169e 	j	bc005a78 <sf_pad_set_func+0x8bc>
bc005a70:	00852021 	addu	a0,a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:356
bc005a74:	3484fb60 	ori	a0,a0,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:356 (discriminator 3)
bc005a78:	90840000 	lbu	a0,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:357 (discriminator 3)
		tmp |= 1 << fun_num;
bc005a7c:	00641825 	or	v1,v1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:358 (discriminator 3)
		writeb(tmp, PAD_FUCN_SEL(fun_cnt));
bc005a80:	24040008 	li	a0,8
bc005a84:	10440006 	beq	v0,a0,bc005aa0 <sf_pad_set_func+0x8e4>
bc005a88:	306300ff 	andi	v1,v1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:358 (discriminator 1)
bc005a8c:	24423fd8 	addiu	v0,v0,16344
bc005a90:	00021080 	sll	v0,v0,0x2
bc005a94:	3c04b9e3 	lui	a0,0xb9e3
bc005a98:	0b0016aa 	j	bc005aa8 <sf_pad_set_func+0x8ec>
bc005a9c:	00441021 	addu	v0,v0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:358
bc005aa0:	3c02b9e3 	lui	v0,0xb9e3
bc005aa4:	3442fb60 	ori	v0,v0,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:358 (discriminator 3)
bc005aa8:	a0430000 	sb	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:360 (discriminator 3)

		writeb(0, GPIO_DIR(index));
bc005aac:	3c0202e7 	lui	v0,0x2e7
bc005ab0:	24424000 	addiu	v0,v0,16384
bc005ab4:	00e23821 	addu	a3,a3,v0
bc005ab8:	00073980 	sll	a3,a3,0x6
bc005abc:	a0e00008 	sb	zero,8(a3)
bc005ac0:	0b001584 	j	bc005610 <sf_pad_set_func+0x454>
bc005ac4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:364
		break;

		default:
		printf("sf_pad_set_func error! index:%d func:%d \n", index, func);
bc005ac8:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:225
* -Description:                                                                                   *
*    This part is used to set pin funciton.                                                       *
*                                                                                                 *
***************************************************************************************************/
int sf_pad_set_func(u32 index, pad_func func)
{
bc005acc:	27bdffe0 	addiu	sp,sp,-32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:364

		writeb(0, GPIO_DIR(index));
		break;

		default:
		printf("sf_pad_set_func error! index:%d func:%d \n", index, func);
bc005ad0:	2484908c 	addiu	a0,a0,-28532
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:225
* -Description:                                                                                   *
*    This part is used to set pin funciton.                                                       *
*                                                                                                 *
***************************************************************************************************/
int sf_pad_set_func(u32 index, pad_func func)
{
bc005ad4:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:364

		writeb(0, GPIO_DIR(index));
		break;

		default:
		printf("sf_pad_set_func error! index:%d func:%d \n", index, func);
bc005ad8:	0f002379 	jal	bc008de4 <printf>
bc005adc:	00e02821 	move	a1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:370
		return -EINVAL;
		break;
	}

	return 0;
}
bc005ae0:	8fbf001c 	lw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:365
		writeb(0, GPIO_DIR(index));
		break;

		default:
		printf("sf_pad_set_func error! index:%d func:%d \n", index, func);
		return -EINVAL;
bc005ae4:	2402ffea 	li	v0,-22
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:370
		break;
	}

	return 0;
}
bc005ae8:	03e00008 	jr	ra
bc005aec:	27bd0020 	addiu	sp,sp,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:233
	int mod_num = 0;
	int fun_cnt = 0;
	int fun_num = 0;

	if(index > PAD_INDEX_MAX)
		return -EINVAL;
bc005af0:	2402ffea 	li	v0,-22
bc005af4:	03e00008 	jr	ra
bc005af8:	00000000 	nop

bc005afc <sf_pad_set_value>:
sf_pad_set_value():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:380
*    This part is used to set pin output level.                                                   *
*                                                                                                 *
***************************************************************************************************/
int sf_pad_set_value(u32 index, pad_output_level level)
{
	if(index > PAD_INDEX_MAX)
bc005afc:	2c820047 	sltiu	v0,a0,71
bc005b00:	10400008 	beqz	v0,bc005b24 <sf_pad_set_value+0x28>
bc005b04:	30a500ff 	andi	a1,a1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:383
		return -EINVAL;

	writeb(level, GPIO_WDAT(index));
bc005b08:	3c0202e7 	lui	v0,0x2e7
bc005b0c:	24424000 	addiu	v0,v0,16384
bc005b10:	00822021 	addu	a0,a0,v0
bc005b14:	00042180 	sll	a0,a0,0x6
bc005b18:	a0850004 	sb	a1,4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:385

	return 0;
bc005b1c:	03e00008 	jr	ra
bc005b20:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:386
}
bc005b24:	03e00008 	jr	ra
bc005b28:	2402ffea 	li	v0,-22

bc005b2c <sf_pad_get_value>:
sf_pad_get_value():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:401
	u8 tmp;
	int cnt = 0;
	int num = 0;
	int level = 0;

	if(index > PAD_INDEX_MAX)
bc005b2c:	2c830047 	sltiu	v1,a0,71
bc005b30:	1060001f 	beqz	v1,bc005bb0 <sf_pad_get_value+0x84>
bc005b34:	2402ffea 	li	v0,-22
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:404
		return -EINVAL;

	cnt = index / 8;
bc005b38:	000410c2 	srl	v0,a0,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:407
	num = index % 8;

	tmp = readb(PAD_FUCN_SEL(cnt));
bc005b3c:	24030008 	li	v1,8
bc005b40:	10430006 	beq	v0,v1,bc005b5c <sf_pad_get_value+0x30>
bc005b44:	30850007 	andi	a1,a0,0x7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:407 (discriminator 1)
bc005b48:	24423fd8 	addiu	v0,v0,16344
bc005b4c:	00021080 	sll	v0,v0,0x2
bc005b50:	3c03b9e3 	lui	v1,0xb9e3
bc005b54:	0b0016d9 	j	bc005b64 <sf_pad_get_value+0x38>
bc005b58:	00431021 	addu	v0,v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:407
bc005b5c:	3c02b9e3 	lui	v0,0xb9e3
bc005b60:	3442fb60 	ori	v0,v0,0xfb60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:407 (discriminator 3)
bc005b64:	90430000 	lbu	v1,0(v0)
bc005b68:	306300ff 	andi	v1,v1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:408 (discriminator 3)
	if (tmp & (1 << num))
bc005b6c:	00a31807 	srav	v1,v1,a1
bc005b70:	30630001 	andi	v1,v1,0x1
bc005b74:	1060000e 	beqz	v1,bc005bb0 <sf_pad_get_value+0x84>
bc005b78:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:410
	{
		tmp = readb(GPIO_DIR(index));
bc005b7c:	3c0202e7 	lui	v0,0x2e7
bc005b80:	24424000 	addiu	v0,v0,16384
bc005b84:	00822021 	addu	a0,a0,v0
bc005b88:	00042180 	sll	a0,a0,0x6
bc005b8c:	90820008 	lbu	v0,8(a0)
bc005b90:	304200ff 	andi	v0,v0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:411
		if (tmp)
bc005b94:	10400004 	beqz	v0,bc005ba8 <sf_pad_get_value+0x7c>
bc005b98:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:412
			level = readb(GPIO_RDAT(index));
bc005b9c:	90820000 	lbu	v0,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:414
		else
			level = readb(GPIO_WDAT(index));
bc005ba0:	03e00008 	jr	ra
bc005ba4:	304200ff 	andi	v0,v0,0xff
bc005ba8:	90820004 	lbu	v0,4(a0)
bc005bac:	304200ff 	andi	v0,v0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:418
	}

	return level;
}
bc005bb0:	03e00008 	jr	ra
bc005bb4:	00000000 	nop

bc005bb8 <sf_module_set_pad_func>:
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:427
* -Description:                                                                                   *
*    This part is used to set mudule pin funtion.                                                 *
*                                                                                                 *
***************************************************************************************************/
int sf_module_set_pad_func(sf_module module)
{
bc005bb8:	27bdffd0 	addiu	sp,sp,-48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:431
	int index;
	pad_index pad_range;

	if(module == SF_PCM1)
bc005bbc:	2402000c 	li	v0,12
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:427
* -Description:                                                                                   *
*    This part is used to set mudule pin funtion.                                                 *
*                                                                                                 *
***************************************************************************************************/
int sf_module_set_pad_func(sf_module module)
{
bc005bc0:	afbf002c 	sw	ra,44(sp)
bc005bc4:	afb30028 	sw	s3,40(sp)
bc005bc8:	afb20024 	sw	s2,36(sp)
bc005bcc:	afb10020 	sw	s1,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:431
	int index;
	pad_index pad_range;

	if(module == SF_PCM1)
bc005bd0:	1482000f 	bne	a0,v0,bc005c10 <sf_module_set_pad_func+0x58>
bc005bd4:	afb0001c 	sw	s0,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:433
	{
		sf_pad_set_func(22, FUNC1);
bc005bd8:	24040016 	li	a0,22
bc005bdc:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc005be0:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:434
		sf_pad_set_func(23, FUNC1);
bc005be4:	24040017 	li	a0,23
bc005be8:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc005bec:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:435
		sf_pad_set_func(24, FUNC1);
bc005bf0:	24040018 	li	a0,24
bc005bf4:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc005bf8:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:436
		sf_pad_set_func(25, FUNC1);
bc005bfc:	24040019 	li	a0,25
bc005c00:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc005c04:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:437
		sf_pad_set_func(36, FUNC1);
bc005c08:	0b00170b 	j	bc005c2c <sf_module_set_pad_func+0x74>
bc005c0c:	24040024 	li	a0,36
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:439
	}
	else if(module == SF_SPDIF)
bc005c10:	2402000e 	li	v0,14
bc005c14:	54820009 	bnel	a0,v0,bc005c3c <sf_module_set_pad_func+0x84>
bc005c18:	2c820019 	sltiu	v0,a0,25
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:441
	{
		sf_pad_set_func(35, FUNC1);
bc005c1c:	24040023 	li	a0,35
bc005c20:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc005c24:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:442
		sf_pad_set_func(62, FUNC1);
bc005c28:	2404003e 	li	a0,62
bc005c2c:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc005c30:	24050001 	li	a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:455

		for(index = pad_range.low; index <= pad_range.high; index++)
			sf_pad_set_func(index, pad_range.func);
	}

	return 0;
bc005c34:	0b001756 	j	bc005d58 <sf_module_set_pad_func+0x1a0>
bc005c38:	00001021 	move	v0,zero
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:15
*    This part is used to get module pin number.                                                  *
*                                                                                                 *
***************************************************************************************************/
static void module_analysis(sf_module module, pad_index *pi)
{
	switch(module)
bc005c3c:	10400040 	beqz	v0,bc005d40 <sf_module_set_pad_func+0x188>
bc005c40:	00042080 	sll	a0,a0,0x2
bc005c44:	3c02bc01 	lui	v0,0xbc01
bc005c48:	244290d0 	addiu	v0,v0,-28464
bc005c4c:	00442021 	addu	a0,v0,a0
bc005c50:	8c820000 	lw	v0,0(a0)
bc005c54:	00400008 	jr	v0
bc005c58:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:32
		break;

		case SF_I2C1:
		pi->low = 22;
		pi->high = 23;
		pi->func = FUNC0;
bc005c5c:	00009021 	move	s2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:30
		pi->high = 6;
		pi->func = FUNC1;
		break;

		case SF_I2C1:
		pi->low = 22;
bc005c60:	24110016 	li	s1,22
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:31
		pi->high = 23;
bc005c64:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005c68:	24100017 	li	s0,23
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:38
		break;

		case SF_I2C2:
		pi->low = 24;
		pi->high = 25;
		pi->func = FUNC0;
bc005c6c:	00009021 	move	s2,zero
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:36
		pi->high = 23;
		pi->func = FUNC0;
		break;

		case SF_I2C2:
		pi->low = 24;
bc005c70:	0b001720 	j	bc005c80 <sf_module_set_pad_func+0xc8>
bc005c74:	24110018 	li	s1,24
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:50
		//break;

		case SF_UART2:
		pi->low = 22;
		pi->high = 25;
		pi->func = FUNC2;
bc005c78:	24120002 	li	s2,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:48
		//pi->high = 25;
		//pi->func = FUNC1;
		//break;

		case SF_UART2:
		pi->low = 22;
bc005c7c:	24110016 	li	s1,22
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:49
		pi->high = 25;
bc005c80:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005c84:	24100019 	li	s0,25
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:56
		break;

		case SF_I2S0:
		pi->low = 26;
		pi->high = 30;
		pi->func = FUNC0;
bc005c88:	0b001725 	j	bc005c94 <sf_module_set_pad_func+0xdc>
bc005c8c:	00009021 	move	s2,zero
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:62
		break;

		case SF_PCM0:
		pi->low = 26;
		pi->high = 30;
		pi->func = FUNC1;
bc005c90:	24120001 	li	s2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:60
		pi->high = 30;
		pi->func = FUNC0;
		break;

		case SF_PCM0:
		pi->low = 26;
bc005c94:	2411001a 	li	s1,26
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:61
		pi->high = 30;
bc005c98:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005c9c:	2410001e 	li	s0,30
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:68
		break;

		case SF_UART1:
		pi->low = 26;
		pi->high = 30;
		pi->func = FUNC2;
bc005ca0:	0b001725 	j	bc005c94 <sf_module_set_pad_func+0xdc>
bc005ca4:	24120002 	li	s2,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:74
		break;

		case SF_I2S1:
		pi->low = 31;
		pi->high = 35;
		pi->func = FUNC0;
bc005ca8:	0b001731 	j	bc005cc4 <sf_module_set_pad_func+0x10c>
bc005cac:	00009021 	move	s2,zero
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:80
		break;

		case SF_SPI1:
		pi->low = 31;
		pi->high = 34;
		pi->func = FUNC1;
bc005cb0:	24120001 	li	s2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:78
		pi->high = 35;
		pi->func = FUNC0;
		break;

		case SF_SPI1:
		pi->low = 31;
bc005cb4:	2411001f 	li	s1,31
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:79
		pi->high = 34;
bc005cb8:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005cbc:	24100022 	li	s0,34
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:92
		//break;

		case SF_UART3:
		pi->low = 31;
		pi->high = 35;
		pi->func = FUNC2;
bc005cc0:	24120002 	li	s2,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:90
		//pi->high = 35;
		//pi->func = FUNC1;
		//break;

		case SF_UART3:
		pi->low = 31;
bc005cc4:	2411001f 	li	s1,31
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:91
		pi->high = 35;
bc005cc8:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005ccc:	24100023 	li	s0,35
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:98
		break;

		case SF_PWM0:
		pi->low = 36;
		pi->high = 36;
		pi->func = FUNC0;
bc005cd0:	00009021 	move	s2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:96
		pi->high = 35;
		pi->func = FUNC2;
		break;

		case SF_PWM0:
		pi->low = 36;
bc005cd4:	24110024 	li	s1,36
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:97
		pi->high = 36;
bc005cd8:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005cdc:	24100024 	li	s0,36
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:104
		break;

		case SF_RGMII:
		pi->low = 38;
		pi->high = 54;
		pi->func = FUNC0;
bc005ce0:	0b00173b 	j	bc005cec <sf_module_set_pad_func+0x134>
bc005ce4:	00009021 	move	s2,zero
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:110
		break;

		case SF_RMII:
		pi->low = 38;
		pi->high = 54;
		pi->func = FUNC1;
bc005ce8:	24120001 	li	s2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:108
		pi->high = 54;
		pi->func = FUNC0;
		break;

		case SF_RMII:
		pi->low = 38;
bc005cec:	24110026 	li	s1,38
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:109
		pi->high = 54;
bc005cf0:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005cf4:	24100036 	li	s0,54
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:116
		break;

		case SF_ETH_LED:
		pi->low = 55;
		pi->high = 59;
		pi->func = FUNC0;
bc005cf8:	0b001741 	j	bc005d04 <sf_module_set_pad_func+0x14c>
bc005cfc:	00009021 	move	s2,zero
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:122
		break;

		case SF_JTAG:
		pi->low = 55;
		pi->high = 59;
		pi->func = FUNC1;
bc005d00:	24120001 	li	s2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:120
		pi->high = 59;
		pi->func = FUNC0;
		break;

		case SF_JTAG:
		pi->low = 55;
bc005d04:	24110037 	li	s1,55
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:121
		pi->high = 59;
bc005d08:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005d0c:	2410003b 	li	s0,59
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:24
		pi->high = 10;
		pi->func = FUNC0;
		break;

		case SF_SPI0:
		pi->low = 0;
bc005d10:	00008821 	move	s1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:26
		pi->high = 6;
		pi->func = FUNC1;
bc005d14:	24120001 	li	s2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:25
		pi->func = FUNC0;
		break;

		case SF_SPI0:
		pi->low = 0;
		pi->high = 6;
bc005d18:	24100006 	li	s0,6
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:451
		module_analysis(module,&pad_range);

		if (pad_range.high > PAD_INDEX_MAX || pad_range.low > PAD_INDEX_MAX)
			return -EINVAL;

		for(index = pad_range.low; index <= pad_range.high; index++)
bc005d1c:	00009821 	move	s3,zero
bc005d20:	02712021 	addu	a0,s3,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:451 (discriminator 1)
bc005d24:	0204102a 	slt	v0,s0,a0
bc005d28:	1440000b 	bnez	v0,bc005d58 <sf_module_set_pad_func+0x1a0>
bc005d2c:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:452 (discriminator 2)
			sf_pad_set_func(index, pad_range.func);
bc005d30:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc005d34:	02402821 	move	a1,s2
bc005d38:	0b001748 	j	bc005d20 <sf_module_set_pad_func+0x168>
bc005d3c:	26730001 	addiu	s3,s3,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:449
	else
	{
		module_analysis(module,&pad_range);

		if (pad_range.high > PAD_INDEX_MAX || pad_range.low > PAD_INDEX_MAX)
			return -EINVAL;
bc005d40:	0b001756 	j	bc005d58 <sf_module_set_pad_func+0x1a0>
bc005d44:	2402ffea 	li	v0,-22
module_analysis():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:20
	switch(module)
	{
		case SF_EMMC:
		pi->low = 0;
		pi->high = 10;
		pi->func = FUNC0;
bc005d48:	00009021 	move	s2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:18
static void module_analysis(sf_module module, pad_index *pi)
{
	switch(module)
	{
		case SF_EMMC:
		pi->low = 0;
bc005d4c:	00008821 	move	s1,zero
sf_module_set_pad_func():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:19
		pi->high = 10;
bc005d50:	0b001747 	j	bc005d1c <sf_module_set_pad_func+0x164>
bc005d54:	2410000a 	li	s0,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/pad.c:456
		for(index = pad_range.low; index <= pad_range.high; index++)
			sf_pad_set_func(index, pad_range.func);
	}

	return 0;
}
bc005d58:	8fbf002c 	lw	ra,44(sp)
bc005d5c:	8fb30028 	lw	s3,40(sp)
bc005d60:	8fb20024 	lw	s2,36(sp)
bc005d64:	8fb10020 	lw	s1,32(sp)
bc005d68:	8fb0001c 	lw	s0,28(sp)
bc005d6c:	03e00008 	jr	ra
bc005d70:	27bd0030 	addiu	sp,sp,48

bc005d74 <clk_gating_init>:
clk_gating_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:62
}
#endif

int clk_gating_init(void)
{
	writeb(readb(CPU_PLL_CONFIG) | (1 << 4) | (1 << 3), CPU_PLL_CONFIG);
bc005d74:	3c02b9e0 	lui	v0,0xb9e0
bc005d78:	9043101c 	lbu	v1,4124(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:75
	writeb(0xFF, BUS2_XN_CLK_ENABLE);
	writeb(0xFF, BUS3_XN_CLK_ENABLE);
	writeb(0xFF, CPU_CLK_ENABLE);
	writeb(0xFF, PBUS_CLK_ENABLE);
	writeb(0xFF, MEM_PHY_CLK_ENABLE);
	writeb(0x4, MEM_PHY_CLK_DIV);
bc005d7c:	24040004 	li	a0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:62
}
#endif

int clk_gating_init(void)
{
	writeb(readb(CPU_PLL_CONFIG) | (1 << 4) | (1 << 3), CPU_PLL_CONFIG);
bc005d80:	306300ff 	andi	v1,v1,0xff
bc005d84:	34630018 	ori	v1,v1,0x18
bc005d88:	a043101c 	sb	v1,4124(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:63
	writeb(readb(DDR_PLL_CONFIG) | (1 << 4) | (1 << 3), DDR_PLL_CONFIG);
bc005d8c:	9043105c 	lbu	v1,4188(v0)
bc005d90:	306300ff 	andi	v1,v1,0xff
bc005d94:	34630018 	ori	v1,v1,0x18
bc005d98:	a043105c 	sb	v1,4188(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:64
	writeb(readb(CMN_PLL_CONFIG) | (1 << 4) | (1 << 3), CMN_PLL_CONFIG);
bc005d9c:	9043109c 	lbu	v1,4252(v0)
bc005da0:	306300ff 	andi	v1,v1,0xff
bc005da4:	34630018 	ori	v1,v1,0x18
bc005da8:	a043109c 	sb	v1,4252(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:65
	writeb(readb(SPC_PLL_CONFIG) | (1 << 4) | (1 << 3), SPC_PLL_CONFIG);
bc005dac:	904310dc 	lbu	v1,4316(v0)
bc005db0:	306300ff 	andi	v1,v1,0xff
bc005db4:	34630018 	ori	v1,v1,0x18
bc005db8:	a04310dc 	sb	v1,4316(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:69
#ifdef SFA18_CRYSTAL_6M
	clk_use_crystal_6m();
#endif
	writeb(0xFF, BUS1_XN_CLK_ENABLE);
bc005dbc:	2403ffff 	li	v1,-1
bc005dc0:	a043140c 	sb	v1,5132(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:70
	writeb(0xFF, BUS2_XN_CLK_ENABLE);
bc005dc4:	a043142c 	sb	v1,5164(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:71
	writeb(0xFF, BUS3_XN_CLK_ENABLE);
bc005dc8:	a043144c 	sb	v1,5196(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:72
	writeb(0xFF, CPU_CLK_ENABLE);
bc005dcc:	a043150c 	sb	v1,5388(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:73
	writeb(0xFF, PBUS_CLK_ENABLE);
bc005dd0:	a043152c 	sb	v1,5420(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:74
	writeb(0xFF, MEM_PHY_CLK_ENABLE);
bc005dd4:	a043154c 	sb	v1,5452(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:75
	writeb(0x4, MEM_PHY_CLK_DIV);
bc005dd8:	a0441544 	sb	a0,5444(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:93
	writeb(0xFF, NPU_PE_CLK_ENABLE);
	#endif
	writeb(0xFF, ETH_BYP_REF_CLK_ENABLE);
	writeb(0xFF, ETH_TSU_CLK_ENABLE);
	/* set 50MHZ clock of ptp clock */
	writeb(0x1D, ETH_TSU_CLK_DIV);
bc005ddc:	2404001d 	li	a0,29
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:76
	writeb(0xFF, BUS3_XN_CLK_ENABLE);
	writeb(0xFF, CPU_CLK_ENABLE);
	writeb(0xFF, PBUS_CLK_ENABLE);
	writeb(0xFF, MEM_PHY_CLK_ENABLE);
	writeb(0x4, MEM_PHY_CLK_DIV);
	writeb(0xFF, AUDIO_EXTCLK_ENABLE);
bc005de0:	a043156c 	sb	v1,5484(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:77
	writeb(0xFF, UART_EXTCLK_ENABLE);
bc005de4:	a043158c 	sb	v1,5516(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:78
	writeb(0xFF, SPDIF_EXTCLK_ENABLE);
bc005de8:	a04315ac 	sb	v1,5548(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:79
	writeb(0xFF, SDHC_EXT_CLK_ENABLE);
bc005dec:	a04315cc 	sb	v1,5580(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:80
	writeb(0xFF, EMMC_EXT_CLK_ENABLE);
bc005df0:	a04315ec 	sb	v1,5612(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:84
	// writeb(0xFF, GDU0_CLK_ENABLE);
	// writeb(0xFF, GDU0_EITF_CLK_ENABLE);
	// writeb(0xFF, TVIF0_CLK_ENABLE);
	writeb(0xFF, ETH_REF_CLK_ENABLE);
bc005df4:	a043160c 	sb	v1,5644(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:85
	writeb(0xFF, ETH_BYP_REF_CLK_ENABLE);
bc005df8:	a043162c 	sb	v1,5676(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:86
	writeb(0xFF, ETH_TSU_CLK_ENABLE);
bc005dfc:	a043164c 	sb	v1,5708(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:88
	#ifndef MPW0
	writeb(0xFF, NPU_PE_CLK_ENABLE);
bc005e00:	a043174c 	sb	v1,5964(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:90
	#endif
	writeb(0xFF, ETH_BYP_REF_CLK_ENABLE);
bc005e04:	a043162c 	sb	v1,5676(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:91
	writeb(0xFF, ETH_TSU_CLK_ENABLE);
bc005e08:	a043164c 	sb	v1,5708(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:93
	/* set 50MHZ clock of ptp clock */
	writeb(0x1D, ETH_TSU_CLK_DIV);
bc005e0c:	a0441644 	sb	a0,5700(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:98
	#ifdef ENH_EXT_OMINI_PHY
	/* for ext phy only support which need 50MHZ clock */
	writeb(0x1D, ETH_BYP_REF_CLK_DIV);
	#endif
	writeb(0xFF, WLAN24_MAC_WT_CLK_ENABLE);
bc005e10:	a04316cc 	sb	v1,5836(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:99
	writeb(0xFF, WLAN5_MAC_WT_CLK_ENABLE);
bc005e14:	a04316ec 	sb	v1,5868(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:100
	writeb(0xFF, USBPHY_REF_CLK_ENABLE);
bc005e18:	a043170c 	sb	v1,5900(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:102
	/* close tclk to avoid clk output in GPIO62. */
	writeb(0x00, TCLK_ENABLE);
bc005e1c:	a040172c 	sb	zero,5932(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:103
	writeb(0xFF, CRYPTO_CLK_ENABLE);
bc005e20:	a04317cc 	sb	v1,6092(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:106

	return 0;
}
bc005e24:	03e00008 	jr	ra
bc005e28:	00001021 	move	v0,zero

bc005e2c <clk_update>:
clk_update():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:117
	int ratio;
	int enable;
};

int clk_update(void)
{
bc005e2c:	27bdffa0 	addiu	sp,sp,-96
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:120
	int i;
#ifdef FULLMASK
	struct clk_info clk[] = {
bc005e30:	3c05bc01 	lui	a1,0xbc01
bc005e34:	27a40018 	addiu	a0,sp,24
bc005e38:	24a58f10 	addiu	a1,a1,-28912
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:117
	int ratio;
	int enable;
};

int clk_update(void)
{
bc005e3c:	afbf005c 	sw	ra,92(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:120
	int i;
#ifdef FULLMASK
	struct clk_info clk[] = {
bc005e40:	0f00113c 	jal	bc0044f0 <memcpy>
bc005e44:	24060040 	li	a2,64
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:141
	};
#endif

	for (i = 0; clk[i].offset != -1; i++) {
		if (clk[i].enable) {
			writel(clk[i].ratio, CLK_BASE
bc005e48:	3c03b9e0 	lui	v1,0xb9e0
bc005e4c:	27a20018 	addiu	v0,sp,24
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:139
		{ 29, 2, 4, 1 }, /* TVIF_CLK */
		{ -1, -1, -1, -1 },
	};
#endif

	for (i = 0; clk[i].offset != -1; i++) {
bc005e50:	2404ffff 	li	a0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:141
		if (clk[i].enable) {
			writel(clk[i].ratio, CLK_BASE
bc005e54:	24651404 	addiu	a1,v1,5124
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:144
						+ clk[i].offset * CLK_OFFSET
						+ CLK_REG_WID);
			writel(clk[i].src, CLK_BASE + clk[i].offset * CLK_OFFSET);
bc005e58:	24661400 	addiu	a2,v1,5120
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:139 (discriminator 1)
		{ 29, 2, 4, 1 }, /* TVIF_CLK */
		{ -1, -1, -1, -1 },
	};
#endif

	for (i = 0; clk[i].offset != -1; i++) {
bc005e5c:	8c430000 	lw	v1,0(v0)
bc005e60:	1064000d 	beq	v1,a0,bc005e98 <clk_update+0x6c>
bc005e64:	8fbf005c 	lw	ra,92(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:140
		if (clk[i].enable) {
bc005e68:	8c47000c 	lw	a3,12(v0)
bc005e6c:	50e0fffb 	beqzl	a3,bc005e5c <clk_update+0x30>
bc005e70:	24420010 	addiu	v0,v0,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:141
			writel(clk[i].ratio, CLK_BASE
bc005e74:	8c480008 	lw	t0,8(v0)
bc005e78:	00031940 	sll	v1,v1,0x5
bc005e7c:	00653821 	addu	a3,v1,a1
bc005e80:	ace80000 	sw	t0,0(a3)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:144
						+ clk[i].offset * CLK_OFFSET
						+ CLK_REG_WID);
			writel(clk[i].src, CLK_BASE + clk[i].offset * CLK_OFFSET);
bc005e84:	8c470004 	lw	a3,4(v0)
bc005e88:	00661821 	addu	v1,v1,a2
bc005e8c:	ac670000 	sw	a3,0(v1)
bc005e90:	0b001797 	j	bc005e5c <clk_update+0x30>
bc005e94:	24420010 	addiu	v0,v0,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/clk.c:175
	/* switch cpu clk back to cpu pll */
	writeb(0, CPU_CLK_CONFIG);
	writeb(1, CPU_CLK_DIV); /* 1:2 */
#endif /* FULLMASK */
	return 0;
}
bc005e98:	00001021 	move	v0,zero
bc005e9c:	03e00008 	jr	ra
bc005ea0:	27bd0060 	addiu	sp,sp,96

bc005ea4 <ddr_test>:
ddr_test():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:192
	#ifdef DDR2
	u32 ddr_size_mask = 0x7fffff0;
	#else
	u32 ddr_size_mask = 0xffffff0;
	#endif
	printf("ddr test\n");
bc005ea4:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:184
{
	return 0;
}

void ddr_test(void)
{
bc005ea8:	27bdffd8 	addiu	sp,sp,-40
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:192
	#ifdef DDR2
	u32 ddr_size_mask = 0x7fffff0;
	#else
	u32 ddr_size_mask = 0xffffff0;
	#endif
	printf("ddr test\n");
bc005eac:	24849134 	addiu	a0,a0,-28364
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:184
{
	return 0;
}

void ddr_test(void)
{
bc005eb0:	afbf0024 	sw	ra,36(sp)
bc005eb4:	afb0001c 	sw	s0,28(sp)
bc005eb8:	afb10020 	sw	s1,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:192
	#ifdef DDR2
	u32 ddr_size_mask = 0x7fffff0;
	#else
	u32 ddr_size_mask = 0xffffff0;
	#endif
	printf("ddr test\n");
bc005ebc:	0f00239b 	jal	bc008e6c <puts>
bc005ec0:	3c10a000 	lui	s0,0xa000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:195

	addr = base + (rand() & ddr_size_mask);
	*(volatile u8*)addr = 0x55;
bc005ec4:	24020055 	li	v0,85
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:196
	printf("DR1BW %p OK\n", addr);
bc005ec8:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:195
	u32 ddr_size_mask = 0xffffff0;
	#endif
	printf("ddr test\n");

	addr = base + (rand() & ddr_size_mask);
	*(volatile u8*)addr = 0x55;
bc005ecc:	a2020000 	sb	v0,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:196
	printf("DR1BW %p OK\n", addr);
bc005ed0:	24849140 	addiu	a0,a0,-28352
bc005ed4:	0f002379 	jal	bc008de4 <printf>
bc005ed8:	3c05a000 	lui	a1,0xa000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:201

	//print_umctl2_log();
	//print_phy_log();

	if(*(volatile u8*)addr != 0x55) {
bc005edc:	92030000 	lbu	v1,0(s0)
bc005ee0:	24020055 	li	v0,85
bc005ee4:	306300ff 	andi	v1,v1,0xff
bc005ee8:	10620003 	beq	v1,v0,bc005ef8 <ddr_test+0x54>
bc005eec:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:202
		printf("DR1BR FAIL\n");
bc005ef0:	0b0017c0 	j	bc005f00 <ddr_test+0x5c>
bc005ef4:	24849150 	addiu	a0,a0,-28336
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:206
		//hang();
	}
	else
		printf("DR1BR OK\n");
bc005ef8:	3c04bc01 	lui	a0,0xbc01
bc005efc:	2484915c 	addiu	a0,a0,-28324
bc005f00:	0f00239b 	jal	bc008e6c <puts>
bc005f04:	3c10a000 	lui	s0,0xa000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:209

	addr = base + (rand() & ddr_size_mask);
	*(volatile u16*)addr = 0xaaaa;
bc005f08:	2402aaaa 	li	v0,-21846
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:210
	printf("DR2BW %p OK\n", addr);
bc005f0c:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:209
	}
	else
		printf("DR1BR OK\n");

	addr = base + (rand() & ddr_size_mask);
	*(volatile u16*)addr = 0xaaaa;
bc005f10:	a6020000 	sh	v0,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:210
	printf("DR2BW %p OK\n", addr);
bc005f14:	24849168 	addiu	a0,a0,-28312
bc005f18:	0f002379 	jal	bc008de4 <printf>
bc005f1c:	3c05a000 	lui	a1,0xa000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:212

	if(*(volatile u16*)addr != 0xaaaa) {
bc005f20:	96030000 	lhu	v1,0(s0)
bc005f24:	3402aaaa 	li	v0,0xaaaa
bc005f28:	3063ffff 	andi	v1,v1,0xffff
bc005f2c:	10620003 	beq	v1,v0,bc005f3c <ddr_test+0x98>
bc005f30:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:213
		printf("DR2BR FAIL\n");
bc005f34:	0b0017d1 	j	bc005f44 <ddr_test+0xa0>
bc005f38:	24849178 	addiu	a0,a0,-28296
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:217
		//hang();
	}
	else
		printf("DR2BR OK\n");
bc005f3c:	3c04bc01 	lui	a0,0xbc01
bc005f40:	24849184 	addiu	a0,a0,-28284
bc005f44:	0f00239b 	jal	bc008e6c <puts>
bc005f48:	3c10aaaa 	lui	s0,0xaaaa
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:220

	addr = base + (rand() & ddr_size_mask);
	*(volatile u32*)addr = 0xaaaa5555;
bc005f4c:	3c11a000 	lui	s1,0xa000
bc005f50:	26105555 	addiu	s0,s0,21845
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:221
	printf("DR4BW %p OK\n", addr);
bc005f54:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:220
	}
	else
		printf("DR2BR OK\n");

	addr = base + (rand() & ddr_size_mask);
	*(volatile u32*)addr = 0xaaaa5555;
bc005f58:	ae300000 	sw	s0,0(s1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:221
	printf("DR4BW %p OK\n", addr);
bc005f5c:	24849190 	addiu	a0,a0,-28272
bc005f60:	0f002379 	jal	bc008de4 <printf>
bc005f64:	3c05a000 	lui	a1,0xa000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:223

	if(*(volatile u32*)addr != 0xaaaa5555) {
bc005f68:	8e220000 	lw	v0,0(s1)
bc005f6c:	10500003 	beq	v0,s0,bc005f7c <ddr_test+0xd8>
bc005f70:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:224
		printf("DR4BR FAIL\n");
bc005f74:	0b0017e1 	j	bc005f84 <ddr_test+0xe0>
bc005f78:	248491a0 	addiu	a0,a0,-28256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:228
		//hang();
	}
	else
		printf("DR4BR OK\n");
bc005f7c:	3c04bc01 	lui	a0,0xbc01
bc005f80:	248491ac 	addiu	a0,a0,-28244
bc005f84:	0f00239b 	jal	bc008e6c <puts>
bc005f88:	3c10a000 	lui	s0,0xa000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:231

	addr = base + (rand() & ddr_size_mask);
	*(volatile u64*)addr = 0xaaaa55555555aaaa;
bc005f8c:	3c025555 	lui	v0,0x5555
bc005f90:	3c03aaaa 	lui	v1,0xaaaa
bc005f94:	34635555 	ori	v1,v1,0x5555
bc005f98:	3442aaaa 	ori	v0,v0,0xaaaa
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:232
	printf("DR8BW %p OK\n", addr);
bc005f9c:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:231
	}
	else
		printf("DR4BR OK\n");

	addr = base + (rand() & ddr_size_mask);
	*(volatile u64*)addr = 0xaaaa55555555aaaa;
bc005fa0:	ae020000 	sw	v0,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:232
	printf("DR8BW %p OK\n", addr);
bc005fa4:	248491b8 	addiu	a0,a0,-28232
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:231
	}
	else
		printf("DR4BR OK\n");

	addr = base + (rand() & ddr_size_mask);
	*(volatile u64*)addr = 0xaaaa55555555aaaa;
bc005fa8:	ae030004 	sw	v1,4(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:232
	printf("DR8BW %p OK\n", addr);
bc005fac:	0f002379 	jal	bc008de4 <printf>
bc005fb0:	3c05a000 	lui	a1,0xa000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:234

	if(*(volatile u64*)addr != 0xaaaa55555555aaaa) {
bc005fb4:	8e020000 	lw	v0,0(s0)
bc005fb8:	3c045555 	lui	a0,0x5555
bc005fbc:	3484aaaa 	ori	a0,a0,0xaaaa
bc005fc0:	8e030004 	lw	v1,4(s0)
bc005fc4:	14440005 	bne	v0,a0,bc005fdc <ddr_test+0x138>
bc005fc8:	3c04bc01 	lui	a0,0xbc01
bc005fcc:	3c02aaaa 	lui	v0,0xaaaa
bc005fd0:	24425555 	addiu	v0,v0,21845
bc005fd4:	50620003 	beql	v1,v0,bc005fe4 <ddr_test+0x140>
bc005fd8:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:235
		printf("DR8BR FAIL\n");
bc005fdc:	0b0017fa 	j	bc005fe8 <ddr_test+0x144>
bc005fe0:	248491c8 	addiu	a0,a0,-28216
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:239
		//hang();
	}
	else
		printf("DR8BR OK\n");
bc005fe4:	248491d4 	addiu	a0,a0,-28204
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:240
}
bc005fe8:	8fbf0024 	lw	ra,36(sp)
bc005fec:	8fb10020 	lw	s1,32(sp)
bc005ff0:	8fb0001c 	lw	s0,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:239
	if(*(volatile u64*)addr != 0xaaaa55555555aaaa) {
		printf("DR8BR FAIL\n");
		//hang();
	}
	else
		printf("DR8BR OK\n");
bc005ff4:	0b00239b 	j	bc008e6c <puts>
bc005ff8:	27bd0028 	addiu	sp,sp,40

bc005ffc <ddr_init>:
ddr_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:243
}

void ddr_init(void)
{
bc005ffc:	27bdffc8 	addiu	sp,sp,-56
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:262
			.bl = 8,
			.bank = 8,
	};
	printf("ddr2 %s init start %dmhz\n", DDR_MODEL, ddr.freq);
#else
	struct ddr_info ddr = {
bc006000:	24020100 	li	v0,256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:269
			/* This is DDR3 */
			.freq = 400,
			.bl = 8,
			.bank = 8,
	};
	printf("ddr3 %s init start\n", DDR_MODEL);
bc006004:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:262
			.bl = 8,
			.bank = 8,
	};
	printf("ddr2 %s init start %dmhz\n", DDR_MODEL, ddr.freq);
#else
	struct ddr_info ddr = {
bc006008:	a7a20018 	sh	v0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:269
			/* This is DDR3 */
			.freq = 400,
			.bl = 8,
			.bank = 8,
	};
	printf("ddr3 %s init start\n", DDR_MODEL);
bc00600c:	3c05bc01 	lui	a1,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:262
			.bl = 8,
			.bank = 8,
	};
	printf("ddr2 %s init start %dmhz\n", DDR_MODEL, ddr.freq);
#else
	struct ddr_info ddr = {
bc006010:	24020190 	li	v0,400
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:269
			/* This is DDR3 */
			.freq = 400,
			.bl = 8,
			.bank = 8,
	};
	printf("ddr3 %s init start\n", DDR_MODEL);
bc006014:	24a591f4 	addiu	a1,a1,-28172
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:262
			.bl = 8,
			.bank = 8,
	};
	printf("ddr2 %s init start %dmhz\n", DDR_MODEL, ddr.freq);
#else
	struct ddr_info ddr = {
bc006018:	a7a2001a 	sh	v0,26(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:269
			/* This is DDR3 */
			.freq = 400,
			.bl = 8,
			.bank = 8,
	};
	printf("ddr3 %s init start\n", DDR_MODEL);
bc00601c:	248491e0 	addiu	a0,a0,-28192
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:262
			.bl = 8,
			.bank = 8,
	};
	printf("ddr2 %s init start %dmhz\n", DDR_MODEL, ddr.freq);
#else
	struct ddr_info ddr = {
bc006020:	24020008 	li	v0,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:243
	else
		printf("DR8BR OK\n");
}

void ddr_init(void)
{
bc006024:	afbf0034 	sw	ra,52(sp)
bc006028:	afb20030 	sw	s2,48(sp)
bc00602c:	afb1002c 	sw	s1,44(sp)
bc006030:	afb00028 	sw	s0,40(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:262
			.bl = 8,
			.bank = 8,
	};
	printf("ddr2 %s init start %dmhz\n", DDR_MODEL, ddr.freq);
#else
	struct ddr_info ddr = {
bc006034:	afa0001c 	sw	zero,28(sp)
bc006038:	afa00020 	sw	zero,32(sp)
bc00603c:	a3a2001c 	sb	v0,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:269
			/* This is DDR3 */
			.freq = 400,
			.bl = 8,
			.bank = 8,
	};
	printf("ddr3 %s init start\n", DDR_MODEL);
bc006040:	0f002379 	jal	bc008de4 <printf>
bc006044:	a3a2001d 	sb	v0,29(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:276

	// set ddr clock
#ifdef MPW0
	set_pll_ratio(240, 1, 1);
#else
	set_ddr_clock(ddr.freq);
bc006048:	97a4001a 	lhu	a0,26(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:282
#endif

	ddr_set_timing(&ddr);

	// assert presetn, core_ddrc_rstn, aresetn
	writew(0x1, (void *)CPU_RESET);  // notice: set bit[1:1] to 0
bc00604c:	3c10b9e0 	lui	s0,0xb9e0
bc006050:	24110001 	li	s1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:276

	// set ddr clock
#ifdef MPW0
	set_pll_ratio(240, 1, 1);
#else
	set_ddr_clock(ddr.freq);
bc006054:	0f001abf 	jal	bc006afc <set_ddr_clock>
bc006058:	24120003 	li	s2,3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:279
#endif

	ddr_set_timing(&ddr);
bc00605c:	0f001ae1 	jal	bc006b84 <ddr_set_timing>
bc006060:	27a40018 	addiu	a0,sp,24
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:282

	// assert presetn, core_ddrc_rstn, aresetn
	writew(0x1, (void *)CPU_RESET);  // notice: set bit[1:1] to 0
bc006064:	a6112dcc 	sh	s1,11724(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:292
	writew(0x1, (void *)PBUS_RESET); // notice: set bit[1:1] to 0

	// deassert presetn
	writew(0x3, (void *)PBUS_RESET); // notice: set bit[1:1] to 1

	set_umctl2_reg(&ddr);
bc006068:	27a40018 	addiu	a0,sp,24
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:283

	ddr_set_timing(&ddr);

	// assert presetn, core_ddrc_rstn, aresetn
	writew(0x1, (void *)CPU_RESET);  // notice: set bit[1:1] to 0
	writew(0x0, (void *)BUS1_RESET);	 // reset port 1
bc00606c:	a6002dd0 	sh	zero,11728(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:284
	writew(0x0, (void *)BUS2_RESET);	 // reset port 2
bc006070:	a6002dd4 	sh	zero,11732(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:285
	writew(0x0, (void *)BUS3_RESET);	 // reset port 3
bc006074:	a6002dd8 	sh	zero,11736(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:286
	writew(0x0, (void *)MEM_RESET);  // notice: set bit[1:0] to 0
bc006078:	a6002dc8 	sh	zero,11720(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:287
	writew(0x1, (void *)PBUS_RESET); // notice: set bit[1:1] to 0
bc00607c:	a6112dc4 	sh	s1,11716(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:290

	// deassert presetn
	writew(0x3, (void *)PBUS_RESET); // notice: set bit[1:1] to 1
bc006080:	a6122dc4 	sh	s2,11716(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:292

	set_umctl2_reg(&ddr);
bc006084:	0f00183b 	jal	bc0060ec <set_umctl2_reg>
bc006088:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:294
	// deassert core_ddrc_rstn
	writew(0x1, (void *)MEM_RESET); // notice: set bit[1:0] to 3
bc00608c:	a6112dc8 	sh	s1,11720(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:303
	writew(0x1, (void *)BUS3_RESET);	// reset port 3

#ifdef DDR_BIST
	bist();
#endif
	ddr_phy_init(&ddr);
bc006090:	27a40018 	addiu	a0,sp,24
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:295
	writew(0x3, (void *)PBUS_RESET); // notice: set bit[1:1] to 1

	set_umctl2_reg(&ddr);
	// deassert core_ddrc_rstn
	writew(0x1, (void *)MEM_RESET); // notice: set bit[1:0] to 3
	writew(0x3, (void *)CPU_RESET); // notice: set bit[1:1] to 1
bc006094:	a6122dcc 	sh	s2,11724(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:296
	writew(0x1, (void *)BUS1_RESET);	// reset port 1
bc006098:	a6112dd0 	sh	s1,11728(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:297
	writew(0x1, (void *)BUS2_RESET);	// reset port 2
bc00609c:	a6112dd4 	sh	s1,11732(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:298
	writew(0x1, (void *)BUS3_RESET);	// reset port 3
bc0060a0:	a6112dd8 	sh	s1,11736(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:303

#ifdef DDR_BIST
	bist();
#endif
	ddr_phy_init(&ddr);
bc0060a4:	0f00198a 	jal	bc006628 <ddr_phy_init>
bc0060a8:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:314
	// wait for delay line calibration done
	while ((readl((void *)DDR_PHY_PGSR0) & 0xf) != 0xf)
		;
#endif

	umctl2_init_ddr();
bc0060ac:	0f001a4b 	jal	bc00692c <umctl2_init_ddr>
bc0060b0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:316

	ddr_training();
bc0060b4:	0f001a5b 	jal	bc00696c <ddr_training>
bc0060b8:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:317
	printf("now ddr frequency is %dMHz!!!\n", ddr.freq);
bc0060bc:	97a5001a 	lhu	a1,26(sp)
bc0060c0:	3c04bc01 	lui	a0,0xbc01
bc0060c4:	0f002379 	jal	bc008de4 <printf>
bc0060c8:	2484921c 	addiu	a0,a0,-28132
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:321
	// print_umctl2_log();
	// print_phy_log();

	ddr_test();
bc0060cc:	0f0017a9 	jal	bc005ea4 <ddr_test>
bc0060d0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_init.c:322
}
bc0060d4:	8fbf0034 	lw	ra,52(sp)
bc0060d8:	8fb20030 	lw	s2,48(sp)
bc0060dc:	8fb1002c 	lw	s1,44(sp)
bc0060e0:	8fb00028 	lw	s0,40(sp)
bc0060e4:	03e00008 	jr	ra
bc0060e8:	27bd0038 	addiu	sp,sp,56

bc0060ec <set_umctl2_reg>:
set_quasi_dynamic_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:28
}

static inline void set_quasi_dynamic_reg(u32 value, u32 addr)
{
	// set sw_done = 0
	writel(0x0, (void *)DDR_UMCTL2_SWCTL);
bc0060ec:	3c03b9f0 	lui	v1,0xb9f0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:32
	/* config register */
	writel(value, (void *)addr);
	// set sw_done = 1
	writel(0x1, (void *)DDR_UMCTL2_SWCTL);
bc0060f0:	24050001 	li	a1,1
set_umctl2_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:40
		;
}

void set_umctl2_reg(struct ddr_info *ddr)
{
	struct ddr_timing *t = ddr->timing;
bc0060f4:	8c820008 	lw	v0,8(a0)
set_quasi_dynamic_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:28
}

static inline void set_quasi_dynamic_reg(u32 value, u32 addr)
{
	// set sw_done = 0
	writel(0x0, (void *)DDR_UMCTL2_SWCTL);
bc0060f8:	ac600320 	sw	zero,800(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:30
	/* config register */
	writel(value, (void *)addr);
bc0060fc:	ac6001b0 	sw	zero,432(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:32
	// set sw_done = 1
	writel(0x1, (void *)DDR_UMCTL2_SWCTL);
bc006100:	ac650320 	sw	a1,800(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:34
	// wait for sw_done_ack = 1
	while (!(readl((void *)DDR_UMCTL2_SWSTAT)))
bc006104:	3c03b9f0 	lui	v1,0xb9f0
bc006108:	8c650324 	lw	a1,804(v1)
bc00610c:	10a0fffe 	beqz	a1,bc006108 <set_umctl2_reg+0x1c>
bc006110:	00000000 	nop
set_umctl2_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:45
	struct ddr_timing *t = ddr->timing;
	u32 tmp = 0;

	set_quasi_dynamic_reg(0x0, DDR_UMCTL2_DFIMISC);

	tmp = (ddr->bl / 2) << 16;
bc006114:	90850004 	lbu	a1,4(a0)
bc006118:	00052842 	srl	a1,a1,0x1
bc00611c:	00052c00 	sll	a1,a1,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:47
	#ifndef DDR2
		tmp |= BIT(0);
bc006120:	34a50001 	ori	a1,a1,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:49
	#endif
	writel(tmp, (void *)DDR_UMCTL2_MSTR);
bc006124:	ac650000 	sw	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:56
	// disable hardware low power function
	writel(0, (void *)DDR_UMCTL2_HWLPCTL);

	// set selfref_to_x32 = 0x40, powerdown_to_x32 = 0x10
	tmp = (0x40 << 16) | (0x10);
	writel(tmp, (void *)DDR_UMCTL2_PWRTMG);
bc006128:	3c050040 	lui	a1,0x40
bc00612c:	24a50010 	addiu	a1,a1,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:52
		tmp |= BIT(0);
	#endif
	writel(tmp, (void *)DDR_UMCTL2_MSTR);

	// disable hardware low power function
	writel(0, (void *)DDR_UMCTL2_HWLPCTL);
bc006130:	ac600038 	sw	zero,56(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:56

	// set selfref_to_x32 = 0x40, powerdown_to_x32 = 0x10
	tmp = (0x40 << 16) | (0x10);
	writel(tmp, (void *)DDR_UMCTL2_PWRTMG);
bc006134:	ac650034 	sw	a1,52(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:60

	// refresh burst = 8
	tmp = (0x2 << 20) | (0x10 << 12) | (7 << 4);
	writel(tmp, (void *)DDR_UMCTL2_RFSHCTL0);
bc006138:	3c050021 	lui	a1,0x21
bc00613c:	24a50070 	addiu	a1,a1,112
bc006140:	ac650050 	sw	a1,80(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:62

	tmp = ((t->trefi / 2 / 32) << 16) | (tck_to_uctl2(t->trfc) << 0);
bc006144:	8c460038 	lw	a2,56(v0)
bc006148:	8c450028 	lw	a1,40(v0)
bc00614c:	24c60001 	addiu	a2,a2,1
bc006150:	00052982 	srl	a1,a1,0x6
bc006154:	00063042 	srl	a2,a2,0x1
bc006158:	00052c00 	sll	a1,a1,0x10
bc00615c:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:63
	writel(tmp, (void *)DDR_UMCTL2_RFSHTMG);
bc006160:	ac650064 	sw	a1,100(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:68

	#ifdef DDR2
	tmp = (2 << 16) | (tck_to_x1024(us_to_tck(240)) << 0);
	#else
	tmp = (tck_to_x1024(t->txpr) << 16) | (tck_to_x1024(us_to_tck(500)) << 0);
bc006164:	8c450000 	lw	a1,0(v0)
bc006168:	3c061dcd 	lui	a2,0x1dcd
bc00616c:	24c664ff 	addiu	a2,a2,25855
bc006170:	00a63021 	addu	a2,a1,a2
bc006174:	00c5001b 	divu	zero,a2,a1
bc006178:	00a001f4 	teq	a1,zero,0x7
bc00617c:	8c45006c 	lw	a1,108(v0)
bc006180:	24a503ff 	addiu	a1,a1,1023
bc006184:	00052a82 	srl	a1,a1,0xa
bc006188:	24a50001 	addiu	a1,a1,1
bc00618c:	00052842 	srl	a1,a1,0x1
bc006190:	00052c00 	sll	a1,a1,0x10
bc006194:	00003012 	mflo	a2
bc006198:	24c603ff 	addiu	a2,a2,1023
bc00619c:	00063282 	srl	a2,a2,0xa
bc0061a0:	24c60001 	addiu	a2,a2,1
bc0061a4:	00063042 	srl	a2,a2,0x1
bc0061a8:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:70
	#endif
	writel(tmp, (void *)DDR_UMCTL2_INIT0);
bc0061ac:	ac6500d0 	sw	a1,208(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:73

	// TODO: whether should be set to 1?
	tmp = (tck_to_x1024(us_to_tck(200)) << 16); // if need to be divided by 2?
bc0061b0:	8c450000 	lw	a1,0(v0)
bc0061b4:	3c060beb 	lui	a2,0xbeb
bc0061b8:	34c6c1ff 	ori	a2,a2,0xc1ff
bc0061bc:	00a63021 	addu	a2,a1,a2
bc0061c0:	00c5001b 	divu	zero,a2,a1
bc0061c4:	00a001f4 	teq	a1,zero,0x7
bc0061c8:	00002812 	mflo	a1
bc0061cc:	24a503ff 	addiu	a1,a1,1023
bc0061d0:	00052a82 	srl	a1,a1,0xa
bc0061d4:	24a50001 	addiu	a1,a1,1
bc0061d8:	00052842 	srl	a1,a1,0x1
bc0061dc:	00052c00 	sll	a1,a1,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:74
	writel(tmp, (void *)DDR_UMCTL2_INIT1);
bc0061e0:	ac6500d4 	sw	a1,212(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:86
	t->mr[1] = (t->al << 3);
	#else
	t->mr[1] = (t->al << 3) | BIT(6);
	#endif
#else
	if (t->twr > 8)
bc0061e4:	8c430034 	lw	v1,52(v0)
bc0061e8:	2c650009 	sltiu	a1,v1,9
bc0061ec:	54a00002 	bnezl	a1,bc0061f8 <set_umctl2_reg+0x10c>
bc0061f0:	2463fffc 	addiu	v1,v1,-4
bc0061f4:	7c631040 	ext	v1,v1,0x1,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:89
		t->mr[0] = ((t->twr / 2) & 0x7) << 9;
	else
		t->mr[0] = (t->twr - 4) << 9;
bc0061f8:	00031a40 	sll	v1,v1,0x9
bc0061fc:	ac430004 	sw	v1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:91

	if (t->cl < 12)
bc006200:	8c430014 	lw	v1,20(v0)
bc006204:	2c66000c 	sltiu	a2,v1,12
bc006208:	10c00005 	beqz	a2,bc006220 <set_umctl2_reg+0x134>
bc00620c:	8c450004 	lw	a1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:92
		t->mr[0] |= (t->cl - 4) << 4;
bc006210:	2463fffc 	addiu	v1,v1,-4
bc006214:	00031900 	sll	v1,v1,0x4
bc006218:	0b001890 	j	bc006240 <set_umctl2_reg+0x154>
bc00621c:	00a32825 	or	a1,a1,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:93
	else if (t->cl == 12)
bc006220:	2406000c 	li	a2,12
bc006224:	14660003 	bne	v1,a2,bc006234 <set_umctl2_reg+0x148>
bc006228:	2406000d 	li	a2,13
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:94
		t->mr[0] |= BIT(2);
bc00622c:	0b001890 	j	bc006240 <set_umctl2_reg+0x154>
bc006230:	34a50004 	ori	a1,a1,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:95
	else if (t->cl == 13)
bc006234:	54660004 	bnel	v1,a2,bc006248 <set_umctl2_reg+0x15c>
bc006238:	8c430004 	lw	v1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:96
		t->mr[0] |= BIT(2) | BIT(4);
bc00623c:	34a50014 	ori	a1,a1,0x14
bc006240:	ac450004 	sw	a1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:97
	t->mr[0] |= BIT(8);
bc006244:	8c430004 	lw	v1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:103
	if ((t->cl - t->al) < 3)
		t->mr[1] = (t->cl - t->al) << 3;
	#ifdef DDR_DISABLE_ODT
	t->mr[1] = 0;
	#else
	t->mr[1] = BIT(2) | BIT(6);
bc006248:	24050044 	li	a1,68
bc00624c:	ac450008 	sw	a1,8(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:97
		t->mr[0] |= (t->cl - 4) << 4;
	else if (t->cl == 12)
		t->mr[0] |= BIT(2);
	else if (t->cl == 13)
		t->mr[0] |= BIT(2) | BIT(4);
	t->mr[0] |= BIT(8);
bc006250:	34630100 	ori	v1,v1,0x100
bc006254:	ac430004 	sw	v1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:106
	t->mr[1] = 0;
	#else
	t->mr[1] = BIT(2) | BIT(6);
	#endif
#endif
	writel((t->mr[0] << 16) | t->mr[1], (void *)DDR_UMCTL2_INIT3);
bc006258:	00031c00 	sll	v1,v1,0x10
bc00625c:	34650044 	ori	a1,v1,0x44
bc006260:	3c03b9f0 	lui	v1,0xb9f0
bc006264:	ac6500dc 	sw	a1,220(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:111

#ifdef DDR2
	t->mr[2] = t->mr[3] = 0;
#else
	t->mr[2] = ((t->cwl - 5) << 3) | BIT(6);
bc006268:	8c45001c 	lw	a1,28(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:113
	// t->mr[2] |= BIT(9);
	t->mr[3] = 0;
bc00626c:	ac400010 	sw	zero,16(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:111
	writel((t->mr[0] << 16) | t->mr[1], (void *)DDR_UMCTL2_INIT3);

#ifdef DDR2
	t->mr[2] = t->mr[3] = 0;
#else
	t->mr[2] = ((t->cwl - 5) << 3) | BIT(6);
bc006270:	24a5fffb 	addiu	a1,a1,-5
bc006274:	000528c0 	sll	a1,a1,0x3
bc006278:	34a50040 	ori	a1,a1,0x40
bc00627c:	ac45000c 	sw	a1,12(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:115
	// t->mr[2] |= BIT(9);
	t->mr[3] = 0;
#endif
	writel((t->mr[2] << 16) | t->mr[3], (void *)DDR_UMCTL2_INIT4);
bc006280:	00052c00 	sll	a1,a1,0x10
bc006284:	ac6500e0 	sw	a1,224(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:117

	tmp = DIV_ROUND_UP(t->tzqinit, 32) << 16;
bc006288:	8c450074 	lw	a1,116(v0)
bc00628c:	24a5001f 	addiu	a1,a1,31
bc006290:	00052942 	srl	a1,a1,0x5
bc006294:	00052c00 	sll	a1,a1,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:118
	writel(tmp, (void *)DDR_UMCTL2_INIT5);
bc006298:	ac6500e4 	sw	a1,228(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:121

	tmp = (((t->wl + (ddr->bl / 2) + t->twr) / 2) << 24) |
	      (tck_to_uctl2(t->tfaw) << 16) |
bc00629c:	8c46002c 	lw	a2,44(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:122
	      (((t->tras_max - 1) / 2 / 1024) << 8) |
bc0062a0:	8c450048 	lw	a1,72(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:120
	writel((t->mr[2] << 16) | t->mr[3], (void *)DDR_UMCTL2_INIT4);

	tmp = DIV_ROUND_UP(t->tzqinit, 32) << 16;
	writel(tmp, (void *)DDR_UMCTL2_INIT5);

	tmp = (((t->wl + (ddr->bl / 2) + t->twr) / 2) << 24) |
bc0062a4:	8c470034 	lw	a3,52(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:121
	      (tck_to_uctl2(t->tfaw) << 16) |
bc0062a8:	24c60001 	addiu	a2,a2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:122
	      (((t->tras_max - 1) / 2 / 1024) << 8) |
bc0062ac:	24a5ffff 	addiu	a1,a1,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:121

	tmp = DIV_ROUND_UP(t->tzqinit, 32) << 16;
	writel(tmp, (void *)DDR_UMCTL2_INIT5);

	tmp = (((t->wl + (ddr->bl / 2) + t->twr) / 2) << 24) |
	      (tck_to_uctl2(t->tfaw) << 16) |
bc0062b0:	00063042 	srl	a2,a2,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:122
	      (((t->tras_max - 1) / 2 / 1024) << 8) |
bc0062b4:	00052ac2 	srl	a1,a1,0xb
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:121

	tmp = DIV_ROUND_UP(t->tzqinit, 32) << 16;
	writel(tmp, (void *)DDR_UMCTL2_INIT5);

	tmp = (((t->wl + (ddr->bl / 2) + t->twr) / 2) << 24) |
	      (tck_to_uctl2(t->tfaw) << 16) |
bc0062b8:	00063400 	sll	a2,a2,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:122
	      (((t->tras_max - 1) / 2 / 1024) << 8) |
bc0062bc:	00052a00 	sll	a1,a1,0x8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:120
	writel((t->mr[2] << 16) | t->mr[3], (void *)DDR_UMCTL2_INIT4);

	tmp = DIV_ROUND_UP(t->tzqinit, 32) << 16;
	writel(tmp, (void *)DDR_UMCTL2_INIT5);

	tmp = (((t->wl + (ddr->bl / 2) + t->twr) / 2) << 24) |
bc0062c0:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:123
	      (tck_to_uctl2(t->tfaw) << 16) |
	      (((t->tras_max - 1) / 2 / 1024) << 8) |
	      (tck_to_uctl2(t->tras_min) << 0);
bc0062c4:	8c460044 	lw	a2,68(v0)
bc0062c8:	24c60001 	addiu	a2,a2,1
bc0062cc:	00063042 	srl	a2,a2,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:121

	tmp = DIV_ROUND_UP(t->tzqinit, 32) << 16;
	writel(tmp, (void *)DDR_UMCTL2_INIT5);

	tmp = (((t->wl + (ddr->bl / 2) + t->twr) / 2) << 24) |
	      (tck_to_uctl2(t->tfaw) << 16) |
bc0062d0:	00a62825 	or	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:120
	writel((t->mr[2] << 16) | t->mr[3], (void *)DDR_UMCTL2_INIT4);

	tmp = DIV_ROUND_UP(t->tzqinit, 32) << 16;
	writel(tmp, (void *)DDR_UMCTL2_INIT5);

	tmp = (((t->wl + (ddr->bl / 2) + t->twr) / 2) << 24) |
bc0062d4:	8c460020 	lw	a2,32(v0)
bc0062d8:	00e63021 	addu	a2,a3,a2
bc0062dc:	90870004 	lbu	a3,4(a0)
bc0062e0:	00073842 	srl	a3,a3,0x1
bc0062e4:	00c73021 	addu	a2,a2,a3
bc0062e8:	00063042 	srl	a2,a2,0x1
bc0062ec:	00063600 	sll	a2,a2,0x18
bc0062f0:	00a62825 	or	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:124
	      (tck_to_uctl2(t->tfaw) << 16) |
	      (((t->tras_max - 1) / 2 / 1024) << 8) |
	      (tck_to_uctl2(t->tras_min) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG0);
bc0062f4:	ac650100 	sw	a1,256(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:131
	tmp = tck_to_uctl2(t->trc) << 0;
#ifdef DDR2
	tmp |= (tck_to_uctl2(t->txp) << 16) |
	       (((t->al + (ddr->bl / 2) + MAX(t->trtp, (u32)2) - 2) / 2) << 8);
#else
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
bc0062f8:	8c470080 	lw	a3,128(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:126
	      (tck_to_uctl2(t->tfaw) << 16) |
	      (((t->tras_max - 1) / 2 / 1024) << 8) |
	      (tck_to_uctl2(t->tras_min) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG0);

	tmp = tck_to_uctl2(t->trc) << 0;
bc0062fc:	8c450030 	lw	a1,48(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:132
#ifdef DDR2
	tmp |= (tck_to_uctl2(t->txp) << 16) |
	       (((t->al + (ddr->bl / 2) + MAX(t->trtp, (u32)2) - 2) / 2) << 8);
#else
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
	       (((t->al + MAX(t->trtp, (u32)4)) / 2) << 8);
bc006300:	8c46009c 	lw	a2,156(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:131
	tmp = tck_to_uctl2(t->trc) << 0;
#ifdef DDR2
	tmp |= (tck_to_uctl2(t->txp) << 16) |
	       (((t->al + (ddr->bl / 2) + MAX(t->trtp, (u32)2) - 2) / 2) << 8);
#else
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
bc006304:	24e70001 	addiu	a3,a3,1
bc006308:	00073842 	srl	a3,a3,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:126
	      (tck_to_uctl2(t->tfaw) << 16) |
	      (((t->tras_max - 1) / 2 / 1024) << 8) |
	      (tck_to_uctl2(t->tras_min) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG0);

	tmp = tck_to_uctl2(t->trc) << 0;
bc00630c:	24a50001 	addiu	a1,a1,1
bc006310:	00052842 	srl	a1,a1,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:131
#ifdef DDR2
	tmp |= (tck_to_uctl2(t->txp) << 16) |
	       (((t->al + (ddr->bl / 2) + MAX(t->trtp, (u32)2) - 2) / 2) << 8);
#else
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
bc006314:	00073c00 	sll	a3,a3,0x10
bc006318:	00e53825 	or	a3,a3,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:132
	       (((t->al + MAX(t->trtp, (u32)4)) / 2) << 8);
bc00631c:	2cc80004 	sltiu	t0,a2,4
bc006320:	24050004 	li	a1,4
bc006324:	00c8280a 	movz	a1,a2,t0
bc006328:	8c460018 	lw	a2,24(v0)
bc00632c:	00a62821 	addu	a1,a1,a2
bc006330:	00052842 	srl	a1,a1,0x1
bc006334:	00052a00 	sll	a1,a1,0x8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:131
	tmp = tck_to_uctl2(t->trc) << 0;
#ifdef DDR2
	tmp |= (tck_to_uctl2(t->txp) << 16) |
	       (((t->al + (ddr->bl / 2) + MAX(t->trtp, (u32)2) - 2) / 2) << 8);
#else
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
bc006338:	00e52825 	or	a1,a3,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:134
	       (((t->al + MAX(t->trtp, (u32)4)) / 2) << 8);
#endif
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG1);
bc00633c:	ac650104 	sw	a1,260(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:136

	tmp = (tck_to_uctl2(t->rl + ddr->bl / 2 + 2 - t->wl) << 8) |
bc006340:	8c460024 	lw	a2,36(v0)
bc006344:	8c470020 	lw	a3,32(v0)
bc006348:	90850004 	lbu	a1,4(a0)
bc00634c:	24c60003 	addiu	a2,a2,3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:137
	      (tck_to_uctl2(t->cwl + ddr->bl / 2 + t->twtr) << 0);
bc006350:	8c48001c 	lw	t0,28(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:136
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
	       (((t->al + MAX(t->trtp, (u32)4)) / 2) << 8);
#endif
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG1);

	tmp = (tck_to_uctl2(t->rl + ddr->bl / 2 + 2 - t->wl) << 8) |
bc006354:	00c73023 	subu	a2,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:137
	      (tck_to_uctl2(t->cwl + ddr->bl / 2 + t->twtr) << 0);
bc006358:	8c470098 	lw	a3,152(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:136
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
	       (((t->al + MAX(t->trtp, (u32)4)) / 2) << 8);
#endif
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG1);

	tmp = (tck_to_uctl2(t->rl + ddr->bl / 2 + 2 - t->wl) << 8) |
bc00635c:	00052842 	srl	a1,a1,0x1
bc006360:	00c53021 	addu	a2,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:137
	      (tck_to_uctl2(t->cwl + ddr->bl / 2 + t->twtr) << 0);
bc006364:	01073821 	addu	a3,t0,a3
bc006368:	24e70001 	addiu	a3,a3,1
bc00636c:	00e52821 	addu	a1,a3,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:136
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
	       (((t->al + MAX(t->trtp, (u32)4)) / 2) << 8);
#endif
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG1);

	tmp = (tck_to_uctl2(t->rl + ddr->bl / 2 + 2 - t->wl) << 8) |
bc006370:	00063042 	srl	a2,a2,0x1
bc006374:	00063200 	sll	a2,a2,0x8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:137
	      (tck_to_uctl2(t->cwl + ddr->bl / 2 + t->twtr) << 0);
bc006378:	00052842 	srl	a1,a1,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:136
	tmp |= (tck_to_uctl2(t->txpdll) << 16) |
	       (((t->al + MAX(t->trtp, (u32)4)) / 2) << 8);
#endif
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG1);

	tmp = (tck_to_uctl2(t->rl + ddr->bl / 2 + 2 - t->wl) << 8) |
bc00637c:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:138
	      (tck_to_uctl2(t->cwl + ddr->bl / 2 + t->twtr) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG2);
bc006380:	ac650108 	sw	a1,264(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:140

	tmp = (tck_to_uctl2(t->tmrd) << 12) | (tck_to_uctl2(t->tmod) << 0);
bc006384:	8c46005c 	lw	a2,92(v0)
bc006388:	8c450058 	lw	a1,88(v0)
bc00638c:	24c60001 	addiu	a2,a2,1
bc006390:	00063042 	srl	a2,a2,0x1
bc006394:	24a50001 	addiu	a1,a1,1
bc006398:	00063300 	sll	a2,a2,0xc
bc00639c:	00052842 	srl	a1,a1,0x1
bc0063a0:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:141
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG3);
bc0063a4:	ac65010c 	sw	a1,268(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:143

	if (t->trcd > t->al)
bc0063a8:	8c46003c 	lw	a2,60(v0)
bc0063ac:	8c450018 	lw	a1,24(v0)
bc0063b0:	00a6382b 	sltu	a3,a1,a2
bc0063b4:	10e00005 	beqz	a3,bc0063cc <set_umctl2_reg+0x2e0>
bc0063b8:	3c030100 	lui	v1,0x100
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:144
		tmp = tck_to_uctl2(t->trcd - t->al) << 24;
bc0063bc:	24c30001 	addiu	v1,a2,1
bc0063c0:	00651823 	subu	v1,v1,a1
bc0063c4:	00031842 	srl	v1,v1,0x1
bc0063c8:	00031e00 	sll	v1,v1,0x18
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:147
	else
		tmp = BIT(24);
	tmp |= (tck_to_uctl2(t->tccd) << 16) | (tck_to_uctl2(t->trrd) << 8) |
bc0063cc:	8c460060 	lw	a2,96(v0)
bc0063d0:	8c450090 	lw	a1,144(v0)
bc0063d4:	24c60001 	addiu	a2,a2,1
bc0063d8:	24a50001 	addiu	a1,a1,1
bc0063dc:	00063042 	srl	a2,a2,0x1
bc0063e0:	00052842 	srl	a1,a1,0x1
bc0063e4:	00063400 	sll	a2,a2,0x10
bc0063e8:	00052a00 	sll	a1,a1,0x8
bc0063ec:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:148
	       ((t->trp / 2 + 1) << 0);
bc0063f0:	8c460040 	lw	a2,64(v0)
bc0063f4:	00063042 	srl	a2,a2,0x1
bc0063f8:	24c60001 	addiu	a2,a2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:147

	if (t->trcd > t->al)
		tmp = tck_to_uctl2(t->trcd - t->al) << 24;
	else
		tmp = BIT(24);
	tmp |= (tck_to_uctl2(t->tccd) << 16) | (tck_to_uctl2(t->trrd) << 8) |
bc0063fc:	00a62825 	or	a1,a1,a2
bc006400:	00a32825 	or	a1,a1,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:149
	       ((t->trp / 2 + 1) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG4);
bc006404:	3c03b9f0 	lui	v1,0xb9f0
bc006408:	ac650110 	sw	a1,272(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:151

	tmp = (tck_to_uctl2(t->tcksrx) << 24) |
bc00640c:	8c46008c 	lw	a2,140(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:152
	      (tck_to_uctl2(t->tcksre) << 16) | (tck_to_uctl2(t->tckesr) << 8) |
bc006410:	8c450088 	lw	a1,136(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:151
		tmp = BIT(24);
	tmp |= (tck_to_uctl2(t->tccd) << 16) | (tck_to_uctl2(t->trrd) << 8) |
	       ((t->trp / 2 + 1) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG4);

	tmp = (tck_to_uctl2(t->tcksrx) << 24) |
bc006414:	24c60001 	addiu	a2,a2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:152
	      (tck_to_uctl2(t->tcksre) << 16) | (tck_to_uctl2(t->tckesr) << 8) |
bc006418:	24a50001 	addiu	a1,a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:151
		tmp = BIT(24);
	tmp |= (tck_to_uctl2(t->tccd) << 16) | (tck_to_uctl2(t->trrd) << 8) |
	       ((t->trp / 2 + 1) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG4);

	tmp = (tck_to_uctl2(t->tcksrx) << 24) |
bc00641c:	00063042 	srl	a2,a2,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:152
	      (tck_to_uctl2(t->tcksre) << 16) | (tck_to_uctl2(t->tckesr) << 8) |
bc006420:	00052842 	srl	a1,a1,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:151
		tmp = BIT(24);
	tmp |= (tck_to_uctl2(t->tccd) << 16) | (tck_to_uctl2(t->trrd) << 8) |
	       ((t->trp / 2 + 1) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG4);

	tmp = (tck_to_uctl2(t->tcksrx) << 24) |
bc006424:	00063600 	sll	a2,a2,0x18
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:152
	      (tck_to_uctl2(t->tcksre) << 16) | (tck_to_uctl2(t->tckesr) << 8) |
bc006428:	00052c00 	sll	a1,a1,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:151
		tmp = BIT(24);
	tmp |= (tck_to_uctl2(t->tccd) << 16) | (tck_to_uctl2(t->trrd) << 8) |
	       ((t->trp / 2 + 1) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG4);

	tmp = (tck_to_uctl2(t->tcksrx) << 24) |
bc00642c:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:153
	      (tck_to_uctl2(t->tcksre) << 16) | (tck_to_uctl2(t->tckesr) << 8) |
	      (tck_to_uctl2(t->tcke) << 0);
bc006430:	8c460094 	lw	a2,148(v0)
bc006434:	24c60001 	addiu	a2,a2,1
bc006438:	00063042 	srl	a2,a2,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:152
	tmp |= (tck_to_uctl2(t->tccd) << 16) | (tck_to_uctl2(t->trrd) << 8) |
	       ((t->trp / 2 + 1) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG4);

	tmp = (tck_to_uctl2(t->tcksrx) << 24) |
	      (tck_to_uctl2(t->tcksre) << 16) | (tck_to_uctl2(t->tckesr) << 8) |
bc00643c:	00a62825 	or	a1,a1,a2
bc006440:	8c4600a0 	lw	a2,160(v0)
bc006444:	24c60001 	addiu	a2,a2,1
bc006448:	00063042 	srl	a2,a2,0x1
bc00644c:	00063200 	sll	a2,a2,0x8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:151
		tmp = BIT(24);
	tmp |= (tck_to_uctl2(t->tccd) << 16) | (tck_to_uctl2(t->trrd) << 8) |
	       ((t->trp / 2 + 1) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG4);

	tmp = (tck_to_uctl2(t->tcksrx) << 24) |
bc006450:	00a62825 	or	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:154
	      (tck_to_uctl2(t->tcksre) << 16) | (tck_to_uctl2(t->tckesr) << 8) |
	      (tck_to_uctl2(t->tcke) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG5);
bc006454:	ac650114 	sw	a1,276(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:156

	tmp = (tck_to_x32(t->txsdll) << 8) | (tck_to_x32(t->txs) << 0);
bc006458:	8c460070 	lw	a2,112(v0)
bc00645c:	8c450068 	lw	a1,104(v0)
bc006460:	24c6001f 	addiu	a2,a2,31
bc006464:	00063142 	srl	a2,a2,0x5
bc006468:	24a5001f 	addiu	a1,a1,31
bc00646c:	24c60001 	addiu	a2,a2,1
bc006470:	00052942 	srl	a1,a1,0x5
bc006474:	00063042 	srl	a2,a2,0x1
bc006478:	24a50001 	addiu	a1,a1,1
bc00647c:	00063200 	sll	a2,a2,0x8
bc006480:	00052842 	srl	a1,a1,0x1
bc006484:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:157
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG8);
bc006488:	ac650120 	sw	a1,288(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:161

	// tmp = (division(t->tzqoper, 2) << 16) | (division(t->tzqcs, 2) << 0);
	tmp = BIT(31) | BIT(30) | (tck_to_uctl2(t->tzqoper) << 16) |
	      (tck_to_uctl2(t->tzqcs) << 0);
bc00648c:	8c45007c 	lw	a1,124(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:160

	tmp = (tck_to_x32(t->txsdll) << 8) | (tck_to_x32(t->txs) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG8);

	// tmp = (division(t->tzqoper, 2) << 16) | (division(t->tzqcs, 2) << 0);
	tmp = BIT(31) | BIT(30) | (tck_to_uctl2(t->tzqoper) << 16) |
bc006490:	3c06c000 	lui	a2,0xc000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:161
	      (tck_to_uctl2(t->tzqcs) << 0);
bc006494:	24a50001 	addiu	a1,a1,1
bc006498:	00052842 	srl	a1,a1,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:160

	tmp = (tck_to_x32(t->txsdll) << 8) | (tck_to_x32(t->txs) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DRAMTMG8);

	// tmp = (division(t->tzqoper, 2) << 16) | (division(t->tzqcs, 2) << 0);
	tmp = BIT(31) | BIT(30) | (tck_to_uctl2(t->tzqoper) << 16) |
bc00649c:	00a62825 	or	a1,a1,a2
bc0064a0:	8c460078 	lw	a2,120(v0)
bc0064a4:	24c60001 	addiu	a2,a2,1
bc0064a8:	00063042 	srl	a2,a2,0x1
bc0064ac:	00063400 	sll	a2,a2,0x10
bc0064b0:	00a62825 	or	a1,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:162
	      (tck_to_uctl2(t->tzqcs) << 0);
	writel(tmp, (void *)DDR_UMCTL2_ZQCTL0);
bc0064b4:	ac650180 	sw	a1,384(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:166
	// ZQCTL1 use default value

	tmp = (0x3 << 24) | (((t->rl + (t->rl & 1) - 4) / 2) << 16) | BIT(8) |
	      (((t->wl + (t->wl & 1) - 4) / 2) << 0);
bc0064b8:	8c460020 	lw	a2,32(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:165
	tmp = BIT(31) | BIT(30) | (tck_to_uctl2(t->tzqoper) << 16) |
	      (tck_to_uctl2(t->tzqcs) << 0);
	writel(tmp, (void *)DDR_UMCTL2_ZQCTL0);
	// ZQCTL1 use default value

	tmp = (0x3 << 24) | (((t->rl + (t->rl & 1) - 4) / 2) << 16) | BIT(8) |
bc0064bc:	8c450024 	lw	a1,36(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:166
	      (((t->wl + (t->wl & 1) - 4) / 2) << 0);
bc0064c0:	24c7fffc 	addiu	a3,a2,-4
bc0064c4:	30c60001 	andi	a2,a2,0x1
bc0064c8:	00e63021 	addu	a2,a3,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:165
	tmp = BIT(31) | BIT(30) | (tck_to_uctl2(t->tzqoper) << 16) |
	      (tck_to_uctl2(t->tzqcs) << 0);
	writel(tmp, (void *)DDR_UMCTL2_ZQCTL0);
	// ZQCTL1 use default value

	tmp = (0x3 << 24) | (((t->rl + (t->rl & 1) - 4) / 2) << 16) | BIT(8) |
bc0064cc:	3c070300 	lui	a3,0x300
bc0064d0:	24e70100 	addiu	a3,a3,256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:166
	      (((t->wl + (t->wl & 1) - 4) / 2) << 0);
bc0064d4:	00063042 	srl	a2,a2,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:165
	tmp = BIT(31) | BIT(30) | (tck_to_uctl2(t->tzqoper) << 16) |
	      (tck_to_uctl2(t->tzqcs) << 0);
	writel(tmp, (void *)DDR_UMCTL2_ZQCTL0);
	// ZQCTL1 use default value

	tmp = (0x3 << 24) | (((t->rl + (t->rl & 1) - 4) / 2) << 16) | BIT(8) |
bc0064d8:	00c73025 	or	a2,a2,a3
bc0064dc:	24a7fffc 	addiu	a3,a1,-4
bc0064e0:	30a50001 	andi	a1,a1,0x1
bc0064e4:	00e53821 	addu	a3,a3,a1
bc0064e8:	00073842 	srl	a3,a3,0x1
bc0064ec:	00073c00 	sll	a3,a3,0x10
bc0064f0:	00c72825 	or	a1,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:167
	      (((t->wl + (t->wl & 1) - 4) / 2) << 0);
	writel(tmp, (void *)DDR_UMCTL2_DFITMG0);
bc0064f4:	ac650190 	sw	a1,400(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:170
	// DFITMG1 use default value
	tmp = (3 << 16) | BIT(8) | BIT(0);
	writel(tmp, (void *)DDR_UMCTL2_DFITMG1);
bc0064f8:	3c050003 	lui	a1,0x3
bc0064fc:	24a50101 	addiu	a1,a1,257
bc006500:	ac650194 	sw	a1,404(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:173

	//Enable bit 8 if use self-refresh mode
	writel(0x07002021, (void *)DDR_UMCTL2_DFILPCFG0);
bc006504:	3c050700 	lui	a1,0x700
bc006508:	24a52021 	addiu	a1,a1,8225
bc00650c:	ac650198 	sw	a1,408(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:175
	// writel(0x00400003, (void *)DDR_UMCTL2_DFIUPD0);
	writel(0x00400003, (void *)DDR_UMCTL2_DFIUPD0);
bc006510:	3c050040 	lui	a1,0x40
bc006514:	24a50003 	addiu	a1,a1,3
bc006518:	ac6501a0 	sw	a1,416(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:177
	// important timing, and no good reason
	writel(0x000800ff, (void *)DDR_UMCTL2_DFIUPD1);
bc00651c:	3c050008 	lui	a1,0x8
bc006520:	24a600ff 	addiu	a2,a1,255
bc006524:	ac6601a4 	sw	a2,420(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:179
	// writel(0x80000000, (void *)DDR_UMCTL2_DFIUPD2);
	writel(0x00000000, (void *)DDR_UMCTL2_DFIUPD2);
bc006528:	ac6001a8 	sw	zero,424(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:181

	if (ddr->bank == 8) {
bc00652c:	90860005 	lbu	a2,5(a0)
bc006530:	24040008 	li	a0,8
bc006534:	54c4000d 	bnel	a2,a0,bc00656c <set_umctl2_reg+0x480>
bc006538:	3c04001f 	lui	a0,0x1f
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:186
		// 8 bank, 16 IO
		writel(0x00080808, (void *)DDR_UMCTL2_ADDRMAP1); // bank 0~2 in HIF bit[10~12]
		writel(0x00000000, (void *)DDR_UMCTL2_ADDRMAP2); // column 2~5 in HIF bit[2~5], column 0~1 cann't be modified
		writel(0x00000000, (void *)DDR_UMCTL2_ADDRMAP3); // column 6~9 in HIF bit[6~9]
		writel(0x00000f0f, (void *)DDR_UMCTL2_ADDRMAP4); // column bit12 bit13 not used
bc00653c:	24040f0f 	li	a0,3855
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:183
	// writel(0x80000000, (void *)DDR_UMCTL2_DFIUPD2);
	writel(0x00000000, (void *)DDR_UMCTL2_DFIUPD2);

	if (ddr->bank == 8) {
		// 8 bank, 16 IO
		writel(0x00080808, (void *)DDR_UMCTL2_ADDRMAP1); // bank 0~2 in HIF bit[10~12]
bc006540:	24a50808 	addiu	a1,a1,2056
bc006544:	ac650204 	sw	a1,516(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:184
		writel(0x00000000, (void *)DDR_UMCTL2_ADDRMAP2); // column 2~5 in HIF bit[2~5], column 0~1 cann't be modified
bc006548:	ac600208 	sw	zero,520(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:185
		writel(0x00000000, (void *)DDR_UMCTL2_ADDRMAP3); // column 6~9 in HIF bit[6~9]
bc00654c:	ac60020c 	sw	zero,524(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:186
		writel(0x00000f0f, (void *)DDR_UMCTL2_ADDRMAP4); // column bit12 bit13 not used
bc006550:	ac640210 	sw	a0,528(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:187
		writel(0x07070707, (void *)DDR_UMCTL2_ADDRMAP5); // row 0~11 in HIF bit[13~24]
bc006554:	3c040707 	lui	a0,0x707
bc006558:	24840707 	addiu	a0,a0,1799
bc00655c:	ac640214 	sw	a0,532(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:188
		writel(0x0f0f0707, (void *)DDR_UMCTL2_ADDRMAP6); // row 12~13 in HIF bit[25~26], row 14~15 not used
bc006560:	3c040f0f 	lui	a0,0xf0f
bc006564:	0b001966 	j	bc006598 <set_umctl2_reg+0x4ac>
bc006568:	24840707 	addiu	a0,a0,1799
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:191
	} else {
		// 64MB DDR2: 2 bank bits, 10 col bits, 13 row bits
		writel(0x001f0808, (void *)DDR_UMCTL2_ADDRMAP1); // bank 0~1 in HIF bit[10~11], bank 2 not used
bc00656c:	24840808 	addiu	a0,a0,2056
bc006570:	ac640204 	sw	a0,516(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:194
		writel(0x00000000, (void *)DDR_UMCTL2_ADDRMAP2); // column 2~5 in HIF bit[2~5], column 0~1 cann't be modified
		writel(0x00000000, (void *)DDR_UMCTL2_ADDRMAP3); // column 6~9 in HIF bit[6~9]
		writel(0x00000f0f, (void *)DDR_UMCTL2_ADDRMAP4); // column bit12 bit13 not used
bc006574:	24040f0f 	li	a0,3855
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:192
		writel(0x07070707, (void *)DDR_UMCTL2_ADDRMAP5); // row 0~11 in HIF bit[13~24]
		writel(0x0f0f0707, (void *)DDR_UMCTL2_ADDRMAP6); // row 12~13 in HIF bit[25~26], row 14~15 not used
	} else {
		// 64MB DDR2: 2 bank bits, 10 col bits, 13 row bits
		writel(0x001f0808, (void *)DDR_UMCTL2_ADDRMAP1); // bank 0~1 in HIF bit[10~11], bank 2 not used
		writel(0x00000000, (void *)DDR_UMCTL2_ADDRMAP2); // column 2~5 in HIF bit[2~5], column 0~1 cann't be modified
bc006578:	ac600208 	sw	zero,520(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:193
		writel(0x00000000, (void *)DDR_UMCTL2_ADDRMAP3); // column 6~9 in HIF bit[6~9]
bc00657c:	ac60020c 	sw	zero,524(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:194
		writel(0x00000f0f, (void *)DDR_UMCTL2_ADDRMAP4); // column bit12 bit13 not used
bc006580:	ac640210 	sw	a0,528(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:195
		writel(0x06060606, (void *)DDR_UMCTL2_ADDRMAP5); // row 0~11 in HIF bit[12~23]
bc006584:	3c040606 	lui	a0,0x606
bc006588:	24840606 	addiu	a0,a0,1542
bc00658c:	ac640214 	sw	a0,532(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:196
		writel(0x0f0f0f06, (void *)DDR_UMCTL2_ADDRMAP6); // row 12 in HIF bit[24], row 13~15 not used
bc006590:	3c040f0f 	lui	a0,0xf0f
bc006594:	24840f06 	addiu	a0,a0,3846
bc006598:	ac640218 	sw	a0,536(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:211
		      ((t->cl + t->al - 4) << 2);
	else if (ddr->freq < 400)
		tmp = (5 << 24) | ((t->cwl + t->al - 3) << 16) | (6 << 8) |
		      ((t->cl + t->al - 4) << 2);
#else
	tmp = (0x6 << 24) | (0x6 << 8) | ((t->cl - t->cwl) << 2);
bc00659c:	8c430014 	lw	v1,20(v0)
bc0065a0:	8c42001c 	lw	v0,28(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:233
	// cpu
	writel(0x00004014, (void *)DDR_UMCTL2_PCFGR_0);
	writel(0x00004018, (void *)DDR_UMCTL2_PCFGW_0);
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_0);
	// npu and gmac
	writel(0x00004024, (void *)DDR_UMCTL2_PCFGR_1);
bc0065a4:	24044024 	li	a0,16420
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:211
		      ((t->cl + t->al - 4) << 2);
	else if (ddr->freq < 400)
		tmp = (5 << 24) | ((t->cwl + t->al - 3) << 16) | (6 << 8) |
		      ((t->cl + t->al - 4) << 2);
#else
	tmp = (0x6 << 24) | (0x6 << 8) | ((t->cl - t->cwl) << 2);
bc0065a8:	00621823 	subu	v1,v1,v0
bc0065ac:	3c020600 	lui	v0,0x600
bc0065b0:	24420600 	addiu	v0,v0,1536
bc0065b4:	00031880 	sll	v1,v1,0x2
bc0065b8:	00621825 	or	v1,v1,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:213
#endif
	writel(tmp, (void *)DDR_UMCTL2_ODTCFG); // ODTCFG:
bc0065bc:	3c02b9f0 	lui	v0,0xb9f0
bc0065c0:	ac430240 	sw	v1,576(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:220
#ifdef DDR_DISABLE_ODT
	tmp = 0;
#else
	tmp = BIT(4) | BIT(0);
#endif
	writel(tmp, (void *)DDR_UMCTL2_ODTMAP); // rank otd config, ODTMAP:
bc0065c4:	24030011 	li	v1,17
bc0065c8:	ac430244 	sw	v1,580(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:229
	// DBG0 and DBG1 use default value

	// port config
	writel(0x00000000, (void *)DDR_UMCTL2_PCCFG);
	// cpu
	writel(0x00004014, (void *)DDR_UMCTL2_PCFGR_0);
bc0065cc:	24034014 	li	v1,16404
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:227
	// SCHED and SCHED1 use default value
	// PERFHPR1, PERFLPR1 and PERFWR1 use default value
	// DBG0 and DBG1 use default value

	// port config
	writel(0x00000000, (void *)DDR_UMCTL2_PCCFG);
bc0065d0:	ac400400 	sw	zero,1024(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:229
	// cpu
	writel(0x00004014, (void *)DDR_UMCTL2_PCFGR_0);
bc0065d4:	ac430404 	sw	v1,1028(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:230
	writel(0x00004018, (void *)DDR_UMCTL2_PCFGW_0);
bc0065d8:	24034018 	li	v1,16408
bc0065dc:	ac430408 	sw	v1,1032(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:231
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_0);
bc0065e0:	24030001 	li	v1,1
bc0065e4:	ac430490 	sw	v1,1168(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:233
	// npu and gmac
	writel(0x00004024, (void *)DDR_UMCTL2_PCFGR_1);
bc0065e8:	ac4404b4 	sw	a0,1204(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:234
	writel(0x00004028, (void *)DDR_UMCTL2_PCFGW_1);
bc0065ec:	24044028 	li	a0,16424
bc0065f0:	ac4404b8 	sw	a0,1208(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:237
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_1);
	// gdma and wifi
	writel(0x00004034, (void *)DDR_UMCTL2_PCFGR_2);
bc0065f4:	24044034 	li	a0,16436
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:235
	writel(0x00004018, (void *)DDR_UMCTL2_PCFGW_0);
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_0);
	// npu and gmac
	writel(0x00004024, (void *)DDR_UMCTL2_PCFGR_1);
	writel(0x00004028, (void *)DDR_UMCTL2_PCFGW_1);
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_1);
bc0065f8:	ac430540 	sw	v1,1344(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:237
	// gdma and wifi
	writel(0x00004034, (void *)DDR_UMCTL2_PCFGR_2);
bc0065fc:	ac440564 	sw	a0,1380(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:238
	writel(0x00004038, (void *)DDR_UMCTL2_PCFGW_2);
bc006600:	24044038 	li	a0,16440
bc006604:	ac440568 	sw	a0,1384(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:241
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_2);
	// sdio and usb
	writel(0x00004044, (void *)DDR_UMCTL2_PCFGR_3);
bc006608:	24044044 	li	a0,16452
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:239
	writel(0x00004028, (void *)DDR_UMCTL2_PCFGW_1);
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_1);
	// gdma and wifi
	writel(0x00004034, (void *)DDR_UMCTL2_PCFGR_2);
	writel(0x00004038, (void *)DDR_UMCTL2_PCFGW_2);
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_2);
bc00660c:	ac4305f0 	sw	v1,1520(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:241
	// sdio and usb
	writel(0x00004044, (void *)DDR_UMCTL2_PCFGR_3);
bc006610:	ac440614 	sw	a0,1556(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:242
	writel(0x00004048, (void *)DDR_UMCTL2_PCFGW_3);
bc006614:	24044048 	li	a0,16456
bc006618:	ac440618 	sw	a0,1560(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:243
	writel(0x00000001, (void *)DDR_UMCTL2_PCTRL_3);
bc00661c:	ac4306a0 	sw	v1,1696(v0)
bc006620:	03e00008 	jr	ra
bc006624:	00000000 	nop

bc006628 <ddr_phy_init>:
ddr_phy_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:349
#endif
}

void ddr_phy_init(struct ddr_info *ddr)
{
	writew(BIT(1) | BIT(0), (void *)MEM_RESET);
bc006628:	3c02b9e0 	lui	v0,0xb9e0
bc00662c:	24030003 	li	v1,3
bc006630:	a4432dc8 	sh	v1,11720(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:352

	// wait phy init done
	while ((readl((void *)DDR_PHY_PGSR0) & 0xf) != 0xf) {
bc006634:	2402000f 	li	v0,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:352 (discriminator 1)
bc006638:	3c03b9f8 	lui	v1,0xb9f8
bc00663c:	8c650010 	lw	a1,16(v1)
bc006640:	30a5000f 	andi	a1,a1,0xf
bc006644:	14a2fffd 	bne	a1,v0,bc00663c <ddr_phy_init+0x14>
bc006648:	00000000 	nop
set_phy_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:253
	// NOTE: set phy reg, such as DXnGCR, DCR, PTR*, MR*, DTPR*, etc.
	struct ddr_timing *t = ddr->timing;
	u32 freq = ddr->freq;
	u32 tmp = 0;

	tmp = readl((void *)DDR_PHY_PLLCR) & (~(3 << 18));
bc00664c:	8c630018 	lw	v1,24(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:250

static void set_phy_reg(struct ddr_info *ddr)
{
	// NOTE: set phy reg, such as DXnGCR, DCR, PTR*, MR*, DTPR*, etc.
	struct ddr_timing *t = ddr->timing;
	u32 freq = ddr->freq;
bc006650:	94850002 	lhu	a1,2(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:253
	u32 tmp = 0;

	tmp = readl((void *)DDR_PHY_PLLCR) & (~(3 << 18));
bc006654:	3c06fff3 	lui	a2,0xfff3
bc006658:	34c6ffff 	ori	a2,a2,0xffff
bc00665c:	00663024 	and	a2,v1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:254
	if (freq < 450)
bc006660:	2ca301c2 	sltiu	v1,a1,450
bc006664:	10600003 	beqz	v1,bc006674 <ddr_phy_init+0x4c>
bc006668:	8c820008 	lw	v0,8(a0)
ddr_phy_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:255
		tmp |= 3 << 18;
bc00666c:	0b0019a1 	j	bc006684 <ddr_phy_init+0x5c>
bc006670:	3c03000c 	lui	v1,0xc
set_phy_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:256
	else if (freq < 670)
bc006674:	2ca3029e 	sltiu	v1,a1,670
bc006678:	10600004 	beqz	v1,bc00668c <ddr_phy_init+0x64>
bc00667c:	3c03b9f8 	lui	v1,0xb9f8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:257
		tmp |= BIT(18);
bc006680:	3c030004 	lui	v1,0x4
bc006684:	00c33025 	or	a2,a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:258
	writel(tmp, (void *)DDR_PHY_PLLCR);
bc006688:	3c03b9f8 	lui	v1,0xb9f8
bc00668c:	ac660018 	sw	a2,24(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:267
#else
	tmp = 0x3;
#endif

	// FIXME: is 8 bank? Don't set bytemask
	if (ddr->bank == 8)
bc006690:	90870005 	lbu	a3,5(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:263
	writel(tmp, (void *)DDR_PHY_PLLCR);

#ifdef DDR2
	tmp = 0x2;
#else
	tmp = 0x3;
bc006694:	2406000b 	li	a2,11
bc006698:	24040003 	li	a0,3
bc00669c:	38e70008 	xori	a3,a3,0x8
bc0066a0:	00c7200a 	movz	a0,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:269
#endif

	// FIXME: is 8 bank? Don't set bytemask
	if (ddr->bank == 8)
		tmp |= BIT(3);
	writel(tmp, (void *)DDR_PHY_DCR);
bc0066a4:	ac640044 	sw	a0,68(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:271

	writel(t->mr[0], (void *)DDR_PHY_MR0);
bc0066a8:	8c440004 	lw	a0,4(v0)
bc0066ac:	ac640054 	sw	a0,84(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:272
	writel(t->mr[1], (void *)DDR_PHY_MR1);
bc0066b0:	8c440008 	lw	a0,8(v0)
bc0066b4:	ac640058 	sw	a0,88(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:273
	writel(t->mr[2], (void *)DDR_PHY_MR2);
bc0066b8:	8c44000c 	lw	a0,12(v0)
bc0066bc:	ac64005c 	sw	a0,92(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:274
	writel(t->mr[3], (void *)DDR_PHY_MR3);
bc0066c0:	8c440010 	lw	a0,16(v0)
bc0066c4:	ac640060 	sw	a0,96(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:276

	tmp = (t->trtp << 0) | (t->twtr << 4) | (t->trp << 8) |
bc0066c8:	8c460098 	lw	a2,152(v0)
bc0066cc:	8c440040 	lw	a0,64(v0)
bc0066d0:	00063100 	sll	a2,a2,0x4
bc0066d4:	00042200 	sll	a0,a0,0x8
bc0066d8:	00c42025 	or	a0,a2,a0
bc0066dc:	8c46009c 	lw	a2,156(v0)
bc0066e0:	00862025 	or	a0,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:277
	      (t->trcd << 12) | (t->tras << 16) | (t->trrd << 22) |
bc0066e4:	8c46003c 	lw	a2,60(v0)
bc0066e8:	00063300 	sll	a2,a2,0xc
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:276
	writel(t->mr[0], (void *)DDR_PHY_MR0);
	writel(t->mr[1], (void *)DDR_PHY_MR1);
	writel(t->mr[2], (void *)DDR_PHY_MR2);
	writel(t->mr[3], (void *)DDR_PHY_MR3);

	tmp = (t->trtp << 0) | (t->twtr << 4) | (t->trp << 8) |
bc0066ec:	00862025 	or	a0,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:277
	      (t->trcd << 12) | (t->tras << 16) | (t->trrd << 22) |
bc0066f0:	8c46004c 	lw	a2,76(v0)
bc0066f4:	00063400 	sll	a2,a2,0x10
bc0066f8:	00862025 	or	a0,a0,a2
bc0066fc:	8c460090 	lw	a2,144(v0)
bc006700:	00063580 	sll	a2,a2,0x16
bc006704:	00862025 	or	a0,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:278
	      (t->trc << 26);
bc006708:	8c460030 	lw	a2,48(v0)
bc00670c:	00063680 	sll	a2,a2,0x1a
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:276
	writel(t->mr[0], (void *)DDR_PHY_MR0);
	writel(t->mr[1], (void *)DDR_PHY_MR1);
	writel(t->mr[2], (void *)DDR_PHY_MR2);
	writel(t->mr[3], (void *)DDR_PHY_MR3);

	tmp = (t->trtp << 0) | (t->twtr << 4) | (t->trp << 8) |
bc006710:	00862025 	or	a0,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:279
	      (t->trcd << 12) | (t->tras << 16) | (t->trrd << 22) |
	      (t->trc << 26);
	writel(tmp, (void *)DDR_PHY_DTPR0);
bc006714:	ac640048 	sw	a0,72(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:281

	tmp = (t->tfaw << 5) | (t->trfc << 11);
bc006718:	8c460038 	lw	a2,56(v0)
bc00671c:	8c44002c 	lw	a0,44(v0)
bc006720:	000632c0 	sll	a2,a2,0xb
bc006724:	00042140 	sll	a0,a0,0x5
bc006728:	00c42025 	or	a0,a2,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:285
#ifdef DDR2
	tmp |= (t->tmrd << 0) | (4 << 2) | (40 << 20) | (8 << 26) | (0 << 30);
#else
	tmp |= ((t->tmrd - 4) << 0) | ((t->tmod - 12) << 2) | (t->twlmrd << 20) | (t->twlo << 26);
bc00672c:	8c46005c 	lw	a2,92(v0)
bc006730:	24c6fffc 	addiu	a2,a2,-4
bc006734:	00862025 	or	a0,a0,a2
bc006738:	8c460054 	lw	a2,84(v0)
bc00673c:	00063500 	sll	a2,a2,0x14
bc006740:	00862025 	or	a0,a0,a2
bc006744:	8c460050 	lw	a2,80(v0)
bc006748:	00063680 	sll	a2,a2,0x1a
bc00674c:	00862025 	or	a0,a0,a2
bc006750:	8c460058 	lw	a2,88(v0)
bc006754:	24c6fff4 	addiu	a2,a2,-12
bc006758:	00063080 	sll	a2,a2,0x2
bc00675c:	00862025 	or	a0,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:287
#endif
	writel(tmp, (void *)DDR_PHY_DTPR1);
bc006760:	ac64004c 	sw	a0,76(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:292

#ifdef DDR2
	tmp = (t->txs << 0) | (t->txp << 10) | (t->tcke << 15) | (t->tdllk << 19) | (0 << 31);
#else
	tmp = (MAX(t->txs, t->txsdll) << 0) | (MAX(t->txp, t->txpdll) << 10) | (t->tckesr << 15) | (t->tdllk << 19) | ((t->tccd - 4) << 31);
bc006764:	8c460068 	lw	a2,104(v0)
bc006768:	8c440070 	lw	a0,112(v0)
bc00676c:	8c4700a0 	lw	a3,160(v0)
bc006770:	00c4402b 	sltu	t0,a2,a0
bc006774:	00c8200a 	movz	a0,a2,t0
bc006778:	00073bc0 	sll	a3,a3,0xf
bc00677c:	8c480064 	lw	t0,100(v0)
bc006780:	8c460084 	lw	a2,132(v0)
bc006784:	00e43825 	or	a3,a3,a0
bc006788:	8c440080 	lw	a0,128(v0)
bc00678c:	000844c0 	sll	t0,t0,0x13
bc006790:	00e83825 	or	a3,a3,t0
bc006794:	00c4402b 	sltu	t0,a2,a0
bc006798:	0088300b 	movn	a2,a0,t0
bc00679c:	00063280 	sll	a2,a2,0xa
bc0067a0:	00e62025 	or	a0,a3,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:297
#endif
	writel(tmp, (void *)DDR_PHY_DTPR2);

	tmp = (DIV_ROUND_UP(freq * 16, 1066) << 0) |
	      (DIV_ROUND_UP(freq * 2134, 1066) << 6) |
bc0067a4:	24060856 	li	a2,2134
bc0067a8:	70a63002 	mul	a2,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:292
	writel(tmp, (void *)DDR_PHY_DTPR1);

#ifdef DDR2
	tmp = (t->txs << 0) | (t->txp << 10) | (t->tcke << 15) | (t->tdllk << 19) | (0 << 31);
#else
	tmp = (MAX(t->txs, t->txsdll) << 0) | (MAX(t->txp, t->txpdll) << 10) | (t->tckesr << 15) | (t->tdllk << 19) | ((t->tccd - 4) << 31);
bc0067ac:	8c470060 	lw	a3,96(v0)
bc0067b0:	00073fc0 	sll	a3,a3,0x1f
bc0067b4:	00872025 	or	a0,a0,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:294
#endif
	writel(tmp, (void *)DDR_PHY_DTPR2);
bc0067b8:	ac640050 	sw	a0,80(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:297

	tmp = (DIV_ROUND_UP(freq * 16, 1066) << 0) |
	      (DIV_ROUND_UP(freq * 2134, 1066) << 6) |
bc0067bc:	2404042a 	li	a0,1066
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:298
	      (DIV_ROUND_UP(534 * freq, 1066) << 21);
bc0067c0:	24070216 	li	a3,534
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:297
	tmp = (MAX(t->txs, t->txsdll) << 0) | (MAX(t->txp, t->txpdll) << 10) | (t->tckesr << 15) | (t->tdllk << 19) | ((t->tccd - 4) << 31);
#endif
	writel(tmp, (void *)DDR_PHY_DTPR2);

	tmp = (DIV_ROUND_UP(freq * 16, 1066) << 0) |
	      (DIV_ROUND_UP(freq * 2134, 1066) << 6) |
bc0067c4:	24c60429 	addiu	a2,a2,1065
bc0067c8:	00c4001b 	divu	zero,a2,a0
bc0067cc:	008001f4 	teq	a0,zero,0x7
bc0067d0:	00003012 	mflo	a2
bc0067d4:	00063180 	sll	a2,a2,0x6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:298
	      (DIV_ROUND_UP(534 * freq, 1066) << 21);
bc0067d8:	70a73802 	mul	a3,a1,a3
bc0067dc:	24e70429 	addiu	a3,a3,1065
bc0067e0:	00e4001b 	divu	zero,a3,a0
bc0067e4:	008001f4 	teq	a0,zero,0x7
bc0067e8:	00003812 	mflo	a3
bc0067ec:	00073d40 	sll	a3,a3,0x15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:296
#else
	tmp = (MAX(t->txs, t->txsdll) << 0) | (MAX(t->txp, t->txpdll) << 10) | (t->tckesr << 15) | (t->tdllk << 19) | ((t->tccd - 4) << 31);
#endif
	writel(tmp, (void *)DDR_PHY_DTPR2);

	tmp = (DIV_ROUND_UP(freq * 16, 1066) << 0) |
bc0067f0:	00c73825 	or	a3,a2,a3
bc0067f4:	00053100 	sll	a2,a1,0x4
bc0067f8:	24c60429 	addiu	a2,a2,1065
bc0067fc:	00c4001b 	divu	zero,a2,a0
bc006800:	008001f4 	teq	a0,zero,0x7
bc006804:	00003012 	mflo	a2
bc006808:	00e63025 	or	a2,a3,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:299
	      (DIV_ROUND_UP(freq * 2134, 1066) << 6) |
	      (DIV_ROUND_UP(534 * freq, 1066) << 21);
	writel(tmp, (void *)DDR_PHY_PTR0);
bc00680c:	ac66001c 	sw	a2,28(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:302

	tmp = ((DIV_ROUND_UP(4800 * freq, 1066)) << 0) |
	      ((DIV_ROUND_UP(freq * 53334, 1066)) << 16);
bc006810:	3406d056 	li	a2,0xd056
bc006814:	70a63002 	mul	a2,a1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:301
	tmp = (DIV_ROUND_UP(freq * 16, 1066) << 0) |
	      (DIV_ROUND_UP(freq * 2134, 1066) << 6) |
	      (DIV_ROUND_UP(534 * freq, 1066) << 21);
	writel(tmp, (void *)DDR_PHY_PTR0);

	tmp = ((DIV_ROUND_UP(4800 * freq, 1066)) << 0) |
bc006818:	240712c0 	li	a3,4800
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:302
	      ((DIV_ROUND_UP(freq * 53334, 1066)) << 16);
bc00681c:	24c60429 	addiu	a2,a2,1065
bc006820:	00c4001b 	divu	zero,a2,a0
bc006824:	008001f4 	teq	a0,zero,0x7
bc006828:	00003012 	mflo	a2
bc00682c:	00063400 	sll	a2,a2,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:301
	tmp = (DIV_ROUND_UP(freq * 16, 1066) << 0) |
	      (DIV_ROUND_UP(freq * 2134, 1066) << 6) |
	      (DIV_ROUND_UP(534 * freq, 1066) << 21);
	writel(tmp, (void *)DDR_PHY_PTR0);

	tmp = ((DIV_ROUND_UP(4800 * freq, 1066)) << 0) |
bc006830:	70a72802 	mul	a1,a1,a3
bc006834:	24a50429 	addiu	a1,a1,1065
bc006838:	00a4001b 	divu	zero,a1,a0
bc00683c:	008001f4 	teq	a0,zero,0x7
bc006840:	00002812 	mflo	a1
bc006844:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:303
	      ((DIV_ROUND_UP(freq * 53334, 1066)) << 16);
	writel(tmp, (void *)DDR_PHY_PTR1);
bc006848:	ac650020 	sw	a1,32(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:309

// PTR2 uses default value
#ifdef DDR2
	tmp = (us_to_tck(200) << 0) | (ns_to_tck(400) << 20);
#else
	tmp = (us_to_tck(500) << 0) | (t->txpr << 20);
bc00684c:	8c440000 	lw	a0,0(v0)
bc006850:	3c051dcd 	lui	a1,0x1dcd
bc006854:	24a564ff 	addiu	a1,a1,25855
bc006858:	00852821 	addu	a1,a0,a1
bc00685c:	00a4001b 	divu	zero,a1,a0
bc006860:	008001f4 	teq	a0,zero,0x7
bc006864:	8c46006c 	lw	a2,108(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:313
#endif
	writel(tmp, (void *)DDR_PHY_PTR3);

	tmp = (us_to_tck(200) << 0) | (us_to_tck(1) << 18);
bc006868:	3c05000f 	lui	a1,0xf
bc00686c:	24a5423f 	addiu	a1,a1,16959
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:309

// PTR2 uses default value
#ifdef DDR2
	tmp = (us_to_tck(200) << 0) | (ns_to_tck(400) << 20);
#else
	tmp = (us_to_tck(500) << 0) | (t->txpr << 20);
bc006870:	00063500 	sll	a2,a2,0x14
bc006874:	00002012 	mflo	a0
bc006878:	00862025 	or	a0,a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:311
#endif
	writel(tmp, (void *)DDR_PHY_PTR3);
bc00687c:	ac640028 	sw	a0,40(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:313

	tmp = (us_to_tck(200) << 0) | (us_to_tck(1) << 18);
bc006880:	8c440000 	lw	a0,0(v0)
bc006884:	00852821 	addu	a1,a0,a1
bc006888:	00a4001b 	divu	zero,a1,a0
bc00688c:	008001f4 	teq	a0,zero,0x7
bc006890:	3c050beb 	lui	a1,0xbeb
bc006894:	34a5c1ff 	ori	a1,a1,0xc1ff
bc006898:	00852821 	addu	a1,a0,a1
bc00689c:	00003012 	mflo	a2
bc0068a0:	00063480 	sll	a2,a2,0x12
bc0068a4:	00a4001b 	divu	zero,a1,a0
bc0068a8:	008001f4 	teq	a0,zero,0x7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:318
	writel(tmp, (void *)DDR_PHY_PTR4);

	// set IO mode
	tmp = readl((void *)DDR_PHY_PGCR1);
	tmp &= ~(0x3 << 7);
bc0068ac:	2404fe7f 	li	a0,-385
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:313
#else
	tmp = (us_to_tck(500) << 0) | (t->txpr << 20);
#endif
	writel(tmp, (void *)DDR_PHY_PTR3);

	tmp = (us_to_tck(200) << 0) | (us_to_tck(1) << 18);
bc0068b0:	00002812 	mflo	a1
bc0068b4:	00c52825 	or	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:314
	writel(tmp, (void *)DDR_PHY_PTR4);
bc0068b8:	ac65002c 	sw	a1,44(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:317

	// set IO mode
	tmp = readl((void *)DDR_PHY_PGCR1);
bc0068bc:	8c65000c 	lw	a1,12(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:318
	tmp &= ~(0x3 << 7);
bc0068c0:	00a42024 	and	a0,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:320
#ifndef DDR2
		tmp |= BIT(7);
bc0068c4:	34840080 	ori	a0,a0,0x80
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:322
#endif
	writel(tmp, (void *)DDR_PHY_PGCR1);
bc0068c8:	ac64000c 	sw	a0,12(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:325

	// check if there is some regs have not be configed?
	tmp = readl((void *)DDR_PHY_PGCR2);
bc0068cc:	8c65008c 	lw	a1,140(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:327
	tmp = tmp & 0xfffc0000;
	tmp |= (9 * t->trefi - 400) << 0;
bc0068d0:	8c420028 	lw	v0,40(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:326
#endif
	writel(tmp, (void *)DDR_PHY_PGCR1);

	// check if there is some regs have not be configed?
	tmp = readl((void *)DDR_PHY_PGCR2);
	tmp = tmp & 0xfffc0000;
bc0068d4:	3c04fffc 	lui	a0,0xfffc
bc0068d8:	00a42024 	and	a0,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:327
	tmp |= (9 * t->trefi - 400) << 0;
bc0068dc:	24050009 	li	a1,9
bc0068e0:	70a21002 	mul	v0,a1,v0
bc0068e4:	2442fe70 	addiu	v0,v0,-400
bc0068e8:	00441025 	or	v0,v0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:328
	writel(tmp, (void *)DDR_PHY_PGCR2);
bc0068ec:	ac62008c 	sw	v0,140(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:343
	clear_bits(BIT(30), DDR_PHY_ZQ0CR0);
	clear_bits(BIT(30), DDR_PHY_ZQ1CR0);
	clear_bits(BIT(1) | BIT(2) | BIT(9) | BIT(10), DDR_PHY_DX0GCR);
	clear_bits(BIT(1) | BIT(2) | BIT(9) | BIT(10), DDR_PHY_DX1GCR);
#else
	set_clear_bits(BIT(7) | BIT(18), BIT(0) | BIT(2), DDR_PHY_DSGCR);
bc0068f0:	8c640040 	lw	a0,64(v1)
bc0068f4:	2402fffa 	li	v0,-6
bc0068f8:	00822024 	and	a0,a0,v0
bc0068fc:	3c020004 	lui	v0,0x4
bc006900:	24450080 	addiu	a1,v0,128
bc006904:	00852025 	or	a0,a0,a1
ddr_phy_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:358
		delay(1);
	}

	set_phy_reg(ddr);
	// trigger sdram init performed by ddr controller
	writel(0x40001, (void *)DDR_PHY_PIR);
bc006908:	24420001 	addiu	v0,v0,1
set_phy_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:343
	clear_bits(BIT(30), DDR_PHY_ZQ0CR0);
	clear_bits(BIT(30), DDR_PHY_ZQ1CR0);
	clear_bits(BIT(1) | BIT(2) | BIT(9) | BIT(10), DDR_PHY_DX0GCR);
	clear_bits(BIT(1) | BIT(2) | BIT(9) | BIT(10), DDR_PHY_DX1GCR);
#else
	set_clear_bits(BIT(7) | BIT(18), BIT(0) | BIT(2), DDR_PHY_DSGCR);
bc00690c:	ac640040 	sw	a0,64(v1)
ddr_phy_init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:358
		delay(1);
	}

	set_phy_reg(ddr);
	// trigger sdram init performed by ddr controller
	writel(0x40001, (void *)DDR_PHY_PIR);
bc006910:	ac620004 	sw	v0,4(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:359 (discriminator 1)
	while (!(readl((void *)DDR_PHY_PGSR0) & 0x1))
bc006914:	8c620010 	lw	v0,16(v1)
bc006918:	30420001 	andi	v0,v0,0x1
bc00691c:	1040fffd 	beqz	v0,bc006914 <ddr_phy_init+0x2ec>
bc006920:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:361
		;
}
bc006924:	03e00008 	jr	ra
bc006928:	00000000 	nop

bc00692c <umctl2_init_ddr>:
set_quasi_dynamic_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:28
}

static inline void set_quasi_dynamic_reg(u32 value, u32 addr)
{
	// set sw_done = 0
	writel(0x0, (void *)DDR_UMCTL2_SWCTL);
bc00692c:	3c02b9f0 	lui	v0,0xb9f0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:30
	/* config register */
	writel(value, (void *)addr);
bc006930:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:28
}

static inline void set_quasi_dynamic_reg(u32 value, u32 addr)
{
	// set sw_done = 0
	writel(0x0, (void *)DDR_UMCTL2_SWCTL);
bc006934:	ac400320 	sw	zero,800(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:30
	/* config register */
	writel(value, (void *)addr);
bc006938:	ac4301b0 	sw	v1,432(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:32
	// set sw_done = 1
	writel(0x1, (void *)DDR_UMCTL2_SWCTL);
bc00693c:	ac430320 	sw	v1,800(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:34
	// wait for sw_done_ack = 1
	while (!(readl((void *)DDR_UMCTL2_SWSTAT)))
bc006940:	3c03b9f0 	lui	v1,0xb9f0
bc006944:	8c620324 	lw	v0,804(v1)
bc006948:	1040fffe 	beqz	v0,bc006944 <umctl2_init_ddr+0x18>
bc00694c:	3c04b9f0 	lui	a0,0xb9f0
umctl2_init_ddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:368
void umctl2_init_ddr(void)
{
	set_quasi_dynamic_reg(0x1, DDR_UMCTL2_DFIMISC);

	// wait for controller to move to "normal" mode
	while ((readl((void *)DDR_UMCTL2_STAT) & 0x3) != 0x1)
bc006950:	24020001 	li	v0,1
bc006954:	8c830004 	lw	v1,4(a0)
bc006958:	30630003 	andi	v1,v1,0x3
bc00695c:	1462fffd 	bne	v1,v0,bc006954 <umctl2_init_ddr+0x28>
bc006960:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:370
		;
}
bc006964:	03e00008 	jr	ra
bc006968:	00000000 	nop

bc00696c <ddr_training>:
ddr_training():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:376

void ddr_training(void)
{
	u32 tmp;

	writel(0x0, (void *)DDR_UMCTL2_PWRCTL);   // diasble low power function
bc00696c:	3c02b9f0 	lui	v0,0xb9f0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:377
	writel(0x1, (void *)DDR_UMCTL2_RFSHCTL3); // disable auto-refresh
bc006970:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:376

void ddr_training(void)
{
	u32 tmp;

	writel(0x0, (void *)DDR_UMCTL2_PWRCTL);   // diasble low power function
bc006974:	ac400030 	sw	zero,48(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:377
	writel(0x1, (void *)DDR_UMCTL2_RFSHCTL3); // disable auto-refresh
bc006978:	ac430060 	sw	v1,96(v0)
set_quasi_dynamic_reg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:28
}

static inline void set_quasi_dynamic_reg(u32 value, u32 addr)
{
	// set sw_done = 0
	writel(0x0, (void *)DDR_UMCTL2_SWCTL);
bc00697c:	ac400320 	sw	zero,800(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:30
	/* config register */
	writel(value, (void *)addr);
bc006980:	ac4001b0 	sw	zero,432(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:32
	// set sw_done = 1
	writel(0x1, (void *)DDR_UMCTL2_SWCTL);
bc006984:	ac430320 	sw	v1,800(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:34
	// wait for sw_done_ack = 1
	while (!(readl((void *)DDR_UMCTL2_SWSTAT)))
bc006988:	3c03b9f0 	lui	v1,0xb9f0
bc00698c:	8c620324 	lw	v0,804(v1)
bc006990:	1040fffe 	beqz	v0,bc00698c <ddr_training+0x20>
bc006994:	3c02b9f8 	lui	v0,0xb9f8
ddr_training():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:381
	writel(0x0, (void *)DDR_UMCTL2_PWRCTL);   // diasble low power function
	writel(0x1, (void *)DDR_UMCTL2_RFSHCTL3); // disable auto-refresh
	set_quasi_dynamic_reg(0x0, DDR_UMCTL2_DFIMISC);

	// program DTCR
	tmp = readl((void *)DDR_PHY_DTCR);
bc006998:	8c440068 	lw	a0,104(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:382
	tmp &= ~((0xff << 24) | BIT(22));
bc00699c:	3c0300bf 	lui	v1,0xbf
bc0069a0:	3463ffff 	ori	v1,v1,0xffff
bc0069a4:	00831824 	and	v1,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:383
	tmp |= (0x8 << 28) | BIT(24);
bc0069a8:	3c048100 	lui	a0,0x8100
bc0069ac:	00641825 	or	v1,v1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:384
	writel(tmp, (void *)DDR_PHY_DTCR);
bc0069b0:	ac430068 	sw	v1,104(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:393
#ifdef DDR2
	tmp = (0x7a << 9) | BIT(18) | BIT(0);
#else
	tmp = (0x7f << 9) | BIT(18) | BIT(0);
#endif
	writel(tmp, (void *)DDR_PHY_PIR);
bc0069b4:	3c030004 	lui	v1,0x4
bc0069b8:	3463fe01 	ori	v1,v1,0xfe01
bc0069bc:	ac430004 	sw	v1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:395 (discriminator 1)

	while (!(readl((void *)DDR_PHY_PGSR0) & 0x1)) {
bc0069c0:	8c440010 	lw	a0,16(v0)
bc0069c4:	30840001 	andi	a0,a0,0x1
bc0069c8:	1080fffd 	beqz	a0,bc0069c0 <ddr_training+0x54>
bc0069cc:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:373
	while ((readl((void *)DDR_UMCTL2_STAT) & 0x3) != 0x1)
		;
}

void ddr_training(void)
{
bc0069d0:	27bdffe0 	addiu	sp,sp,-32
bc0069d4:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:399

	while (!(readl((void *)DDR_PHY_PGSR0) & 0x1)) {
		delay(10);
	}
	// wait for completion of training sequence
	tmp = readl((void *)DDR_PHY_PGSR0);
bc0069d8:	8c450010 	lw	a1,16(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:403
#ifdef DDR2
	if ((tmp & 0x0ff00f41) != 0x00000f41) {
#else
	if ((tmp & 0x0ff00fe1) != 0x00000fe1) {
bc0069dc:	3c030ff0 	lui	v1,0xff0
bc0069e0:	24630fe1 	addiu	v1,v1,4065
bc0069e4:	00a31824 	and	v1,a1,v1
bc0069e8:	24020fe1 	li	v0,4065
bc0069ec:	50620006 	beql	v1,v0,bc006a08 <ddr_training+0x9c>
bc0069f0:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:405
#endif
		printf("DDR training error(%#x)!!!\n", tmp);
bc0069f4:	3c04bc01 	lui	a0,0xbc01
bc0069f8:	0f002379 	jal	bc008de4 <printf>
bc0069fc:	2484923c 	addiu	a0,a0,-28100
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:409
	} else
		printf("DDR training success\n");

	writel(0x0, (void *)DDR_UMCTL2_RFSHCTL3); // enable auto-refresh
bc006a00:	0b001a85 	j	bc006a14 <ddr_training+0xa8>
bc006a04:	3c02b9f0 	lui	v0,0xb9f0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:407
#else
	if ((tmp & 0x0ff00fe1) != 0x00000fe1) {
#endif
		printf("DDR training error(%#x)!!!\n", tmp);
	} else
		printf("DDR training success\n");
bc006a08:	0f00239b 	jal	bc008e6c <puts>
bc006a0c:	24849258 	addiu	a0,a0,-28072
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:409

	writel(0x0, (void *)DDR_UMCTL2_RFSHCTL3); // enable auto-refresh
bc006a10:	3c02b9f0 	lui	v0,0xb9f0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:414
	// Enable power save: auto power-down mode and self-refresh mode.
	// Remember enable DFILPCFG0[8] when use self-refresh mode.
	//tmp = BIT(1) | BIT(0) | BIT(3);
	tmp = BIT(1);
	writel(tmp, (void *)DDR_UMCTL2_PWRCTL);
bc006a14:	24030002 	li	v1,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:409
#endif
		printf("DDR training error(%#x)!!!\n", tmp);
	} else
		printf("DDR training success\n");

	writel(0x0, (void *)DDR_UMCTL2_RFSHCTL3); // enable auto-refresh
bc006a18:	ac400060 	sw	zero,96(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:414
	// Enable power save: auto power-down mode and self-refresh mode.
	// Remember enable DFILPCFG0[8] when use self-refresh mode.
	//tmp = BIT(1) | BIT(0) | BIT(3);
	tmp = BIT(1);
	writel(tmp, (void *)DDR_UMCTL2_PWRCTL);
bc006a1c:	ac430030 	sw	v1,48(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:415
}
bc006a20:	8fbf001c 	lw	ra,28(sp)
bc006a24:	03e00008 	jr	ra
bc006a28:	27bd0020 	addiu	sp,sp,32

bc006a2c <set_pll_ratio>:
set_pll_ratio():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:464
#endif

	// enabe all power down--->close clk
	reg = PLL_BASE + offset * PLL_OFFSET + 0 * PLL_REG_WID;
	// pll red read test
	value = readl((void *)reg) | (PLL_PD_ALL_PD);
bc006a2c:	3c02b9e0 	lui	v0,0xb9e0
bc006a30:	8c431040 	lw	v1,4160(v0)
bc006a34:	34630001 	ori	v1,v1,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:465
	writeb(value, (void *)reg);
bc006a38:	306300ff 	andi	v1,v1,0xff
bc006a3c:	a0431040 	sb	v1,4160(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:469

	// clear load bit
	reg = PLL_BASE + offset * PLL_OFFSET + 7 * PLL_REG_WID;
	value = readl((void *)reg) & (~PLL_CFG_LOAD);
bc006a40:	8c43105c 	lw	v1,4188(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:470
	writeb(value, (void *)reg);
bc006a44:	306300df 	andi	v1,v1,0xdf
bc006a48:	a043105c 	sb	v1,4188(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:487
	default:
		pll_para = 0x4a00000010A;
		break;
	};
#else // for crystal 12M
	switch (freq) {
bc006a4c:	2402014d 	li	v0,333
bc006a50:	10820013 	beq	a0,v0,bc006aa0 <set_pll_ratio+0x74>
bc006a54:	2402006f 	li	v0,111
bc006a58:	2c82014e 	sltiu	v0,a0,334
bc006a5c:	10400008 	beqz	v0,bc006a80 <set_pll_ratio+0x54>
bc006a60:	240300f0 	li	v1,240
bc006a64:	1083000e 	beq	a0,v1,bc006aa0 <set_pll_ratio+0x74>
bc006a68:	24020014 	li	v0,20
bc006a6c:	2402010b 	li	v0,267
bc006a70:	5082000b 	beql	a0,v0,bc006aa0 <set_pll_ratio+0x74>
bc006a74:	24020059 	li	v0,89
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:500
	case 333:
	case 667:
		pll_para = 0x4a00000006F;
		break;
	default:
		pll_para = 0x4a000000085;
bc006a78:	0b001aa8 	j	bc006aa0 <set_pll_ratio+0x74>
bc006a7c:	24020085 	li	v0,133
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:487
	default:
		pll_para = 0x4a00000010A;
		break;
	};
#else // for crystal 12M
	switch (freq) {
bc006a80:	24020215 	li	v0,533
bc006a84:	10820005 	beq	a0,v0,bc006a9c <set_pll_ratio+0x70>
bc006a88:	2402029b 	li	v0,667
bc006a8c:	54820004 	bnel	a0,v0,bc006aa0 <set_pll_ratio+0x74>
bc006a90:	24020085 	li	v0,133
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:498
		pll_para = 0x4a000000059;
		break;
	case 333:
	case 667:
		pll_para = 0x4a00000006F;
		break;
bc006a94:	0b001aa8 	j	bc006aa0 <set_pll_ratio+0x74>
bc006a98:	2402006f 	li	v0,111
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:493
	case 240:
		pll_para = 0x4a000000014;
		break;
	case 267:
	case 533:
		pll_para = 0x4a000000059;
bc006a9c:	24020059 	li	v0,89
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:506 (discriminator 1)
		break;
	};
#endif

	for (i = 0; i < 6; i++) {
		writeb(pll_para,
bc006aa0:	304300ff 	andi	v1,v0,0xff
bc006aa4:	3c02b9e0 	lui	v0,0xb9e0
bc006aa8:	a0431044 	sb	v1,4164(v0)
bc006aac:	2403ffa0 	li	v1,-96
bc006ab0:	a0401048 	sb	zero,4168(v0)
bc006ab4:	a040104c 	sb	zero,4172(v0)
bc006ab8:	a0401050 	sb	zero,4176(v0)
bc006abc:	a0431054 	sb	v1,4180(v0)
bc006ac0:	24030004 	li	v1,4
bc006ac4:	a0431058 	sb	v1,4184(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:513 (discriminator 1)
		pll_para = pll_para >> 8;
	}

	// set load bit
	reg = PLL_BASE + offset * PLL_OFFSET + 7 * PLL_REG_WID;
	value = readl((void *)reg) | (PLL_CFG_LOAD);
bc006ac8:	8c43105c 	lw	v1,4188(v0)
bc006acc:	34630020 	ori	v1,v1,0x20
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:514 (discriminator 1)
	writeb(value, (void *)reg);
bc006ad0:	306300ff 	andi	v1,v1,0xff
bc006ad4:	a043105c 	sb	v1,4188(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:518 (discriminator 1)

	// clear all powerdown bit
	reg = PLL_BASE + offset * PLL_OFFSET + 0 * PLL_REG_WID;
	value = readl((void *)reg) & (~(PLL_PD_ALL_PD));
bc006ad8:	8c431040 	lw	v1,4160(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:519 (discriminator 1)
	writeb(value, (void *)reg);
bc006adc:	306300fe 	andi	v1,v1,0xfe
bc006ae0:	a0431040 	sb	v1,4160(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:565 (discriminator 1)
		saved = 1;
	}
#endif
	// waiting for pll locked
	reg = PLL_BASE + offset * PLL_OFFSET + 8 * PLL_REG_WID;
	while (!readl((void *)reg))
bc006ae4:	3c03b9e0 	lui	v1,0xb9e0
bc006ae8:	8c621060 	lw	v0,4192(v1)
bc006aec:	1040fffe 	beqz	v0,bc006ae8 <set_pll_ratio+0xbc>
bc006af0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:569
		;

	return;
}
bc006af4:	03e00008 	jr	ra
bc006af8:	00000000 	nop

bc006afc <set_ddr_clock>:
set_ddr_clock():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:572

void set_ddr_clock(u32 freq)
{
bc006afc:	27bdffe0 	addiu	sp,sp,-32
bc006b00:	afb00018 	sw	s0,24(sp)
bc006b04:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:578
	u32 div;

#ifdef MPW0
	set_pll_ratio(freq, 0, 0);
#else
	set_pll_ratio(freq);
bc006b08:	0f001a8b 	jal	bc006a2c <set_pll_ratio>
bc006b0c:	00808021 	move	s0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:581
#endif

	if (freq == 667 || freq == 533 )
bc006b10:	2402029b 	li	v0,667
bc006b14:	1202000d 	beq	s0,v0,bc006b4c <set_ddr_clock+0x50>
bc006b18:	24020215 	li	v0,533
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:581 (discriminator 1)
bc006b1c:	1202000b 	beq	s0,v0,bc006b4c <set_ddr_clock+0x50>
bc006b20:	2402014d 	li	v0,333
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:583
		div = 1;
	else if (freq == 333 || freq == 400 || freq == 267)
bc006b24:	1202000b 	beq	s0,v0,bc006b54 <set_ddr_clock+0x58>
bc006b28:	24020190 	li	v0,400
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:583 (discriminator 1)
bc006b2c:	12020009 	beq	s0,v0,bc006b54 <set_ddr_clock+0x58>
bc006b30:	2402010b 	li	v0,267
bc006b34:	12020007 	beq	s0,v0,bc006b54 <set_ddr_clock+0x58>
bc006b38:	2602031d 	addiu	v0,s0,797
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:586
		div = 2;
	else
		div = DIV_ROUND_UP(798, freq);
bc006b3c:	0050001b 	divu	zero,v0,s0
bc006b40:	020001f4 	teq	s0,zero,0x7
bc006b44:	0b001ad6 	j	bc006b58 <set_ddr_clock+0x5c>
bc006b48:	00008012 	mflo	s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:582
#else
	set_pll_ratio(freq);
#endif

	if (freq == 667 || freq == 533 )
		div = 1;
bc006b4c:	0b001ad6 	j	bc006b58 <set_ddr_clock+0x5c>
bc006b50:	24100001 	li	s0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:584
	else if (freq == 333 || freq == 400 || freq == 267)
		div = 2;
bc006b54:	24100002 	li	s0,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:588
	else
		div = DIV_ROUND_UP(798, freq);
#ifndef MPW0
	div *= 2;
bc006b58:	00108040 	sll	s0,s0,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:590
#endif
	writel(div - 1, (void *)MEM_PHY_CLK_DIV);
bc006b5c:	2610ffff 	addiu	s0,s0,-1
bc006b60:	3c02b9e0 	lui	v0,0xb9e0
bc006b64:	ac501544 	sw	s0,5444(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:592
	printf("MEM_PHY_CLK_DIV = %#x\n", readl((void *)MEM_PHY_CLK_DIV));
}
bc006b68:	8fbf001c 	lw	ra,28(sp)
bc006b6c:	8fb00018 	lw	s0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr_common.c:591
		div = DIV_ROUND_UP(798, freq);
#ifndef MPW0
	div *= 2;
#endif
	writel(div - 1, (void *)MEM_PHY_CLK_DIV);
	printf("MEM_PHY_CLK_DIV = %#x\n", readl((void *)MEM_PHY_CLK_DIV));
bc006b70:	8c451544 	lw	a1,5444(v0)
bc006b74:	3c04bc01 	lui	a0,0xbc01
bc006b78:	24849270 	addiu	a0,a0,-28048
bc006b7c:	0b002379 	j	bc008de4 <printf>
bc006b80:	27bd0020 	addiu	sp,sp,32

bc006b84 <ddr_set_timing>:
ddr_set_timing():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:162

        SET_COMMON_PARA()
};

void ddr_set_timing(struct ddr_info *ddr)
{
bc006b84:	27bdffe0 	addiu	sp,sp,-32
bc006b88:	afb00018 	sw	s0,24(sp)
bc006b8c:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:164
	struct ddr_timing *t;
	switch (ddr->freq) {
bc006b90:	94850002 	lhu	a1,2(a0)
bc006b94:	24020215 	li	v0,533
bc006b98:	10a20010 	beq	a1,v0,bc006bdc <ddr_set_timing+0x58>
bc006b9c:	00808021 	move	s0,a0
bc006ba0:	2ca20216 	sltiu	v0,a1,534
bc006ba4:	10400006 	beqz	v0,bc006bc0 <ddr_set_timing+0x3c>
bc006ba8:	2402029b 	li	v0,667
bc006bac:	24020190 	li	v0,400
bc006bb0:	10a20019 	beq	a1,v0,bc006c18 <ddr_set_timing+0x94>
bc006bb4:	3c02bc01 	lui	v0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:178
		break;
	case 800:
		ddr->timing = &ddr_1600Mbps;
		break;
        default:
		printf("ERROR: DDR freq %dMHz not support!!!\n", ddr->freq);
bc006bb8:	0b001afd 	j	bc006bf4 <ddr_set_timing+0x70>
bc006bbc:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:164
};

void ddr_set_timing(struct ddr_info *ddr)
{
	struct ddr_timing *t;
	switch (ddr->freq) {
bc006bc0:	10a20009 	beq	a1,v0,bc006be8 <ddr_set_timing+0x64>
bc006bc4:	3c02bc01 	lui	v0,0xbc01
bc006bc8:	24020320 	li	v0,800
bc006bcc:	14a20008 	bne	a1,v0,bc006bf0 <ddr_set_timing+0x6c>
bc006bd0:	3c02bc01 	lui	v0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:175
		break;
	case 667:
		ddr->timing = &ddr_1333Mbps;
		break;
	case 800:
		ddr->timing = &ddr_1600Mbps;
bc006bd4:	0b001b07 	j	bc006c1c <ddr_set_timing+0x98>
bc006bd8:	24429680 	addiu	v0,v0,-27008
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:169
	switch (ddr->freq) {
	case 400:
		ddr->timing = &ddr_800Mbps;
		break;
        case 533:
		ddr->timing = &ddr_1066Mbps;
bc006bdc:	3c02bc01 	lui	v0,0xbc01
bc006be0:	0b001b07 	j	bc006c1c <ddr_set_timing+0x98>
bc006be4:	244297c8 	addiu	v0,v0,-26680
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:172
		break;
	case 667:
		ddr->timing = &ddr_1333Mbps;
bc006be8:	0b001b07 	j	bc006c1c <ddr_set_timing+0x98>
bc006bec:	24429724 	addiu	v0,v0,-26844
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:178
		break;
	case 800:
		ddr->timing = &ddr_1600Mbps;
		break;
        default:
		printf("ERROR: DDR freq %dMHz not support!!!\n", ddr->freq);
bc006bf0:	3c04bc01 	lui	a0,0xbc01
bc006bf4:	0f002379 	jal	bc008de4 <printf>
bc006bf8:	24849288 	addiu	a0,a0,-28024
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:179
		ddr->freq = 400;
bc006bfc:	24020190 	li	v0,400
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:180
		printf("Use default value %dMHz!!!\n", ddr->freq);
bc006c00:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:179
	case 800:
		ddr->timing = &ddr_1600Mbps;
		break;
        default:
		printf("ERROR: DDR freq %dMHz not support!!!\n", ddr->freq);
		ddr->freq = 400;
bc006c04:	a6020002 	sh	v0,2(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:180
		printf("Use default value %dMHz!!!\n", ddr->freq);
bc006c08:	248492b0 	addiu	a0,a0,-27984
bc006c0c:	0f002379 	jal	bc008de4 <printf>
bc006c10:	24050190 	li	a1,400
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:181
                ddr->timing = &ddr_800Mbps;
bc006c14:	3c02bc01 	lui	v0,0xbc01
bc006c18:	2442986c 	addiu	v0,v0,-26516
bc006c1c:	ae020008 	sw	v0,8(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:183
	}
	t = ddr->timing;
bc006c20:	8e020008 	lw	v0,8(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:186
#undef Tck
#define Tck (t->tck)
	t->wl = t->al + t->cwl;
bc006c24:	8c430018 	lw	v1,24(v0)
bc006c28:	8c44001c 	lw	a0,28(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:190
	t->rl = t->al + t->cl;
	t->tckesr = t->tcke + 1;
	t->tras_max = 9 * t->trefi;
	t->txs = MAX((u32)5, ns_to_tck(10) + t->trfc);
bc006c2c:	8c450038 	lw	a1,56(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:186
                ddr->timing = &ddr_800Mbps;
	}
	t = ddr->timing;
#undef Tck
#define Tck (t->tck)
	t->wl = t->al + t->cwl;
bc006c30:	00832021 	addu	a0,a0,v1
bc006c34:	ac440020 	sw	a0,32(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:187
	t->rl = t->al + t->cl;
bc006c38:	8c440014 	lw	a0,20(v0)
bc006c3c:	00831821 	addu	v1,a0,v1
bc006c40:	ac430024 	sw	v1,36(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:188
	t->tckesr = t->tcke + 1;
bc006c44:	8c430094 	lw	v1,148(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:189
	t->tras_max = 9 * t->trefi;
bc006c48:	8c440028 	lw	a0,40(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:188
	t = ddr->timing;
#undef Tck
#define Tck (t->tck)
	t->wl = t->al + t->cwl;
	t->rl = t->al + t->cl;
	t->tckesr = t->tcke + 1;
bc006c4c:	24630001 	addiu	v1,v1,1
bc006c50:	ac4300a0 	sw	v1,160(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:189
	t->tras_max = 9 * t->trefi;
bc006c54:	24030009 	li	v1,9
bc006c58:	70831802 	mul	v1,a0,v1
bc006c5c:	ac430048 	sw	v1,72(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:190
	t->txs = MAX((u32)5, ns_to_tck(10) + t->trfc);
bc006c60:	8c430000 	lw	v1,0(v0)
bc006c64:	2464270f 	addiu	a0,v1,9999
bc006c68:	0083001b 	divu	zero,a0,v1
bc006c6c:	006001f4 	teq	v1,zero,0x7
bc006c70:	24040005 	li	a0,5
bc006c74:	00001812 	mflo	v1
bc006c78:	00651821 	addu	v1,v1,a1
bc006c7c:	2c650005 	sltiu	a1,v1,5
bc006c80:	0085180b 	movn	v1,a0,a1
bc006c84:	ac430068 	sw	v1,104(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:191
        t->txpr = MAX((u32)5, ns_to_tck(10) + t->trfc);
bc006c88:	ac43006c 	sw	v1,108(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/ddr/ddr3_nt5cc128m16ip.c:192
}
bc006c8c:	8fbf001c 	lw	ra,28(sp)
bc006c90:	8fb00018 	lw	s0,24(sp)
bc006c94:	03e00008 	jr	ra
bc006c98:	27bd0020 	addiu	sp,sp,32

bc006c9c <spi_flash_read_write>:
spi_flash_read_write():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:46
	cmd[3] = addr >> 0;
}

static int spi_flash_read_write(const u8 *cmd, u32 cmd_len,
				const u8 *data_out, u8 *data_in, u32 data_len)
{
bc006c9c:	27bdffd0 	addiu	sp,sp,-48
bc006ca0:	afb1001c 	sw	s1,28(sp)
bc006ca4:	8fb10040 	lw	s1,64(sp)
bc006ca8:	00801021 	move	v0,a0
bc006cac:	afb30024 	sw	s3,36(sp)
bc006cb0:	afb20020 	sw	s2,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:53
	int ret;

	if (data_len == 0)
		flags |= SPI_XFER_END;

	ret = SPI_xfer(cmd_len * 8, cmd, NULL, flags);
bc006cb4:	000520c0 	sll	a0,a1,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:46
	cmd[3] = addr >> 0;
}

static int spi_flash_read_write(const u8 *cmd, u32 cmd_len,
				const u8 *data_out, u8 *data_in, u32 data_len)
{
bc006cb8:	00a09021 	move	s2,a1
bc006cbc:	00e09821 	move	s3,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:53
	int ret;

	if (data_len == 0)
		flags |= SPI_XFER_END;

	ret = SPI_xfer(cmd_len * 8, cmd, NULL, flags);
bc006cc0:	00402821 	move	a1,v0
bc006cc4:	24070003 	li	a3,3
bc006cc8:	24020001 	li	v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:46
	cmd[3] = addr >> 0;
}

static int spi_flash_read_write(const u8 *cmd, u32 cmd_len,
				const u8 *data_out, u8 *data_in, u32 data_len)
{
bc006ccc:	afb40028 	sw	s4,40(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:53
	int ret;

	if (data_len == 0)
		flags |= SPI_XFER_END;

	ret = SPI_xfer(cmd_len * 8, cmd, NULL, flags);
bc006cd0:	0051380b 	movn	a3,v0,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:46
	cmd[3] = addr >> 0;
}

static int spi_flash_read_write(const u8 *cmd, u32 cmd_len,
				const u8 *data_out, u8 *data_in, u32 data_len)
{
bc006cd4:	00c0a021 	move	s4,a2
bc006cd8:	afb00018 	sw	s0,24(sp)
bc006cdc:	afbf002c 	sw	ra,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:53
	int ret;

	if (data_len == 0)
		flags |= SPI_XFER_END;

	ret = SPI_xfer(cmd_len * 8, cmd, NULL, flags);
bc006ce0:	0f001c2f 	jal	bc0070bc <SPI_xfer>
bc006ce4:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:54
	if (ret) {
bc006ce8:	10400005 	beqz	v0,bc006d00 <spi_flash_read_write+0x64>
bc006cec:	00408021 	move	s0,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:55
		printf("SF: Failed to send command (%u bytes): %d\n", cmd_len, ret);
bc006cf0:	3c04bc01 	lui	a0,0xbc01
bc006cf4:	248492cc 	addiu	a0,a0,-27956
bc006cf8:	0b001b4c 	j	bc006d30 <spi_flash_read_write+0x94>
bc006cfc:	02402821 	move	a1,s2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:56
	} else if (data_len != 0) {
bc006d00:	1220000e 	beqz	s1,bc006d3c <spi_flash_read_write+0xa0>
bc006d04:	8fbf002c 	lw	ra,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:57
		ret = SPI_xfer(data_len * 8, data_out, data_in, SPI_XFER_END);
bc006d08:	001120c0 	sll	a0,s1,0x3
bc006d0c:	02802821 	move	a1,s4
bc006d10:	02603021 	move	a2,s3
bc006d14:	0f001c2f 	jal	bc0070bc <SPI_xfer>
bc006d18:	24070002 	li	a3,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:58
		if (ret)
bc006d1c:	10400006 	beqz	v0,bc006d38 <spi_flash_read_write+0x9c>
bc006d20:	00408021 	move	s0,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:59
			printf("SF: Failed to transfer %u bytes of data: %d\n",
bc006d24:	3c04bc01 	lui	a0,0xbc01
bc006d28:	248492f8 	addiu	a0,a0,-27912
bc006d2c:	02202821 	move	a1,s1
bc006d30:	0f002379 	jal	bc008de4 <printf>
bc006d34:	02003021 	move	a2,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:64
			      data_len, ret);
	}

	return ret;
}
bc006d38:	8fbf002c 	lw	ra,44(sp)
bc006d3c:	02001021 	move	v0,s0
bc006d40:	8fb40028 	lw	s4,40(sp)
bc006d44:	8fb30024 	lw	s3,36(sp)
bc006d48:	8fb20020 	lw	s2,32(sp)
bc006d4c:	8fb1001c 	lw	s1,28(sp)
bc006d50:	8fb00018 	lw	s0,24(sp)
bc006d54:	03e00008 	jr	ra
bc006d58:	27bd0030 	addiu	sp,sp,48

bc006d5c <spi_flash_write_common>:
spi_flash_write_common():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:118
	return -EFAULT;
}

static int spi_flash_write_common(const u8 *cmd, u32 cmd_len,
		const void *buf, u32 buf_len)
{
bc006d5c:	27bdffc0 	addiu	sp,sp,-64
bc006d60:	afb40038 	sw	s4,56(sp)
bc006d64:	afb30034 	sw	s3,52(sp)
bc006d68:	afb20030 	sw	s2,48(sp)
bc006d6c:	afb1002c 	sw	s1,44(sp)
bc006d70:	afbf003c 	sw	ra,60(sp)
bc006d74:	afb00028 	sw	s0,40(sp)
bc006d78:	00809821 	move	s3,a0
bc006d7c:	00a09021 	move	s2,a1
bc006d80:	00c08821 	move	s1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:122
	unsigned long timeout = SPI_FLASH_PROG_TIMEOUT;
	int ret;

	if (buf == NULL)
bc006d84:	10c00004 	beqz	a2,bc006d98 <spi_flash_write_common+0x3c>
bc006d88:	00e0a021 	move	s4,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:119
}

static int spi_flash_write_common(const u8 *cmd, u32 cmd_len,
		const void *buf, u32 buf_len)
{
	unsigned long timeout = SPI_FLASH_PROG_TIMEOUT;
bc006d8c:	3c100003 	lui	s0,0x3
bc006d90:	0b001b68 	j	bc006da0 <spi_flash_write_common+0x44>
bc006d94:	26100d40 	addiu	s0,s0,3392
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:123
	int ret;

	if (buf == NULL)
		timeout = SPI_FLASH_PAGE_ERASE_TIMEOUT;
bc006d98:	3c10004c 	lui	s0,0x4c
bc006d9c:	26104b40 	addiu	s0,s0,19264
bc006da0:	24020006 	li	v0,6
spi_flash_cmd_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:69
}

static int spi_flash_cmd_read(const u8 *cmd,u32 cmd_len, void *data,
		u32 data_len)
{
	return spi_flash_read_write(cmd, cmd_len, NULL, data, data_len);
bc006da4:	27a40022 	addiu	a0,sp,34
bc006da8:	24050001 	li	a1,1
bc006dac:	00003021 	move	a2,zero
bc006db0:	00003821 	move	a3,zero
bc006db4:	afa00010 	sw	zero,16(sp)
bc006db8:	0f001b27 	jal	bc006c9c <spi_flash_read_write>
bc006dbc:	a3a20022 	sb	v0,34(sp)
spi_flash_cmd_write():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:75
}

static int spi_flash_cmd_write(const u8 *cmd, u32 cmd_len,
		const void *data, u32 data_len)
{
	return spi_flash_read_write(cmd, cmd_len, data, NULL, data_len);
bc006dc0:	afb40010 	sw	s4,16(sp)
bc006dc4:	02602021 	move	a0,s3
bc006dc8:	02402821 	move	a1,s2
bc006dcc:	02203021 	move	a2,s1
bc006dd0:	0f001b27 	jal	bc006c9c <spi_flash_read_write>
bc006dd4:	00003821 	move	a3,zero
spi_flash_cmd_wait_ready():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:103
static int spi_flash_cmd_wait_ready(unsigned long timeout)
{
	int ret;
	unsigned long time = 0;

	while (time < timeout / 10) {
bc006dd8:	2402000a 	li	v0,10
bc006ddc:	0202001b 	divu	zero,s0,v0
bc006de0:	004001f4 	teq	v0,zero,0x7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:101
}

static int spi_flash_cmd_wait_ready(unsigned long timeout)
{
	int ret;
	unsigned long time = 0;
bc006de4:	00008821 	move	s1,zero
spi_flash_ready():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:91
}

static int spi_flash_ready()
{
	u8 sr;
	u8 cmd = FLASH_Read_SR;
bc006de8:	24130005 	li	s3,5
spi_flash_cmd_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:69
}

static int spi_flash_cmd_read(const u8 *cmd,u32 cmd_len, void *data,
		u32 data_len)
{
	return spi_flash_read_write(cmd, cmd_len, NULL, data, data_len);
bc006dec:	24140001 	li	s4,1
spi_flash_cmd_wait_ready():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:103
static int spi_flash_cmd_wait_ready(unsigned long timeout)
{
	int ret;
	unsigned long time = 0;

	while (time < timeout / 10) {
bc006df0:	00009012 	mflo	s2
spi_flash_cmd_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:69
}

static int spi_flash_cmd_read(const u8 *cmd,u32 cmd_len, void *data,
		u32 data_len)
{
	return spi_flash_read_write(cmd, cmd_len, NULL, data, data_len);
bc006df4:	afb40010 	sw	s4,16(sp)
bc006df8:	27a40020 	addiu	a0,sp,32
bc006dfc:	24050001 	li	a1,1
bc006e00:	00003021 	move	a2,zero
bc006e04:	27a70021 	addiu	a3,sp,33
bc006e08:	0f001b27 	jal	bc006c9c <spi_flash_read_write>
bc006e0c:	a3b30020 	sb	s3,32(sp)
spi_flash_ready():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:95
	u8 sr;
	u8 cmd = FLASH_Read_SR;

	spi_flash_read_common(&cmd, 1, &sr, 1);

	return !(sr & FLASH_BSY);
bc006e10:	93a20021 	lbu	v0,33(sp)
bc006e14:	30420001 	andi	v0,v0,0x1
spi_flash_cmd_wait_ready():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:105
	int ret;
	unsigned long time = 0;

	while (time < timeout / 10) {
		ret = spi_flash_ready();
		if (ret)
bc006e18:	10400015 	beqz	v0,bc006e70 <spi_flash_write_common+0x114>
bc006e1c:	2404000a 	li	a0,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:107
			return 0;
		u_delay(10);
bc006e20:	0f001080 	jal	bc004200 <u_delay_cpu>
bc006e24:	26310001 	addiu	s1,s1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:103
static int spi_flash_cmd_wait_ready(unsigned long timeout)
{
	int ret;
	unsigned long time = 0;

	while (time < timeout / 10) {
bc006e28:	5632fff3 	bnel	s1,s2,bc006df8 <spi_flash_write_common+0x9c>
bc006e2c:	afb40010 	sw	s4,16(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:111
			return 0;
		u_delay(10);
		time++;
	}

	printf("SF: Timeout!\n");
bc006e30:	3c04bc01 	lui	a0,0xbc01
bc006e34:	0f00239b 	jal	bc008e6c <puts>
bc006e38:	2484933c 	addiu	a0,a0,-27844
spi_flash_write_common():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:131

	spi_flash_cmd_write(cmd, cmd_len, buf, buf_len);

	ret = spi_flash_cmd_wait_ready(timeout);
	if (ret < 0) {
		printf("SF: write %s timed out\n",
bc006e3c:	3c020003 	lui	v0,0x3
bc006e40:	24420d40 	addiu	v0,v0,3392
bc006e44:	56020004 	bnel	s0,v0,bc006e58 <spi_flash_write_common+0xfc>
bc006e48:	3c05bc01 	lui	a1,0xbc01
bc006e4c:	3c05bc01 	lui	a1,0xbc01
bc006e50:	0b001b97 	j	bc006e5c <spi_flash_write_common+0x100>
bc006e54:	24a59328 	addiu	a1,a1,-27864
bc006e58:	24a59330 	addiu	a1,a1,-27856
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:131 (discriminator 3)
bc006e5c:	3c04bc01 	lui	a0,0xbc01
bc006e60:	0f002379 	jal	bc008de4 <printf>
bc006e64:	2484934c 	addiu	a0,a0,-27828
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:134 (discriminator 3)
		      timeout == SPI_FLASH_PROG_TIMEOUT ?
			"program" : "page erase");
		return ret;
bc006e68:	0b001b9d 	j	bc006e74 <spi_flash_write_common+0x118>
bc006e6c:	2402fff2 	li	v0,-14
spi_flash_cmd_wait_ready():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:106
	unsigned long time = 0;

	while (time < timeout / 10) {
		ret = spi_flash_ready();
		if (ret)
			return 0;
bc006e70:	00001021 	move	v0,zero
spi_flash_write_common():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:138
			"program" : "page erase");
		return ret;
	}

	return ret;
}
bc006e74:	8fbf003c 	lw	ra,60(sp)
bc006e78:	8fb40038 	lw	s4,56(sp)
bc006e7c:	8fb30034 	lw	s3,52(sp)
bc006e80:	8fb20030 	lw	s2,48(sp)
bc006e84:	8fb1002c 	lw	s1,44(sp)
bc006e88:	8fb00028 	lw	s0,40(sp)
bc006e8c:	03e00008 	jr	ra
bc006e90:	27bd0040 	addiu	sp,sp,64

bc006e94 <spi_flash_write_bar>:
spi_flash_write_bar():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:141

static int spi_flash_write_bar(u32 bank_sel)
{
bc006e94:	27bdffd8 	addiu	sp,sp,-40
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:145
	u8 cmd;

	cmd = FLASH_Write_ExtnAddr;
	return spi_flash_write_common(&cmd, 1, &bank_sel, 1);
bc006e98:	27a60028 	addiu	a2,sp,40
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:144

static int spi_flash_write_bar(u32 bank_sel)
{
	u8 cmd;

	cmd = FLASH_Write_ExtnAddr;
bc006e9c:	2402ffc5 	li	v0,-59
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:141

	return ret;
}

static int spi_flash_write_bar(u32 bank_sel)
{
bc006ea0:	afa40028 	sw	a0,40(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:145
	u8 cmd;

	cmd = FLASH_Write_ExtnAddr;
	return spi_flash_write_common(&cmd, 1, &bank_sel, 1);
bc006ea4:	24050001 	li	a1,1
bc006ea8:	27a40018 	addiu	a0,sp,24
bc006eac:	24070001 	li	a3,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:141

	return ret;
}

static int spi_flash_write_bar(u32 bank_sel)
{
bc006eb0:	afbf0024 	sw	ra,36(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:145
	u8 cmd;

	cmd = FLASH_Write_ExtnAddr;
	return spi_flash_write_common(&cmd, 1, &bank_sel, 1);
bc006eb4:	0f001b57 	jal	bc006d5c <spi_flash_write_common>
bc006eb8:	a3a20018 	sb	v0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:146
}
bc006ebc:	8fbf0024 	lw	ra,36(sp)
bc006ec0:	03e00008 	jr	ra
bc006ec4:	27bd0028 	addiu	sp,sp,40

bc006ec8 <SPI_FLASH_Read>:
SPI_FLASH_Read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:149

int SPI_FLASH_Read(u8 chnum, u32 offset, u8 *data, u32 len)
{
bc006ec8:	27bdffb8 	addiu	sp,sp,-72
bc006ecc:	afb4003c 	sw	s4,60(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:153
	const u8 cmdsz = SPI_FLASH_CMD_LEN + SPI_FLASH_DUMMY_BYTE;
	u8 cmd[SPI_FLASH_CMD_LEN + SPI_FLASH_DUMMY_BYTE]={0};
	u32 remain_len, read_len, read_addr;
	int bank_sel = offset / SPI_FLASH_16MB_BOUN;
bc006ed0:	0005a602 	srl	s4,a1,0x18
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:149
	cmd = FLASH_Write_ExtnAddr;
	return spi_flash_write_common(&cmd, 1, &bank_sel, 1);
}

int SPI_FLASH_Read(u8 chnum, u32 offset, u8 *data, u32 len)
{
bc006ed4:	afbf0044 	sw	ra,68(sp)
bc006ed8:	afb50040 	sw	s5,64(sp)
bc006edc:	afb20034 	sw	s2,52(sp)
bc006ee0:	afb10030 	sw	s1,48(sp)
bc006ee4:	afb0002c 	sw	s0,44(sp)
bc006ee8:	00c0a821 	move	s5,a2
bc006eec:	00a08021 	move	s0,a1
bc006ef0:	00e09021 	move	s2,a3
bc006ef4:	afb30038 	sw	s3,56(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:151
	const u8 cmdsz = SPI_FLASH_CMD_LEN + SPI_FLASH_DUMMY_BYTE;
	u8 cmd[SPI_FLASH_CMD_LEN + SPI_FLASH_DUMMY_BYTE]={0};
bc006ef8:	afa00020 	sw	zero,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:157
	u32 remain_len, read_len, read_addr;
	int bank_sel = offset / SPI_FLASH_16MB_BOUN;
	int bank_curr = 0;
	int ret = -1;

	SPI_Init();
bc006efc:	0f001c0c 	jal	bc007030 <SPI_Init>
bc006f00:	a3a00024 	sb	zero,36(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:159

	cmd[0] = FLASH_Fast_Read;
bc006f04:	2402000b 	li	v0,11
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:161

	if ((ret = spi_flash_write_bar(bank_sel)) < 0)
bc006f08:	02802021 	move	a0,s4
bc006f0c:	0f001ba5 	jal	bc006e94 <spi_flash_write_bar>
bc006f10:	a3a20020 	sb	v0,32(sp)
bc006f14:	04400024 	bltz	v0,bc006fa8 <SPI_FLASH_Read+0xe0>
bc006f18:	00408821 	move	s1,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:165 (discriminator 1)
		return ret;
	bank_curr = bank_sel;

	while (len) {
bc006f1c:	12400022 	beqz	s2,bc006fa8 <SPI_FLASH_Read+0xe0>
bc006f20:	00109e02 	srl	s3,s0,0x18
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:169
		read_addr = offset;

		bank_sel = read_addr / SPI_FLASH_16MB_BOUN;
		if (bank_sel != bank_curr) {
bc006f24:	52740006 	beql	s3,s4,bc006f40 <SPI_FLASH_Read+0x78>
bc006f28:	26730001 	addiu	s3,s3,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:170
			if ((ret = spi_flash_write_bar(bank_sel)) < 0)
bc006f2c:	0f001ba5 	jal	bc006e94 <spi_flash_write_bar>
bc006f30:	02602021 	move	a0,s3
bc006f34:	0440001d 	bltz	v0,bc006fac <SPI_FLASH_Read+0xe4>
bc006f38:	0260a021 	move	s4,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:175
				return ret;
			bank_curr = bank_sel;
		}

		remain_len = (SPI_FLASH_16MB_BOUN  * (bank_sel + 1)) - offset;
bc006f3c:	26730001 	addiu	s3,s3,1
bc006f40:	00139e00 	sll	s3,s3,0x18
bc006f44:	02709823 	subu	s3,s3,s0
bc006f48:	0253102b 	sltu	v0,s2,s3
bc006f4c:	0242980b 	movn	s3,s2,v0
spi_flash_addr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:39
#endif

static void spi_flash_addr(u32 addr, u8 *cmd)
{
	/* cmd[0] is actual command */
	cmd[1] = addr >> 16;
bc006f50:	00101402 	srl	v0,s0,0x10
bc006f54:	a3a20021 	sb	v0,33(sp)
spi_flash_cmd_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:69
}

static int spi_flash_cmd_read(const u8 *cmd,u32 cmd_len, void *data,
		u32 data_len)
{
	return spi_flash_read_write(cmd, cmd_len, NULL, data, data_len);
bc006f58:	afb30010 	sw	s3,16(sp)
spi_flash_addr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:40

static void spi_flash_addr(u32 addr, u8 *cmd)
{
	/* cmd[0] is actual command */
	cmd[1] = addr >> 16;
	cmd[2] = addr >> 8;
bc006f5c:	00101202 	srl	v0,s0,0x8
spi_flash_cmd_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:69
}

static int spi_flash_cmd_read(const u8 *cmd,u32 cmd_len, void *data,
		u32 data_len)
{
	return spi_flash_read_write(cmd, cmd_len, NULL, data, data_len);
bc006f60:	27a40020 	addiu	a0,sp,32
bc006f64:	24050005 	li	a1,5
bc006f68:	00003021 	move	a2,zero
bc006f6c:	02a03821 	move	a3,s5
spi_flash_addr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:40

static void spi_flash_addr(u32 addr, u8 *cmd)
{
	/* cmd[0] is actual command */
	cmd[1] = addr >> 16;
	cmd[2] = addr >> 8;
bc006f70:	a3a20022 	sb	v0,34(sp)
spi_flash_cmd_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:69
}

static int spi_flash_cmd_read(const u8 *cmd,u32 cmd_len, void *data,
		u32 data_len)
{
	return spi_flash_read_write(cmd, cmd_len, NULL, data, data_len);
bc006f74:	0f001b27 	jal	bc006c9c <spi_flash_read_write>
bc006f78:	a3b00023 	sb	s0,35(sp)
SPI_FLASH_Read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:184
			read_len = remain_len;

		spi_flash_addr(read_addr, cmd);

		ret = spi_flash_read_common(cmd, cmdsz, data, read_len);
		if (ret < 0) {
bc006f7c:	04410006 	bgez	v0,bc006f98 <SPI_FLASH_Read+0xd0>
bc006f80:	00408821 	move	s1,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:185
			printf("SF: read failed\n");
bc006f84:	3c04bc01 	lui	a0,0xbc01
bc006f88:	0f00239b 	jal	bc008e6c <puts>
bc006f8c:	24849364 	addiu	a0,a0,-27804
bc006f90:	0b001beb 	j	bc006fac <SPI_FLASH_Read+0xe4>
bc006f94:	02201021 	move	v0,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:189
			break;
		}

		offset += read_len;
bc006f98:	02138021 	addu	s0,s0,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:190
		len -= read_len;
bc006f9c:	02539023 	subu	s2,s2,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:191
		data += read_len;
bc006fa0:	0b001bc7 	j	bc006f1c <SPI_FLASH_Read+0x54>
bc006fa4:	02b3a821 	addu	s5,s5,s3
bc006fa8:	02201021 	move	v0,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:195
	}

	return ret;
}
bc006fac:	8fbf0044 	lw	ra,68(sp)
bc006fb0:	8fb50040 	lw	s5,64(sp)
bc006fb4:	8fb4003c 	lw	s4,60(sp)
bc006fb8:	8fb30038 	lw	s3,56(sp)
bc006fbc:	8fb20034 	lw	s2,52(sp)
bc006fc0:	8fb10030 	lw	s1,48(sp)
bc006fc4:	8fb0002c 	lw	s0,44(sp)
bc006fc8:	03e00008 	jr	ra
bc006fcc:	27bd0048 	addiu	sp,sp,72

bc006fd0 <SPI_FLASH_GetDeviceID>:
SPI_FLASH_GetDeviceID():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:253

	return ret;
}

u32 SPI_FLASH_GetDeviceID(u8 chnum)
{
bc006fd0:	27bdffd0 	addiu	sp,sp,-48
bc006fd4:	afbf002c 	sw	ra,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:255
	u32 jedec;
	u8 idcode[5] = {0};
bc006fd8:	afa00020 	sw	zero,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:257

	SPI_Init();
bc006fdc:	0f001c0c 	jal	bc007030 <SPI_Init>
bc006fe0:	a3a00024 	sb	zero,36(sp)
bc006fe4:	2402ff9f 	li	v0,-97
bc006fe8:	a3a20025 	sb	v0,37(sp)
spi_flash_cmd_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:69
}

static int spi_flash_cmd_read(const u8 *cmd,u32 cmd_len, void *data,
		u32 data_len)
{
	return spi_flash_read_write(cmd, cmd_len, NULL, data, data_len);
bc006fec:	24020005 	li	v0,5
bc006ff0:	27a40025 	addiu	a0,sp,37
bc006ff4:	27a70020 	addiu	a3,sp,32
bc006ff8:	afa20010 	sw	v0,16(sp)
bc006ffc:	24050001 	li	a1,1
bc007000:	0f001b27 	jal	bc006c9c <spi_flash_read_write>
bc007004:	00003021 	move	a2,zero
SPI_FLASH_GetDeviceID():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:261

	SPI_Init();

	spi_flash_cmd(FLASH_Read_ID, idcode, sizeof(idcode));

	jedec = (idcode[0] << 16) | (idcode[1] << 8) | idcode[2];
bc007008:	93a30020 	lbu	v1,32(sp)
bc00700c:	93a20021 	lbu	v0,33(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:263
	return jedec;
}
bc007010:	8fbf002c 	lw	ra,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:261

	SPI_Init();

	spi_flash_cmd(FLASH_Read_ID, idcode, sizeof(idcode));

	jedec = (idcode[0] << 16) | (idcode[1] << 8) | idcode[2];
bc007014:	00031c00 	sll	v1,v1,0x10
bc007018:	00021200 	sll	v0,v0,0x8
bc00701c:	00621825 	or	v1,v1,v0
bc007020:	93a20022 	lbu	v0,34(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/flash.c:263
	return jedec;
}
bc007024:	27bd0030 	addiu	sp,sp,48
bc007028:	03e00008 	jr	ra
bc00702c:	00621025 	or	v0,v1,v0

bc007030 <SPI_Init>:
SPI_Init():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:118
 *	Return:none.															  *
 ******************************************************************************/
void SPI_Init()			
{
	struct sfa18_spi_registers *reg = (struct sfa18_spi_registers *)SPI_BASE;
	writel(0x7, &reg->sspcr0);
bc007030:	3c02b820 	lui	v0,0xb820
bc007034:	24030007 	li	v1,7
bc007038:	ac430000 	sw	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:119
	writel(0x0, &reg->sspcr1);
bc00703c:	ac400004 	sw	zero,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:120
	writel(0x0, &reg->sspcr1);
bc007040:	ac400004 	sw	zero,4(v0)
SPI_SetBitRate():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:55
{
	u32 reg_cr0;
	u32 scr;

	/* Clear SPI CR0 Bit 8:15 and CPR Bit 0:7 */
	reg_cr0 = readl(&reg->sspcr0);
bc007044:	8c440000 	lw	a0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:59
	reg_cr0 &= ~(0xff << 8);

	scr = SPI_CLOCK / (BitRate * 2) - 1;
	writel(2, &reg->sspcpsr);
bc007048:	24030002 	li	v1,2
bc00704c:	ac430010 	sw	v1,16(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:56
	u32 reg_cr0;
	u32 scr;

	/* Clear SPI CR0 Bit 8:15 and CPR Bit 0:7 */
	reg_cr0 = readl(&reg->sspcr0);
	reg_cr0 &= ~(0xff << 8);
bc007050:	3c03ffff 	lui	v1,0xffff
bc007054:	246300ff 	addiu	v1,v1,255
bc007058:	00831824 	and	v1,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:60

	scr = SPI_CLOCK / (BitRate * 2) - 1;
	writel(2, &reg->sspcpsr);
	writel(reg_cr0 | (scr << 8), &reg->sspcr0);
bc00705c:	34630900 	ori	v1,v1,0x900
bc007060:	ac430000 	sw	v1,0(v0)
SPI_SetFifoLevel():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:73
 *	$Txlevel:the level make interrupt trigger.								  *
 *	Return:none.															  *
 ******************************************************************************/
static void SPI_SetFifoLevel(struct sfa18_spi_registers *reg, u8 Txlevel, u8 Rxlevel)
{
	writel((Rxlevel << 8) | Txlevel, &reg->sspfifolev);
bc007064:	24032020 	li	v1,8224
bc007068:	ac430028 	sw	v1,40(v0)
bc00706c:	03e00008 	jr	ra
bc007070:	00000000 	nop

bc007074 <SPI_cs_activate>:
SPI_cs_activate():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:131

/**
 * Activate a SPI chipselect.
 */
void SPI_cs_activate(void)
{
bc007074:	27bdffe0 	addiu	sp,sp,-32
SPI_Enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:87
 ******************************************************************************/
void SPI_Enable(struct sfa18_spi_registers *reg)
{
	u32 reg_cr1;

	reg_cr1 = readl(&reg->sspcr1);
bc007078:	3c02b820 	lui	v0,0xb820
SPI_cs_activate():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:131

/**
 * Activate a SPI chipselect.
 */
void SPI_cs_activate(void)
{
bc00707c:	afbf001c 	sw	ra,28(sp)
SPI_Enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:87
 ******************************************************************************/
void SPI_Enable(struct sfa18_spi_registers *reg)
{
	u32 reg_cr1;

	reg_cr1 = readl(&reg->sspcr1);
bc007080:	8c430004 	lw	v1,4(v0)
SPI_cs_activate():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:133
 * Activate a SPI chipselect.
 */
void SPI_cs_activate(void)
{
	SPI_Enable((struct sfa18_spi_registers *)SPI_BASE);
	sf_pad_set_func(SPI_CS, GPIO_OUTPUT);
bc007084:	24040005 	li	a0,5
bc007088:	24050005 	li	a1,5
SPI_Enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:88
void SPI_Enable(struct sfa18_spi_registers *reg)
{
	u32 reg_cr1;

	reg_cr1 = readl(&reg->sspcr1);
	writel(reg_cr1 | (1 << 1), &reg->sspcr1);
bc00708c:	34630002 	ori	v1,v1,0x2
bc007090:	ac430004 	sw	v1,4(v0)
SPI_cs_activate():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:133
 * Activate a SPI chipselect.
 */
void SPI_cs_activate(void)
{
	SPI_Enable((struct sfa18_spi_registers *)SPI_BASE);
	sf_pad_set_func(SPI_CS, GPIO_OUTPUT);
bc007094:	0f00146f 	jal	bc0051bc <sf_pad_set_func>
bc007098:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:135
	sf_pad_set_value(SPI_CS, LOW_LEVEL);
}
bc00709c:	8fbf001c 	lw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:134
 */
void SPI_cs_activate(void)
{
	SPI_Enable((struct sfa18_spi_registers *)SPI_BASE);
	sf_pad_set_func(SPI_CS, GPIO_OUTPUT);
	sf_pad_set_value(SPI_CS, LOW_LEVEL);
bc0070a0:	24040005 	li	a0,5
bc0070a4:	00002821 	move	a1,zero
bc0070a8:	0b0016bf 	j	bc005afc <sf_pad_set_value>
bc0070ac:	27bd0020 	addiu	sp,sp,32

bc0070b0 <SPI_cs_deactivate>:
SPI_cs_deactivate():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:143
/**
 * Deactivate a SPI chipselect.
 */
void SPI_cs_deactivate(void)
{
	sf_pad_set_value(SPI_CS, HIGH_LEVEL);
bc0070b0:	24040005 	li	a0,5
bc0070b4:	0b0016bf 	j	bc005afc <sf_pad_set_value>
bc0070b8:	24050001 	li	a1,1

bc0070bc <SPI_xfer>:
SPI_xfer():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:169
 * @flags:	A bitwise combination of SPI_XFER_* flags.
 *
 * Returns: 0 on success, not 0 on failure
 */
int SPI_xfer(unsigned int bitlen, const void *dout, void *din, unsigned long flags)
{
bc0070bc:	27bdffd0 	addiu	sp,sp,-48
bc0070c0:	afb20024 	sw	s2,36(sp)
bc0070c4:	afbf002c 	sw	ra,44(sp)
bc0070c8:	afb30028 	sw	s3,40(sp)
bc0070cc:	afb10020 	sw	s1,32(sp)
bc0070d0:	afb0001c 	sw	s0,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:180
	const u8 *txp = dout;
	u8 *rxp = din;
	u8 value = 0;
	struct sfa18_spi_registers *reg = (struct sfa18_spi_registers *)SPI_BASE;

	if (bitlen == 0)
bc0070d4:	10800041 	beqz	a0,bc0071dc <SPI_xfer+0x120>
bc0070d8:	00e09021 	move	s2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:184
		/* Finish any previously submitted transfers */
		goto out;

	if (bitlen % 8) {
bc0070dc:	30820007 	andi	v0,a0,0x7
bc0070e0:	50400003 	beqzl	v0,bc0070f0 <SPI_xfer+0x34>
bc0070e4:	30e20001 	andi	v0,a3,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:187
		/* Errors always terminate an ongoing transfer */
		flags |= SPI_XFER_END;
		goto out;
bc0070e8:	0b001c77 	j	bc0071dc <SPI_xfer+0x120>
bc0070ec:	34f20002 	ori	s2,a3,0x2
bc0070f0:	00a08021 	move	s0,a1
bc0070f4:	00c08821 	move	s1,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:192
	}

	len = bitlen / 8;

	if (flags & SPI_XFER_BEGIN) {
bc0070f8:	1040000b 	beqz	v0,bc007128 <SPI_xfer+0x6c>
bc0070fc:	000498c2 	srl	s3,a0,0x3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:194
		/* Empty RX FIFO */
		while ((readl(&reg->sspsr) & SSPSR_RNE))
bc007100:	3c02b820 	lui	v0,0xb820
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:194 (discriminator 1)
bc007104:	8c43000c 	lw	v1,12(v0)
bc007108:	30630004 	andi	v1,v1,0x4
bc00710c:	10600004 	beqz	v1,bc007120 <SPI_xfer+0x64>
bc007110:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:195
			readl(&reg->sspdr);
bc007114:	8c430008 	lw	v1,8(v0)
bc007118:	0b001c41 	j	bc007104 <SPI_xfer+0x48>
bc00711c:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:197

		SPI_cs_activate();
bc007120:	0f001c1d 	jal	bc007074 <SPI_cs_activate>
bc007124:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:224 (discriminator 1)
			len_rx++;
		}

		if (!((tx_stat & SSPRIS_TX) || (status & SSPSR_RNE)))
			loop_num++;
		if (loop_num > 1000 * len) {
bc007128:	240903e8 	li	t1,1000
bc00712c:	72694802 	mul	t1,s3,t1
bc007130:	00001021 	move	v0,zero
bc007134:	00002021 	move	a0,zero
bc007138:	00002821 	move	a1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:201 (discriminator 1)

		SPI_cs_activate();
	}

	for (len_tx = 0, len_rx = 0, loop_num = 0; len_rx < len; loop_num++) {
		tx_stat = readl(&reg->sspris);
bc00713c:	3c03b820 	lui	v1,0xb820
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:200 (discriminator 1)
			readl(&reg->sspdr);

		SPI_cs_activate();
	}

	for (len_tx = 0, len_rx = 0, loop_num = 0; len_rx < len; loop_num++) {
bc007140:	0093302b 	sltu	a2,a0,s3
bc007144:	50c00026 	beqzl	a2,bc0071e0 <SPI_xfer+0x124>
bc007148:	32520002 	andi	s2,s2,0x2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:201
		tx_stat = readl(&reg->sspris);
bc00714c:	8c670018 	lw	a3,24(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:204
		status = readl(&reg->sspsr);

		if ((len_tx < len) && (tx_stat & SSPRIS_TX)) {
bc007150:	00b3402b 	sltu	t0,a1,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:202
		SPI_cs_activate();
	}

	for (len_tx = 0, len_rx = 0, loop_num = 0; len_rx < len; loop_num++) {
		tx_stat = readl(&reg->sspris);
		status = readl(&reg->sspsr);
bc007154:	8c66000c 	lw	a2,12(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:204

		if ((len_tx < len) && (tx_stat & SSPRIS_TX)) {
bc007158:	11000009 	beqz	t0,bc007180 <SPI_xfer+0xc4>
bc00715c:	30e70008 	andi	a3,a3,0x8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:204 (discriminator 1)
bc007160:	50e00008 	beqzl	a3,bc007184 <SPI_xfer+0xc8>
bc007164:	30c60004 	andi	a2,a2,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:205
			if (txp)
bc007168:	52000003 	beqzl	s0,bc007178 <SPI_xfer+0xbc>
bc00716c:	240800ff 	li	t0,255
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:206
				value = *txp++;
bc007170:	92080000 	lbu	t0,0(s0)
bc007174:	26100001 	addiu	s0,s0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:210
			else
				value = 0xff;

			writel(value, &reg->sspdr);
bc007178:	ac680008 	sw	t0,8(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:211
			len_tx++;
bc00717c:	24a50001 	addiu	a1,a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:214
		}

		if (status & SSPSR_RNE) {
bc007180:	30c60004 	andi	a2,a2,0x4
bc007184:	10c00007 	beqz	a2,bc0071a4 <SPI_xfer+0xe8>
bc007188:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:215
			value = readl(&reg->sspdr);
bc00718c:	8c680008 	lw	t0,8(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:217

			if (rxp)
bc007190:	12200003 	beqz	s1,bc0071a0 <SPI_xfer+0xe4>
bc007194:	310800ff 	andi	t0,t0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:218
				*rxp++ = value;
bc007198:	a2280000 	sb	t0,0(s1)
bc00719c:	26310001 	addiu	s1,s1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:219
			len_rx++;
bc0071a0:	24840001 	addiu	a0,a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:222
		}

		if (!((tx_stat & SSPRIS_TX) || (status & SSPSR_RNE)))
bc0071a4:	54e00004 	bnezl	a3,bc0071b8 <SPI_xfer+0xfc>
bc0071a8:	0122302b 	sltu	a2,t1,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:223 (discriminator 1)
			loop_num++;
bc0071ac:	2cc60001 	sltiu	a2,a2,1
bc0071b0:	00461021 	addu	v0,v0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:224
		if (loop_num > 1000 * len) {
bc0071b4:	0122302b 	sltu	a2,t1,v0
bc0071b8:	50c0ffe1 	beqzl	a2,bc007140 <SPI_xfer+0x84>
bc0071bc:	24420001 	addiu	v0,v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:225
			printf("spi_xfer time out!!!\n");
bc0071c0:	3c04bc01 	lui	a0,0xbc01
bc0071c4:	0f00239b 	jal	bc008e6c <puts>
bc0071c8:	248493f8 	addiu	a0,a0,-27656
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:226
			SPI_cs_deactivate();
bc0071cc:	0f001c2c 	jal	bc0070b0 <SPI_cs_deactivate>
bc0071d0:	00000000 	nop
bc0071d4:	0b001c89 	j	bc007224 <SPI_xfer+0x168>
bc0071d8:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:232
			return -EFAULT;
		}
	}

out:
	if (flags & SPI_XFER_END) {
bc0071dc:	32520002 	andi	s2,s2,0x2
bc0071e0:	12400015 	beqz	s2,bc007238 <SPI_xfer+0x17c>
bc0071e4:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:238
		/*
		 * Wait until the transfer is completely done before
		 * we deactivate CS.
		 */
		wait_busy = 0;
		status = readl(&reg->sspsr);
bc0071e8:	3c02b820 	lui	v0,0xb820
bc0071ec:	8c42000c 	lw	v0,12(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:239
		while (status & SSPSR_BSY) {
bc0071f0:	24101389 	li	s0,5001
bc0071f4:	0b001c80 	j	bc007200 <SPI_xfer+0x144>
bc0071f8:	3c11b820 	lui	s1,0xb820
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:246
			u_delay(1);
			if (wait_busy > SPI_WAIT_TOUT) {
				printf("Error:rx fifo is empty when receive data at spi_rx_data!\n");
				return -EFAULT;
			}
			status = readl(&reg->sspsr);
bc0071fc:	8e22000c 	lw	v0,12(s1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:239 (discriminator 1)
		 * Wait until the transfer is completely done before
		 * we deactivate CS.
		 */
		wait_busy = 0;
		status = readl(&reg->sspsr);
		while (status & SSPSR_BSY) {
bc007200:	30420010 	andi	v0,v0,0x10
bc007204:	10400009 	beqz	v0,bc00722c <SPI_xfer+0x170>
bc007208:	24040001 	li	a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:241
			wait_busy++;
			u_delay(1);
bc00720c:	0f001080 	jal	bc004200 <u_delay_cpu>
bc007210:	2610ffff 	addiu	s0,s0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:242
			if (wait_busy > SPI_WAIT_TOUT) {
bc007214:	1600fff9 	bnez	s0,bc0071fc <SPI_xfer+0x140>
bc007218:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:243
				printf("Error:rx fifo is empty when receive data at spi_rx_data!\n");
bc00721c:	0f00239b 	jal	bc008e6c <puts>
bc007220:	24849410 	addiu	a0,a0,-27632
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:244
				return -EFAULT;
bc007224:	0b001c8e 	j	bc007238 <SPI_xfer+0x17c>
bc007228:	2402fff2 	li	v0,-14
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:249
			}
			status = readl(&reg->sspsr);
		}

		SPI_cs_deactivate();
bc00722c:	0f001c2c 	jal	bc0070b0 <SPI_cs_deactivate>
bc007230:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:252
	}

	return 0;
bc007234:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi.c:253
}
bc007238:	8fbf002c 	lw	ra,44(sp)
bc00723c:	8fb30028 	lw	s3,40(sp)
bc007240:	8fb20024 	lw	s2,36(sp)
bc007244:	8fb10020 	lw	s1,32(sp)
bc007248:	8fb0001c 	lw	s0,28(sp)
bc00724c:	03e00008 	jr	ra
bc007250:	27bd0030 	addiu	sp,sp,48

bc007254 <SPI_NAND_read>:
SPI_NAND_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/spi/spi-nand-base.c:1847
	return 0;
}

#else /* SPI_NAND */

int SPI_NAND_read(u32 offset, u8 *data, u8 chnum, u32 len) { return -1; }
bc007254:	03e00008 	jr	ra
bc007258:	2402ffff 	li	v0,-1

bc00725c <uart_set_baud>:
uart_set_baud():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:153
 *                                                                                                 *
 ***************************************************************************************************
 */

static int uart_set_baud(u32 channel,u32 baudrate)
{
bc00725c:	27bdffd8 	addiu	sp,sp,-40
bc007260:	afb10020 	sw	s1,32(sp)
bc007264:	afb0001c 	sw	s0,28(sp)
bc007268:	afbf0024 	sw	ra,36(sp)
bc00726c:	00808021 	move	s0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:157
	u32 clk = UART_CLK;
    u16 ibr, fbr;

	if(channel)
bc007270:	10800006 	beqz	a0,bc00728c <uart_set_baud+0x30>
bc007274:	00a08821 	move	s1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:158
    	printf("uart channel:%d baudrate:%d \n",channel,baudrate);
bc007278:	3c04bc01 	lui	a0,0xbc01
bc00727c:	2484944c 	addiu	a0,a0,-27572
bc007280:	02002821 	move	a1,s0
bc007284:	0f002379 	jal	bc008de4 <printf>
bc007288:	02203021 	move	a2,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:163

    /*create the baudrate */

    //clk = module_get_clock(1);											/*get the uart clock*/
    ibr = (clk/(16*baudrate)) & 0xffff;                                 /*calculate the baudrate divisor and put the integer part into ibr*/
bc00728c:	3c02066f 	lui	v0,0x66f
bc007290:	00113100 	sll	a2,s1,0x4
bc007294:	3442f300 	ori	v0,v0,0xf300
bc007298:	0046001b 	divu	zero,v0,a2
bc00729c:	00c001f4 	teq	a2,zero,0x7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:166
    fbr = (((clk - ibr*(16*baudrate)) *64)/(16*baudrate)) & 0x3f;       /*put the fractional part into fbr*/

    writel(ibr, UART0_IBRD+channel*UART_BASE_INTERVAL);					/*put ibr into Uart Integer Baud Rate Register*/
bc0072a0:	3c04b830 	lui	a0,0xb830
bc0072a4:	00108300 	sll	s0,s0,0xc
bc0072a8:	24850024 	addiu	a1,a0,36
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:167
    writel(fbr, UART0_FBRD+channel*UART_BASE_INTERVAL);
bc0072ac:	24840028 	addiu	a0,a0,40
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:166

    //clk = module_get_clock(1);											/*get the uart clock*/
    ibr = (clk/(16*baudrate)) & 0xffff;                                 /*calculate the baudrate divisor and put the integer part into ibr*/
    fbr = (((clk - ibr*(16*baudrate)) *64)/(16*baudrate)) & 0x3f;       /*put the fractional part into fbr*/

    writel(ibr, UART0_IBRD+channel*UART_BASE_INTERVAL);					/*put ibr into Uart Integer Baud Rate Register*/
bc0072b0:	02052821 	addu	a1,s0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:167
    writel(fbr, UART0_FBRD+channel*UART_BASE_INTERVAL);
bc0072b4:	02048021 	addu	s0,s0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:163
    	printf("uart channel:%d baudrate:%d \n",channel,baudrate);

    /*create the baudrate */

    //clk = module_get_clock(1);											/*get the uart clock*/
    ibr = (clk/(16*baudrate)) & 0xffff;                                 /*calculate the baudrate divisor and put the integer part into ibr*/
bc0072b8:	00001812 	mflo	v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:164
    fbr = (((clk - ibr*(16*baudrate)) *64)/(16*baudrate)) & 0x3f;       /*put the fractional part into fbr*/
bc0072bc:	3063ffff 	andi	v1,v1,0xffff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:166

    writel(ibr, UART0_IBRD+channel*UART_BASE_INTERVAL);					/*put ibr into Uart Integer Baud Rate Register*/
bc0072c0:	aca30000 	sw	v1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:164

    /*create the baudrate */

    //clk = module_get_clock(1);											/*get the uart clock*/
    ibr = (clk/(16*baudrate)) & 0xffff;                                 /*calculate the baudrate divisor and put the integer part into ibr*/
    fbr = (((clk - ibr*(16*baudrate)) *64)/(16*baudrate)) & 0x3f;       /*put the fractional part into fbr*/
bc0072c4:	70662002 	mul	a0,v1,a2
bc0072c8:	00441023 	subu	v0,v0,a0
bc0072cc:	00021180 	sll	v0,v0,0x6
bc0072d0:	0046001b 	divu	zero,v0,a2
bc0072d4:	00c001f4 	teq	a2,zero,0x7
bc0072d8:	00001012 	mflo	v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:167

    writel(ibr, UART0_IBRD+channel*UART_BASE_INTERVAL);					/*put ibr into Uart Integer Baud Rate Register*/
    writel(fbr, UART0_FBRD+channel*UART_BASE_INTERVAL);
bc0072dc:	3042003f 	andi	v0,v0,0x3f
bc0072e0:	ae020000 	sw	v0,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:170

    return 0 ;
}
bc0072e4:	8fbf0024 	lw	ra,36(sp)
bc0072e8:	8fb10020 	lw	s1,32(sp)
bc0072ec:	8fb0001c 	lw	s0,28(sp)
bc0072f0:	00001021 	move	v0,zero
bc0072f4:	03e00008 	jr	ra
bc0072f8:	27bd0028 	addiu	sp,sp,40

bc0072fc <uart_set_data_len>:
uart_set_data_len():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:184
 *                                                                                                 *
 ***************************************************************************************************
 */

static int uart_set_data_len(u32 channel,u32 data_len)
{
bc0072fc:	27bdffd8 	addiu	sp,sp,-40
bc007300:	afb00018 	sw	s0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:187
    u8 reg = 0;

	reg = readl(UART0_LCRH+channel*UART_BASE_INTERVAL);
bc007304:	3c10b830 	lui	s0,0xb830
bc007308:	00041b00 	sll	v1,a0,0xc
bc00730c:	2610002c 	addiu	s0,s0,44
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:184
 *                                                                                                 *
 ***************************************************************************************************
 */

static int uart_set_data_len(u32 channel,u32 data_len)
{
bc007310:	afb1001c 	sw	s1,28(sp)
bc007314:	afbf0024 	sw	ra,36(sp)
bc007318:	afb20020 	sw	s2,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:187
    u8 reg = 0;

	reg = readl(UART0_LCRH+channel*UART_BASE_INTERVAL);
bc00731c:	00708021 	addu	s0,v1,s0
bc007320:	8e120000 	lw	s2,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:184
 *                                                                                                 *
 ***************************************************************************************************
 */

static int uart_set_data_len(u32 channel,u32 data_len)
{
bc007324:	00801021 	move	v0,a0
bc007328:	00a08821 	move	s1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:188
    u8 reg = 0;

	reg = readl(UART0_LCRH+channel*UART_BASE_INTERVAL);
	if(channel)
bc00732c:	10800006 	beqz	a0,bc007348 <uart_set_data_len+0x4c>
bc007330:	325200ff 	andi	s2,s2,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:189
		printf("uart channel:%d data_len:%d \n",channel,data_len);
bc007334:	3c04bc01 	lui	a0,0xbc01
bc007338:	2484946c 	addiu	a0,a0,-27540
bc00733c:	00402821 	move	a1,v0
bc007340:	0f002379 	jal	bc008de4 <printf>
bc007344:	02203021 	move	a2,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:191

	if(data_len == 5)
bc007348:	24020005 	li	v0,5
bc00734c:	56220003 	bnel	s1,v0,bc00735c <uart_set_data_len+0x60>
bc007350:	24020006 	li	v0,6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:194
		{
		reg &= ~((1 << 5)|(1 << 6));							    /*data length = 5 */
		writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);
bc007354:	0b001ce0 	j	bc007380 <uart_set_data_len+0x84>
bc007358:	3252009f 	andi	s2,s2,0x9f
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:196
		}
    else if(data_len == 6)
bc00735c:	56220004 	bnel	s1,v0,bc007370 <uart_set_data_len+0x74>
bc007360:	24020007 	li	v0,7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:199
		{
		reg |= (1 << 5);
		reg &= ~(1 << 6);
bc007364:	325200bf 	andi	s2,s2,0xbf
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:200
		writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);		/*data length = 6 */
bc007368:	0b001ce0 	j	bc007380 <uart_set_data_len+0x84>
bc00736c:	36520020 	ori	s2,s2,0x20
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:202
		}
    else if(data_len == 7)
bc007370:	56220006 	bnel	s1,v0,bc00738c <uart_set_data_len+0x90>
bc007374:	24020008 	li	v0,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:204
		{
		reg &= ~(1 << 5);
bc007378:	325200df 	andi	s2,s2,0xdf
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:206
		reg |= (1 << 6);
		writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);       /*data length = 7 */
bc00737c:	36520040 	ori	s2,s2,0x40
bc007380:	ae120000 	sw	s2,0(s0)
bc007384:	0b001ce6 	j	bc007398 <uart_set_data_len+0x9c>
bc007388:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:208
		}
    else if(data_len ==8)
bc00738c:	1222fffc 	beq	s1,v0,bc007380 <uart_set_data_len+0x84>
bc007390:	36520060 	ori	s2,s2,0x60
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:214
		{
		reg |= ((1 << 5)|(1 << 6));
		writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);       /*data length = 8 */
		}
    else
		return -1;
bc007394:	2402ffff 	li	v0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:217

	return 0 ;
}
bc007398:	8fbf0024 	lw	ra,36(sp)
bc00739c:	8fb20020 	lw	s2,32(sp)
bc0073a0:	8fb1001c 	lw	s1,28(sp)
bc0073a4:	8fb00018 	lw	s0,24(sp)
bc0073a8:	03e00008 	jr	ra
bc0073ac:	27bd0028 	addiu	sp,sp,40

bc0073b0 <uart_set_parity>:
uart_set_parity():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:231
 *                                                                                                 *
 ***************************************************************************************************
 */

static int uart_set_parity(u32 channel,u32 parity)
{
bc0073b0:	27bdffd8 	addiu	sp,sp,-40
bc0073b4:	afb00018 	sw	s0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:234
    u8 reg = 0;

	reg = readl(UART0_LCRH+channel*UART_BASE_INTERVAL);
bc0073b8:	3c10b830 	lui	s0,0xb830
bc0073bc:	00041b00 	sll	v1,a0,0xc
bc0073c0:	2610002c 	addiu	s0,s0,44
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:231
 *                                                                                                 *
 ***************************************************************************************************
 */

static int uart_set_parity(u32 channel,u32 parity)
{
bc0073c4:	afb20020 	sw	s2,32(sp)
bc0073c8:	afbf0024 	sw	ra,36(sp)
bc0073cc:	afb1001c 	sw	s1,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:234
    u8 reg = 0;

	reg = readl(UART0_LCRH+channel*UART_BASE_INTERVAL);
bc0073d0:	00708021 	addu	s0,v1,s0
bc0073d4:	8e110000 	lw	s1,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:231
 *                                                                                                 *
 ***************************************************************************************************
 */

static int uart_set_parity(u32 channel,u32 parity)
{
bc0073d8:	00801021 	move	v0,a0
bc0073dc:	00a09021 	move	s2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:236
    u8 reg = 0;

	reg = readl(UART0_LCRH+channel*UART_BASE_INTERVAL);

	if(channel)
bc0073e0:	10800006 	beqz	a0,bc0073fc <uart_set_parity+0x4c>
bc0073e4:	323100ff 	andi	s1,s1,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:237
		printf("uart channel:%d parity:%d\n",channel,parity);
bc0073e8:	3c04bc01 	lui	a0,0xbc01
bc0073ec:	2484948c 	addiu	a0,a0,-27508
bc0073f0:	00402821 	move	a1,v0
bc0073f4:	0f002379 	jal	bc008de4 <printf>
bc0073f8:	02403021 	move	a2,s2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:239

    switch(parity){
bc0073fc:	2652ffff 	addiu	s2,s2,-1
bc007400:	2e420005 	sltiu	v0,s2,5
bc007404:	10400015 	beqz	v0,bc00745c <uart_set_parity+0xac>
bc007408:	3c02bc01 	lui	v0,0xbc01
bc00740c:	244294a8 	addiu	v0,v0,-27480
bc007410:	00129080 	sll	s2,s2,0x2
bc007414:	00529021 	addu	s2,v0,s2
bc007418:	8e420000 	lw	v0,0(s2)
bc00741c:	00400008 	jr	v0
bc007420:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:242
    	case ODD_PARITY:
			reg |= (1 << 1);
			reg &= ~(1 << 2);
bc007424:	323100fb 	andi	s1,s1,0xfb
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:243
			writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);							/*odd parity */
bc007428:	0b001d12 	j	bc007448 <uart_set_parity+0x98>
bc00742c:	36310002 	ori	s1,s1,0x2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:248
		break;

	    case EVEN_PARITY:
			reg |= ((1 << 1)|(1 << 2));
			writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);                           /*even parity */
bc007430:	0b001d12 	j	bc007448 <uart_set_parity+0x98>
bc007434:	36310006 	ori	s1,s1,0x6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:253
		break;

	    case MASK_PARITY:
	        reg |= ((1 << 1)|(1 << 7));
	        reg &= ~(1 << 2);
bc007438:	323100fb 	andi	s1,s1,0xfb
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:254
			writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);							/*parity = 1 */
bc00743c:	0b001d12 	j	bc007448 <uart_set_parity+0x98>
bc007440:	36310082 	ori	s1,s1,0x82
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:259
	    break;

		case NULL_PARITY:
		    reg |= ((1 << 1)|(1 << 2)|(1 << 7));
		    writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);                           /*parity = 0 */
bc007444:	36310086 	ori	s1,s1,0x86
bc007448:	ae110000 	sw	s1,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:260
		break;
bc00744c:	0b001d18 	j	bc007460 <uart_set_parity+0xb0>
bc007450:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:264

	    case NO_PARITY:
	    reg &= ~(1 << 1);
			writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);							/*NO parity */
bc007454:	0b001d12 	j	bc007448 <uart_set_parity+0x98>
bc007458:	323100fd 	andi	s1,s1,0xfd
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:268
		break;

		default:
			return -1;
bc00745c:	2402ffff 	li	v0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:273
		break;
    }

	return 0;
}
bc007460:	8fbf0024 	lw	ra,36(sp)
bc007464:	8fb20020 	lw	s2,32(sp)
bc007468:	8fb1001c 	lw	s1,28(sp)
bc00746c:	8fb00018 	lw	s0,24(sp)
bc007470:	03e00008 	jr	ra
bc007474:	27bd0028 	addiu	sp,sp,40

bc007478 <uart_init_debug_channel>:
uart_init_debug_channel():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:364
 *  config the baudrate:115200,data length:8,parity mode:NONE,stop bit:1,FIFO level: half          *
 *  channel:uart0 for debug                                                                        *
 ***************************************************************************************************
 */
int uart_init_debug_channel(int channel)
{
bc007478:	27bdffd8 	addiu	sp,sp,-40
bc00747c:	afb20020 	sw	s2,32(sp)
uart_init_enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:316

static int uart_init_enable(u32 channel)
{
	u16 ttl = 0;

	ttl = readl(UART0_CR+channel*UART_BASE_INTERVAL);
bc007480:	3c12b830 	lui	s2,0xb830
uart_init_debug_channel():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:364
 *  config the baudrate:115200,data length:8,parity mode:NONE,stop bit:1,FIFO level: half          *
 *  channel:uart0 for debug                                                                        *
 ***************************************************************************************************
 */
int uart_init_debug_channel(int channel)
{
bc007484:	afb1001c 	sw	s1,28(sp)
uart_init_enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:316

static int uart_init_enable(u32 channel)
{
	u16 ttl = 0;

	ttl = readl(UART0_CR+channel*UART_BASE_INTERVAL);
bc007488:	26420030 	addiu	v0,s2,48
bc00748c:	00048b00 	sll	s1,a0,0xc
uart_init_debug_channel():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:364
 *  config the baudrate:115200,data length:8,parity mode:NONE,stop bit:1,FIFO level: half          *
 *  channel:uart0 for debug                                                                        *
 ***************************************************************************************************
 */
int uart_init_debug_channel(int channel)
{
bc007490:	afbf0024 	sw	ra,36(sp)
bc007494:	afb00018 	sw	s0,24(sp)
uart_init_enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:316

static int uart_init_enable(u32 channel)
{
	u16 ttl = 0;

	ttl = readl(UART0_CR+channel*UART_BASE_INTERVAL);
bc007498:	02221021 	addu	v0,s1,v0
bc00749c:	8c430000 	lw	v1,0(v0)
uart_config():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:287
 */
static void uart_config(u32 channel,u32 baudrate,u32 data_len,u32 parity,u32 stop)
{
	u8 reg = 0;

	uart_set_baud(channel,baudrate);			/*create the baudrate you choose */
bc0074a0:	3c050001 	lui	a1,0x1
uart_init_debug_channel():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:364
 *  config the baudrate:115200,data length:8,parity mode:NONE,stop bit:1,FIFO level: half          *
 *  channel:uart0 for debug                                                                        *
 ***************************************************************************************************
 */
int uart_init_debug_channel(int channel)
{
bc0074a4:	00808021 	move	s0,a0
uart_init_enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:316

static int uart_init_enable(u32 channel)
{
	u16 ttl = 0;

	ttl = readl(UART0_CR+channel*UART_BASE_INTERVAL);
bc0074a8:	3063ffff 	andi	v1,v1,0xffff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:318
	ttl |= 0x301;
    writel( ttl , UART0_CR+channel*UART_BASE_INTERVAL);
bc0074ac:	34630301 	ori	v1,v1,0x301
bc0074b0:	ac430000 	sw	v1,0(v0)
uart_config():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:287
 */
static void uart_config(u32 channel,u32 baudrate,u32 data_len,u32 parity,u32 stop)
{
	u8 reg = 0;

	uart_set_baud(channel,baudrate);			/*create the baudrate you choose */
bc0074b4:	0f001c97 	jal	bc00725c <uart_set_baud>
bc0074b8:	34a5c200 	ori	a1,a1,0xc200
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:291
    uart_set_data_len(channel,data_len);		/*choose the data length you want */
    uart_set_parity(channel,parity);			/*choose the parity mode you want */

    reg = readl(UART0_LCRH+channel*UART_BASE_INTERVAL);
bc0074bc:	2652002c 	addiu	s2,s2,44
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:288
static void uart_config(u32 channel,u32 baudrate,u32 data_len,u32 parity,u32 stop)
{
	u8 reg = 0;

	uart_set_baud(channel,baudrate);			/*create the baudrate you choose */
    uart_set_data_len(channel,data_len);		/*choose the data length you want */
bc0074c0:	02002021 	move	a0,s0
bc0074c4:	24050008 	li	a1,8
bc0074c8:	0f001cbf 	jal	bc0072fc <uart_set_data_len>
bc0074cc:	02328821 	addu	s1,s1,s2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:289
    uart_set_parity(channel,parity);			/*choose the parity mode you want */
bc0074d0:	02002021 	move	a0,s0
bc0074d4:	0f001cec 	jal	bc0073b0 <uart_set_parity>
bc0074d8:	24050005 	li	a1,5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:291

    reg = readl(UART0_LCRH+channel*UART_BASE_INTERVAL);
bc0074dc:	8e220000 	lw	v0,0(s1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:293
    if(stop==1)
        reg &= ~(1 << 3);
bc0074e0:	304200f7 	andi	v0,v0,0xf7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:297
    else
        reg |= (1 << 3);
	reg |= (1 << 4);
	writel( reg , UART0_LCRH+channel*UART_BASE_INTERVAL);	/*choose one stop bit and enable the FIFO */
bc0074e4:	34420010 	ori	v0,v0,0x10
bc0074e8:	ae220000 	sw	v0,0(s1)
uart_init_debug_channel():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:369
{
	uart_init_enable(channel);
	uart_config(channel, 115200, 8, 5, 1);

	return 0;
}
bc0074ec:	8fbf0024 	lw	ra,36(sp)
bc0074f0:	8fb20020 	lw	s2,32(sp)
bc0074f4:	8fb1001c 	lw	s1,28(sp)
bc0074f8:	8fb00018 	lw	s0,24(sp)
bc0074fc:	00001021 	move	v0,zero
bc007500:	03e00008 	jr	ra
bc007504:	27bd0028 	addiu	sp,sp,40

bc007508 <uart_tx_debug_msg>:
uart_tx_debug_msg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:381
 *  buf: assic I/O stream                                                                          *
 *  len: message len                                                                               *
 ***************************************************************************************************
 */
void uart_tx_debug_msg(char * buf,unsigned int len)
{
bc007508:	27bdffc8 	addiu	sp,sp,-56
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:382
    u32 index = 0;
bc00750c:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:381
 *  buf: assic I/O stream                                                                          *
 *  len: message len                                                                               *
 ***************************************************************************************************
 */
void uart_tx_debug_msg(char * buf,unsigned int len)
{
bc007510:	afb50030 	sw	s5,48(sp)
bc007514:	afb4002c 	sw	s4,44(sp)
bc007518:	afb20024 	sw	s2,36(sp)
bc00751c:	afb0001c 	sw	s0,28(sp)
bc007520:	afbf0034 	sw	ra,52(sp)
bc007524:	afb30028 	sw	s3,40(sp)
bc007528:	afb10020 	sw	s1,32(sp)
bc00752c:	00809021 	move	s2,a0
bc007530:	00a0a821 	move	s5,a1
uart_putc():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:136
 ***************************************************************************************************
 */

static void uart_putc(u32 channel,const char c)
{
    writel(c, UART0_DR+channel*UART_BASE_INTERVAL);
bc007534:	3c10b830 	lui	s0,0xb830
uart_tx_debug_msg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:392
    {
        if(len-index > UART_FIFO_DEPTH)
        {
            count = 0;

			for(i = 0;i < UART_FIFO_DEPTH;i++)
bc007538:	24140020 	li	s4,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:386 (discriminator 1)
{
    u32 index = 0;
    int i;
	u32 count = 0;

    while (index < len)
bc00753c:	0055182b 	sltu	v1,v0,s5
bc007540:	10600030 	beqz	v1,bc007604 <uart_tx_debug_msg+0xfc>
bc007544:	02a22023 	subu	a0,s5,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:388
    {
        if(len-index > UART_FIFO_DEPTH)
bc007548:	2c830021 	sltiu	v1,a0,33
bc00754c:	10600003 	beqz	v1,bc00755c <uart_tx_debug_msg+0x54>
bc007550:	00001821 	move	v1,zero
bc007554:	0b001d6a 	j	bc0075a8 <uart_tx_debug_msg+0xa0>
bc007558:	02423021 	addu	a2,s2,v0
bc00755c:	02422821 	addu	a1,s2,v0
bc007560:	00a32021 	addu	a0,a1,v1
uart_putc():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:136 (discriminator 2)
 ***************************************************************************************************
 */

static void uart_putc(u32 channel,const char c)
{
    writel(c, UART0_DR+channel*UART_BASE_INTERVAL);
bc007564:	80840000 	lb	a0,0(a0)
uart_tx_debug_msg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:392 (discriminator 2)
    {
        if(len-index > UART_FIFO_DEPTH)
        {
            count = 0;

			for(i = 0;i < UART_FIFO_DEPTH;i++)
bc007568:	24630001 	addiu	v1,v1,1
uart_putc():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:136 (discriminator 2)
 ***************************************************************************************************
 */

static void uart_putc(u32 channel,const char c)
{
    writel(c, UART0_DR+channel*UART_BASE_INTERVAL);
bc00756c:	ae040000 	sw	a0,0(s0)
uart_tx_debug_msg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:392 (discriminator 2)
    {
        if(len-index > UART_FIFO_DEPTH)
        {
            count = 0;

			for(i = 0;i < UART_FIFO_DEPTH;i++)
bc007570:	1474fffc 	bne	v1,s4,bc007564 <uart_tx_debug_msg+0x5c>
bc007574:	00a32021 	addu	a0,a1,v1
bc007578:	24530020 	addiu	s3,v0,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:392
bc00757c:	24110192 	li	s1,402
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:397 (discriminator 1)
            {
                uart_putc(UART_DEBUG_CHANNEL,buf[index]);
                index++;
            }
            while(!(readl(UART0_FR+UART_DEBUG_CHANNEL*UART_BASE_INTERVAL) & (1 << 7)))
bc007580:	8e020018 	lw	v0,24(s0)
bc007584:	30420080 	andi	v0,v0,0x80
bc007588:	1440001c 	bnez	v0,bc0075fc <uart_tx_debug_msg+0xf4>
bc00758c:	2631ffff 	addiu	s1,s1,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:399
			{
				if(count > COUNT_MAX*2)
bc007590:	1220ffea 	beqz	s1,bc00753c <uart_tx_debug_msg+0x34>
bc007594:	02601021 	move	v0,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:402
					break;
				count++;
				u_delay(10);
bc007598:	0f001080 	jal	bc004200 <u_delay_cpu>
bc00759c:	2404000a 	li	a0,10
bc0075a0:	0b001d60 	j	bc007580 <uart_tx_debug_msg+0x78>
bc0075a4:	00000000 	nop
bc0075a8:	00832823 	subu	a1,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:410 (discriminator 1)
        }
        else
        {
            count = 0;

			for(i=0;i<(len-index);i++)
bc0075ac:	0065282b 	sltu	a1,v1,a1
bc0075b0:	10a00007 	beqz	a1,bc0075d0 <uart_tx_debug_msg+0xc8>
bc0075b4:	00629821 	addu	s3,v1,v0
bc0075b8:	00c32821 	addu	a1,a2,v1
uart_putc():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:136 (discriminator 2)
 ***************************************************************************************************
 */

static void uart_putc(u32 channel,const char c)
{
    writel(c, UART0_DR+channel*UART_BASE_INTERVAL);
bc0075bc:	80a50000 	lb	a1,0(a1)
uart_tx_debug_msg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:410 (discriminator 2)
        }
        else
        {
            count = 0;

			for(i=0;i<(len-index);i++)
bc0075c0:	24630001 	addiu	v1,v1,1
uart_putc():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:136 (discriminator 2)
 ***************************************************************************************************
 */

static void uart_putc(u32 channel,const char c)
{
    writel(c, UART0_DR+channel*UART_BASE_INTERVAL);
bc0075c4:	ae050000 	sw	a1,0(s0)
bc0075c8:	0b001d6b 	j	bc0075ac <uart_tx_debug_msg+0xa4>
bc0075cc:	00832823 	subu	a1,a0,v1
uart_tx_debug_msg():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:410
        }
        else
        {
            count = 0;

			for(i=0;i<(len-index);i++)
bc0075d0:	24110192 	li	s1,402
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:415 (discriminator 1)
            {
                uart_putc(UART_DEBUG_CHANNEL,buf[index]);
                index++;
            }
            while(!(readl(UART0_FR+UART_DEBUG_CHANNEL*UART_BASE_INTERVAL) & (1 << 7)))
bc0075d4:	8e020018 	lw	v0,24(s0)
bc0075d8:	30420080 	andi	v0,v0,0x80
bc0075dc:	14400007 	bnez	v0,bc0075fc <uart_tx_debug_msg+0xf4>
bc0075e0:	2631ffff 	addiu	s1,s1,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:417
			{
				if(count > COUNT_MAX*2)
bc0075e4:	1220ffd5 	beqz	s1,bc00753c <uart_tx_debug_msg+0x34>
bc0075e8:	02601021 	move	v0,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:420
					break;
				count++;
				u_delay(10);
bc0075ec:	0f001080 	jal	bc004200 <u_delay_cpu>
bc0075f0:	2404000a 	li	a0,10
bc0075f4:	0b001d75 	j	bc0075d4 <uart_tx_debug_msg+0xcc>
bc0075f8:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:410 (discriminator 1)
        }
        else
        {
            count = 0;

			for(i=0;i<(len-index);i++)
bc0075fc:	0b001d4f 	j	bc00753c <uart_tx_debug_msg+0x34>
bc007600:	02601021 	move	v0,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/uart/uart.c:424
				count++;
				u_delay(10);
			}
        }
    }
}
bc007604:	8fbf0034 	lw	ra,52(sp)
bc007608:	8fb50030 	lw	s5,48(sp)
bc00760c:	8fb4002c 	lw	s4,44(sp)
bc007610:	8fb30028 	lw	s3,40(sp)
bc007614:	8fb20024 	lw	s2,36(sp)
bc007618:	8fb10020 	lw	s1,32(sp)
bc00761c:	8fb0001c 	lw	s0,28(sp)
bc007620:	03e00008 	jr	ra
bc007624:	27bd0038 	addiu	sp,sp,56

bc007628 <mmc_send_cmd>:
mmc_send_cmd():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:139
	return ret;
}

static void mmc_send_cmd(u32 arg, u32 cmd_index, u32 cmd_flag)
{
	if(cmd_index == MMC_CMD_GO_IDLE_STATE)
bc007628:	10a00005 	beqz	a1,bc007640 <mmc_send_cmd+0x18>
bc00762c:	34c2a000 	ori	v0,a2,0xa000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:142
		cmd_flag |= (SDIO0_CMD_INIT | SDIO0_CMD_PRV_DAT_WAIT);
	else if(cmd_index == MMC_CMD_STOP_TRANSMISSION)
		cmd_flag |= (SDIO0_CMD_STOP | SDIO0_CMD_RESP_EXPT);
bc007630:	34c24040 	ori	v0,a2,0x4040
bc007634:	38a3000c 	xori	v1,a1,0xc
bc007638:	34c62040 	ori	a2,a2,0x2040
bc00763c:	00c3100b 	movn	v0,a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:146
	else
		cmd_flag |= (SDIO0_CMD_PRV_DAT_WAIT | SDIO0_CMD_RESP_EXPT);

	writel(arg , SDIO0_CMDARG + mmc_no * SIFLOWER_SDIO_OFFSET);//0x1aa
bc007640:	3c03bc01 	lui	v1,0xbc01
bc007644:	8c639918 	lw	v1,-26344(v1)
bc007648:	3c06b780 	lui	a2,0xb780
bc00764c:	24c70028 	addiu	a3,a2,40
bc007650:	00031d80 	sll	v1,v1,0x16
bc007654:	00673821 	addu	a3,v1,a3
bc007658:	ace40000 	sw	a0,0(a3)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:147
	writel((cmd_index | cmd_flag | SDIO0_CMD_START | SDIO0_CMD_USEHOLD) , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00765c:	3c04a000 	lui	a0,0xa000
bc007660:	24c6002c 	addiu	a2,a2,44
bc007664:	00a42825 	or	a1,a1,a0
bc007668:	00661821 	addu	v1,v1,a2
bc00766c:	00a21025 	or	v0,a1,v0
bc007670:	ac620000 	sw	v0,0(v1)
bc007674:	03e00008 	jr	ra
bc007678:	00000000 	nop

bc00767c <mmc_wait_START>:
mmc_wait_START():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:83
static int mmc_wait_START(void)
{
	u32 reg;
	u32 count = 0;

	reg = readl(SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00767c:	3c03bc01 	lui	v1,0xbc01
bc007680:	8c649918 	lw	a0,-26344(v1)
bc007684:	3c02b780 	lui	v0,0xb780
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:79
 *                                                                  *
 ********************************************************************
 */

static int mmc_wait_START(void)
{
bc007688:	27bdffd0 	addiu	sp,sp,-48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:83
	u32 reg;
	u32 count = 0;

	reg = readl(SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00768c:	2442002c 	addiu	v0,v0,44
bc007690:	00042580 	sll	a0,a0,0x16
bc007694:	00822021 	addu	a0,a0,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:79
 *                                                                  *
 ********************************************************************
 */

static int mmc_wait_START(void)
{
bc007698:	afb30028 	sw	s3,40(sp)
bc00769c:	afb20024 	sw	s2,36(sp)
bc0076a0:	afb0001c 	sw	s0,28(sp)
bc0076a4:	afbf002c 	sw	ra,44(sp)
bc0076a8:	afb10020 	sw	s1,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:83
	u32 reg;
	u32 count = 0;

	reg = readl(SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0076ac:	8c910000 	lw	s1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:84
	while(reg & (1<<31)){
bc0076b0:	241000c9 	li	s0,201
bc0076b4:	00609021 	move	s2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:85
		reg = readl(SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0076b8:	00409821 	move	s3,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:84 (discriminator 1)
{
	u32 reg;
	u32 count = 0;

	reg = readl(SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
	while(reg & (1<<31)){
bc0076bc:	0621000c 	bgez	s1,bc0076f0 <mmc_wait_START+0x74>
bc0076c0:	8e429918 	lw	v0,-26344(s2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:87
		reg = readl(SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
		count++;
		u_delay(5);
bc0076c4:	24040005 	li	a0,5
bc0076c8:	2610ffff 	addiu	s0,s0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:85
	u32 reg;
	u32 count = 0;

	reg = readl(SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
	while(reg & (1<<31)){
		reg = readl(SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0076cc:	00021580 	sll	v0,v0,0x16
bc0076d0:	00531021 	addu	v0,v0,s3
bc0076d4:	8c510000 	lw	s1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:87
		count++;
		u_delay(5);
bc0076d8:	0f001080 	jal	bc004200 <u_delay_cpu>
bc0076dc:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:88
		if(count > COUNT_MAX1){
bc0076e0:	1600fff6 	bnez	s0,bc0076bc <mmc_wait_START+0x40>
bc0076e4:	2402ffea 	li	v0,-22
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:94
			return -EINVAL;
		}
	}

	return 0;
}
bc0076e8:	0b001dbe 	j	bc0076f8 <mmc_wait_START+0x7c>
bc0076ec:	8fbf002c 	lw	ra,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:93
		if(count > COUNT_MAX1){
			return -EINVAL;
		}
	}

	return 0;
bc0076f0:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:94
}
bc0076f4:	8fbf002c 	lw	ra,44(sp)
bc0076f8:	8fb30028 	lw	s3,40(sp)
bc0076fc:	8fb20024 	lw	s2,36(sp)
bc007700:	8fb10020 	lw	s1,32(sp)
bc007704:	8fb0001c 	lw	s0,28(sp)
bc007708:	03e00008 	jr	ra
bc00770c:	27bd0030 	addiu	sp,sp,48

bc007710 <mmc_clk_set>:
mmc_clk_set():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:201
 *                                                                  *
 ********************************************************************
 */

static int mmc_clk_set(u32 div)
{
bc007710:	27bdffc0 	addiu	sp,sp,-64
bc007714:	afb60038 	sw	s6,56(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:209
	u32 delay = 0;
	u32 clock = 0;

	clock = (mmc_no == 1)?SD_CLOCK:EMMC_CLOCK;

	delay = (2*div*100*10^6)/clock+1;
bc007718:	241607d0 	li	s6,2000
bc00771c:	7096b002 	mul	s6,a0,s6
bc007720:	3c0208f0 	lui	v0,0x8f0
bc007724:	3442d180 	ori	v0,v0,0xd180
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:201
 *                                                                  *
 ********************************************************************
 */

static int mmc_clk_set(u32 div)
{
bc007728:	afb00020 	sw	s0,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:211

	clock = (mmc_no == 1)?SD_CLOCK:EMMC_CLOCK;

	delay = (2*div*100*10^6)/clock+1;

	reg = readl(SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00772c:	3c10bc01 	lui	s0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:201
 *                                                                  *
 ********************************************************************
 */

static int mmc_clk_set(u32 div)
{
bc007730:	afb10024 	sw	s1,36(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:211

	clock = (mmc_no == 1)?SD_CLOCK:EMMC_CLOCK;

	delay = (2*div*100*10^6)/clock+1;

	reg = readl(SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007734:	3c11b780 	lui	s1,0xb780
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:201
 *                                                                  *
 ********************************************************************
 */

static int mmc_clk_set(u32 div)
{
bc007738:	afb40030 	sw	s4,48(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:211

	clock = (mmc_no == 1)?SD_CLOCK:EMMC_CLOCK;

	delay = (2*div*100*10^6)/clock+1;

	reg = readl(SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00773c:	26340010 	addiu	s4,s1,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:201
 *                                                                  *
 ********************************************************************
 */

static int mmc_clk_set(u32 div)
{
bc007740:	afb50034 	sw	s5,52(sp)
bc007744:	afb3002c 	sw	s3,44(sp)
bc007748:	afb20028 	sw	s2,40(sp)
bc00774c:	afbf003c 	sw	ra,60(sp)
bc007750:	0080a821 	move	s5,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:215

	reg = readl(SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
	reg &= 0xFFFF0000;
	writel(reg , SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007754:	2633002c 	addiu	s3,s1,44
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:212
	clock = (mmc_no == 1)?SD_CLOCK:EMMC_CLOCK;

	delay = (2*div*100*10^6)/clock+1;

	reg = readl(SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
	reg &= 0xFFFF0000;
bc007758:	3c04ffff 	lui	a0,0xffff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:215
	writel(reg , SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00775c:	3c128020 	lui	s2,0x8020
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:209
	u32 delay = 0;
	u32 clock = 0;

	clock = (mmc_no == 1)?SD_CLOCK:EMMC_CLOCK;

	delay = (2*div*100*10^6)/clock+1;
bc007760:	3ad60006 	xori	s6,s6,0x6
bc007764:	02c2001b 	divu	zero,s6,v0
bc007768:	004001f4 	teq	v0,zero,0x7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:211

	reg = readl(SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00776c:	8e029918 	lw	v0,-26344(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:215
	reg &= 0xFFFF0000;
	writel(reg , SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007770:	26522000 	addiu	s2,s2,8192
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:211

	clock = (mmc_no == 1)?SD_CLOCK:EMMC_CLOCK;

	delay = (2*div*100*10^6)/clock+1;

	reg = readl(SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007774:	00021580 	sll	v0,v0,0x16
bc007778:	00541821 	addu	v1,v0,s4
bc00777c:	8c650000 	lw	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:215
	reg &= 0xFFFF0000;
	writel(reg , SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007780:	00531021 	addu	v0,v0,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:212
	clock = (mmc_no == 1)?SD_CLOCK:EMMC_CLOCK;

	delay = (2*div*100*10^6)/clock+1;

	reg = readl(SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
	reg &= 0xFFFF0000;
bc007784:	00a42024 	and	a0,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:213
	writel(reg , SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007788:	ac640000 	sw	a0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:215

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00778c:	ac520000 	sw	s2,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:217

	ret = mmc_wait_START();
bc007790:	0f001d9f 	jal	bc00767c <mmc_wait_START>
bc007794:	0000b012 	mflo	s6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:218
	if(ret){
bc007798:	10400004 	beqz	v0,bc0077ac <mmc_clk_set+0x9c>
bc00779c:	26d60001 	addiu	s6,s6,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:219
		printf("mmc%d clk set error1!!\n",mmc_no);
bc0077a0:	3c04bc01 	lui	a0,0xbc01
bc0077a4:	0b001dfb 	j	bc0077ec <mmc_clk_set+0xdc>
bc0077a8:	248494bc 	addiu	a0,a0,-27460
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:223
		return -EINVAL;
	}

	writel(div , SDIO0_CLKDIV + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0077ac:	8e029918 	lw	v0,-26344(s0)
bc0077b0:	26230008 	addiu	v1,s1,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:225

	writel(0x0 , SDIO0_CLKSRC + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0077b4:	2631000c 	addiu	s1,s1,12
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:223
	if(ret){
		printf("mmc%d clk set error1!!\n",mmc_no);
		return -EINVAL;
	}

	writel(div , SDIO0_CLKDIV + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0077b8:	00021580 	sll	v0,v0,0x16
bc0077bc:	00431821 	addu	v1,v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:225

	writel(0x0 , SDIO0_CLKSRC + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0077c0:	00518821 	addu	s1,v0,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:227

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0077c4:	00531021 	addu	v0,v0,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:223
	if(ret){
		printf("mmc%d clk set error1!!\n",mmc_no);
		return -EINVAL;
	}

	writel(div , SDIO0_CLKDIV + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0077c8:	ac750000 	sw	s5,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:225

	writel(0x0 , SDIO0_CLKSRC + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0077cc:	ae200000 	sw	zero,0(s1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:227

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0077d0:	ac520000 	sw	s2,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:229

	ret = mmc_wait_START();
bc0077d4:	0f001d9f 	jal	bc00767c <mmc_wait_START>
bc0077d8:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:230
	if(ret){
bc0077dc:	50400007 	beqzl	v0,bc0077fc <mmc_clk_set+0xec>
bc0077e0:	8e029918 	lw	v0,-26344(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:231
		printf("mmc%d clk set error2!!\n",mmc_no);
bc0077e4:	3c04bc01 	lui	a0,0xbc01
bc0077e8:	248494d4 	addiu	a0,a0,-27436
bc0077ec:	0f002379 	jal	bc008de4 <printf>
bc0077f0:	8e059918 	lw	a1,-26344(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:232
		return -EINVAL;
bc0077f4:	0b001e0f 	j	bc00783c <mmc_clk_set+0x12c>
bc0077f8:	2402ffea 	li	v0,-22
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:235
	}

	writel((1 << 0) , SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);                 //config the clock enable register
bc0077fc:	24030001 	li	v1,1
bc007800:	00021580 	sll	v0,v0,0x16
bc007804:	0054a021 	addu	s4,v0,s4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:237

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007808:	00539821 	addu	s3,v0,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:235
	if(ret){
		printf("mmc%d clk set error2!!\n",mmc_no);
		return -EINVAL;
	}

	writel((1 << 0) , SDIO0_CLKENA + mmc_no * SIFLOWER_SDIO_OFFSET);                 //config the clock enable register
bc00780c:	ae830000 	sw	v1,0(s4)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:237

	writel(SDIO0_CMD_START | SDIO0_CMD_UPD_CLK | SDIO0_CMD_PRV_DAT_WAIT , SDIO0_CMD + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007810:	ae720000 	sw	s2,0(s3)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:239

	ret = mmc_wait_START();
bc007814:	0f001d9f 	jal	bc00767c <mmc_wait_START>
bc007818:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:240
	if(ret){
bc00781c:	50400004 	beqzl	v0,bc007830 <mmc_clk_set+0x120>
bc007820:	02c02021 	move	a0,s6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:241
		printf("mmc%d clk set error3!!\n",mmc_no);
bc007824:	3c04bc01 	lui	a0,0xbc01
bc007828:	0b001dfb 	j	bc0077ec <mmc_clk_set+0xdc>
bc00782c:	248494ec 	addiu	a0,a0,-27412
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:245
		return -EINVAL;
	}

	u_delay(delay);
bc007830:	0f001080 	jal	bc004200 <u_delay_cpu>
bc007834:	afa20018 	sw	v0,24(sp)
bc007838:	8fa20018 	lw	v0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:248

	return 0;
}
bc00783c:	8fbf003c 	lw	ra,60(sp)
bc007840:	8fb60038 	lw	s6,56(sp)
bc007844:	8fb50034 	lw	s5,52(sp)
bc007848:	8fb40030 	lw	s4,48(sp)
bc00784c:	8fb3002c 	lw	s3,44(sp)
bc007850:	8fb20028 	lw	s2,40(sp)
bc007854:	8fb10024 	lw	s1,36(sp)
bc007858:	8fb00020 	lw	s0,32(sp)
bc00785c:	03e00008 	jr	ra
bc007860:	27bd0040 	addiu	sp,sp,64

bc007864 <mmc_wait_response>:
mmc_wait_response():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:107
 *                                                                  *
 ********************************************************************
 */

static int mmc_wait_response(void)
{
bc007864:	27bdffd8 	addiu	sp,sp,-40
bc007868:	afb1001c 	sw	s1,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:112
	u32 reg = 0;
	u32 ret = 0;
	u32 count = 0;

	while(!(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 2)))
bc00786c:	3c11b780 	lui	s1,0xb780
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:107
 *                                                                  *
 ********************************************************************
 */

static int mmc_wait_response(void)
{
bc007870:	afb20020 	sw	s2,32(sp)
bc007874:	afb00018 	sw	s0,24(sp)
bc007878:	afbf0024 	sw	ra,36(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:112
	u32 reg = 0;
	u32 ret = 0;
	u32 count = 0;

	while(!(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 2)))
bc00787c:	241000c9 	li	s0,201
bc007880:	3c12bc01 	lui	s2,0xbc01
bc007884:	26310044 	addiu	s1,s1,68
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:112 (discriminator 1)
bc007888:	8e439918 	lw	v1,-26344(s2)
bc00788c:	00031d80 	sll	v1,v1,0x16
bc007890:	00711821 	addu	v1,v1,s1
bc007894:	8c620000 	lw	v0,0(v1)
bc007898:	30420004 	andi	v0,v0,0x4
bc00789c:	1440000a 	bnez	v0,bc0078c8 <mmc_wait_response+0x64>
bc0078a0:	2404000a 	li	a0,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:114
	{
		u_delay(10);
bc0078a4:	0f001080 	jal	bc004200 <u_delay_cpu>
bc0078a8:	2610ffff 	addiu	s0,s0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:116
		count++;
		if(count > COUNT_MAX1){
bc0078ac:	1600fff7 	bnez	s0,bc00788c <mmc_wait_response+0x28>
bc0078b0:	8e439918 	lw	v1,-26344(s2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:117
			printf("response wait timeout!!!!\n");
bc0078b4:	3c04bc01 	lui	a0,0xbc01
bc0078b8:	0f00239b 	jal	bc008e6c <puts>
bc0078bc:	24849504 	addiu	a0,a0,-27388
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:118
			return -EINVAL;
bc0078c0:	0b001e3d 	j	bc0078f4 <mmc_wait_response+0x90>
bc0078c4:	2402ffea 	li	v0,-22
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:122
		}
	}

	reg = readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0078c8:	8c620000 	lw	v0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:124

	writel((1 << 2),SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0078cc:	24040004 	li	a0,4
bc0078d0:	ac640000 	sw	a0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:126

	if(reg &((1<<1) | (1<<6) | (1<<8)))
bc0078d4:	30440142 	andi	a0,v0,0x142
bc0078d8:	10800003 	beqz	a0,bc0078e8 <mmc_wait_response+0x84>
bc0078dc:	00008021 	move	s0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:129
	{
		ret = -EIO;
		writel(reg,SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0078e0:	ac620000 	sw	v0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:128

	writel((1 << 2),SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);

	if(reg &((1<<1) | (1<<6) | (1<<8)))
	{
		ret = -EIO;
bc0078e4:	2410fffb 	li	s0,-5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:132
		writel(reg,SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
	}

	m_delay(1);
bc0078e8:	0f00108a 	jal	bc004228 <m_delay_cpu>
bc0078ec:	24040001 	li	a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:134

	return ret;
bc0078f0:	02001021 	move	v0,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:135
}
bc0078f4:	8fbf0024 	lw	ra,36(sp)
bc0078f8:	8fb20020 	lw	s2,32(sp)
bc0078fc:	8fb1001c 	lw	s1,28(sp)
bc007900:	8fb00018 	lw	s0,24(sp)
bc007904:	03e00008 	jr	ra
bc007908:	27bd0028 	addiu	sp,sp,40

bc00790c <mmc_set_block_length>:
mmc_set_block_length():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:605
		return 0x4321;

}

static int mmc_set_block_length(u32 BLK_len)
{
bc00790c:	27bdffe0 	addiu	sp,sp,-32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:609
	u32 RES_0 = 0;

	//CMD16 set the block length .
	mmc_send_cmd(BLK_len, MMC_CMD_SET_BLOCKLEN, SDIO0_CMD_RESP_CRC);
bc007910:	24050010 	li	a1,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:605
		return 0x4321;

}

static int mmc_set_block_length(u32 BLK_len)
{
bc007914:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:609
	u32 RES_0 = 0;

	//CMD16 set the block length .
	mmc_send_cmd(BLK_len, MMC_CMD_SET_BLOCKLEN, SDIO0_CMD_RESP_CRC);
bc007918:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc00791c:	24060100 	li	a2,256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:611

	mmc_wait_response();
bc007920:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007924:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:612
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007928:	3c02bc01 	lui	v0,0xbc01
bc00792c:	8c439918 	lw	v1,-26344(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:615

	return RES_0;
}
bc007930:	8fbf001c 	lw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:612

	//CMD16 set the block length .
	mmc_send_cmd(BLK_len, MMC_CMD_SET_BLOCKLEN, SDIO0_CMD_RESP_CRC);

	mmc_wait_response();
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007934:	3c02b780 	lui	v0,0xb780
bc007938:	00031d80 	sll	v1,v1,0x16
bc00793c:	24420030 	addiu	v0,v0,48
bc007940:	00621021 	addu	v0,v1,v0
bc007944:	8c420000 	lw	v0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:615

	return RES_0;
}
bc007948:	03e00008 	jr	ra
bc00794c:	27bd0020 	addiu	sp,sp,32

bc007950 <mmc_set_block_count>:
mmc_set_block_count():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:618

static int mmc_set_block_count(u32 BLK_count)
{
bc007950:	27bdffe0 	addiu	sp,sp,-32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:622
	u32 RES_0 = 0;

	//CMD23 set the block count .
	mmc_send_cmd(BLK_count, MMC_CMD_SET_BLKCNT, SDIO0_CMD_RESP_CRC);
bc007954:	24050017 	li	a1,23
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:618

	return RES_0;
}

static int mmc_set_block_count(u32 BLK_count)
{
bc007958:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:622
	u32 RES_0 = 0;

	//CMD23 set the block count .
	mmc_send_cmd(BLK_count, MMC_CMD_SET_BLKCNT, SDIO0_CMD_RESP_CRC);
bc00795c:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007960:	24060100 	li	a2,256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:624

	mmc_wait_response();
bc007964:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007968:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:625
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00796c:	3c02bc01 	lui	v0,0xbc01
bc007970:	8c439918 	lw	v1,-26344(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:628

	return RES_0;
}
bc007974:	8fbf001c 	lw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:625

	//CMD23 set the block count .
	mmc_send_cmd(BLK_count, MMC_CMD_SET_BLKCNT, SDIO0_CMD_RESP_CRC);

	mmc_wait_response();
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007978:	3c02b780 	lui	v0,0xb780
bc00797c:	00031d80 	sll	v1,v1,0x16
bc007980:	24420030 	addiu	v0,v0,48
bc007984:	00621021 	addu	v0,v1,v0
bc007988:	8c420000 	lw	v0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:628

	return RES_0;
}
bc00798c:	03e00008 	jr	ra
bc007990:	27bd0020 	addiu	sp,sp,32

bc007994 <mmc_block_read>:
mmc_block_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:631

static int mmc_block_read(u32 ADDR,u8 * buf,u32 blk_size,u32 blk_count)
{
bc007994:	27bdffb8 	addiu	sp,sp,-72
bc007998:	afb3002c 	sw	s3,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:638
	u32 count = 0;
	u32 byte_count = 0;
	u32 tmp_size = 0;
	u32 cmd_index = 0;

	byte_count = blk_size*blk_count;
bc00799c:	70c79802 	mul	s3,a2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:631

	return RES_0;
}

static int mmc_block_read(u32 ADDR,u8 * buf,u32 blk_size,u32 blk_count)
{
bc0079a0:	afb40030 	sw	s4,48(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:643
	byte_count = blk_size*blk_count;
	cmd_index = (blk_count == 1)?SD_CMD_READ_SINGLE_BLOCK:SD_CMD_READ_MULTIPLE_BLOCK;

	tmp_size = byte_count;

	writel(blk_size , SDIO0_BLKSIZ + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0079a4:	3c14bc01 	lui	s4,0xbc01
bc0079a8:	8e829918 	lw	v0,-26344(s4)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:631

	return RES_0;
}

static int mmc_block_read(u32 ADDR,u8 * buf,u32 blk_size,u32 blk_count)
{
bc0079ac:	afb00020 	sw	s0,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:643
	byte_count = blk_size*blk_count;
	cmd_index = (blk_count == 1)?SD_CMD_READ_SINGLE_BLOCK:SD_CMD_READ_MULTIPLE_BLOCK;

	tmp_size = byte_count;

	writel(blk_size , SDIO0_BLKSIZ + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0079b0:	3c10b780 	lui	s0,0xb780
bc0079b4:	00021580 	sll	v0,v0,0x16
bc0079b8:	2603001c 	addiu	v1,s0,28
bc0079bc:	00431821 	addu	v1,v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:631

	return RES_0;
}

static int mmc_block_read(u32 ADDR,u8 * buf,u32 blk_size,u32 blk_count)
{
bc0079c0:	afbf0044 	sw	ra,68(sp)
bc0079c4:	afbe0040 	sw	s8,64(sp)
bc0079c8:	afb7003c 	sw	s7,60(sp)
bc0079cc:	afb60038 	sw	s6,56(sp)
bc0079d0:	afb50034 	sw	s5,52(sp)
bc0079d4:	afb20028 	sw	s2,40(sp)
bc0079d8:	afb10024 	sw	s1,36(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:643
	byte_count = blk_size*blk_count;
	cmd_index = (blk_count == 1)?SD_CMD_READ_SINGLE_BLOCK:SD_CMD_READ_MULTIPLE_BLOCK;

	tmp_size = byte_count;

	writel(blk_size , SDIO0_BLKSIZ + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0079dc:	ac660000 	sw	a2,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:644
	writel(byte_count , SDIO0_BYTCNT + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0079e0:	26030020 	addiu	v1,s0,32
bc0079e4:	00431821 	addu	v1,v0,v1
bc0079e8:	ac730000 	sw	s3,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:646

	writel((0x200 << 16) | 0x1 , SDIO0_BEP + mmc_no * SIFLOWER_SDIO_OFFSET);
bc0079ec:	26030100 	addiu	v1,s0,256
bc0079f0:	00431021 	addu	v0,v0,v1
bc0079f4:	3c030200 	lui	v1,0x200
bc0079f8:	24630001 	addiu	v1,v1,1
bc0079fc:	ac430000 	sw	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:631

	return RES_0;
}

static int mmc_block_read(u32 ADDR,u8 * buf,u32 blk_size,u32 blk_count)
{
bc007a00:	00a0b021 	move	s6,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:648
	writel(blk_size , SDIO0_BLKSIZ + mmc_no * SIFLOWER_SDIO_OFFSET);
	writel(byte_count , SDIO0_BYTCNT + mmc_no * SIFLOWER_SDIO_OFFSET);

	writel((0x200 << 16) | 0x1 , SDIO0_BEP + mmc_no * SIFLOWER_SDIO_OFFSET);

	mmc_send_cmd(ADDR, cmd_index, SDIO0_CMD_DAT_EXP);
bc007a04:	24030012 	li	v1,18
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:639
	u32 byte_count = 0;
	u32 tmp_size = 0;
	u32 cmd_index = 0;

	byte_count = blk_size*blk_count;
	cmd_index = (blk_count == 1)?SD_CMD_READ_SINGLE_BLOCK:SD_CMD_READ_MULTIPLE_BLOCK;
bc007a08:	38e50001 	xori	a1,a3,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:648
	writel(blk_size , SDIO0_BLKSIZ + mmc_no * SIFLOWER_SDIO_OFFSET);
	writel(byte_count , SDIO0_BYTCNT + mmc_no * SIFLOWER_SDIO_OFFSET);

	writel((0x200 << 16) | 0x1 , SDIO0_BEP + mmc_no * SIFLOWER_SDIO_OFFSET);

	mmc_send_cmd(ADDR, cmd_index, SDIO0_CMD_DAT_EXP);
bc007a0c:	24020011 	li	v0,17
bc007a10:	0065100b 	movn	v0,v1,a1
bc007a14:	00402821 	move	a1,v0
bc007a18:	24060200 	li	a2,512
bc007a1c:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007a20:	00e0a821 	move	s5,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:652

	mmc_wait_response();

	count = 0;
bc007a24:	00009021 	move	s2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:650

	writel((0x200 << 16) | 0x1 , SDIO0_BEP + mmc_no * SIFLOWER_SDIO_OFFSET);

	mmc_send_cmd(ADDR, cmd_index, SDIO0_CMD_DAT_EXP);

	mmc_wait_response();
bc007a28:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007a2c:	00008821 	move	s1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:656

	count = 0;

	while(byte_count)
	{
		while(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & ((1 << 5)|(1 << 10)))
bc007a30:	261e0044 	addiu	s8,s0,68
mci_pull_data32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:166
{
	u32 *pdata = (u32 *)buf;

	len = len >> 2;
	while(len > 0) {
		*pdata = readl(SDIO0_DATA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007a34:	26170200 	addiu	s7,s0,512
mmc_block_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:658

	while(byte_count)
	{
		while(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & ((1 << 5)|(1 << 10)))
		{
			writel((1 << 5)|(1 << 10) , SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007a38:	24050420 	li	a1,1056
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:671
		}

		if(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 3))
		{
			writel((1<<3) , SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
			while(!(readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 2)))
bc007a3c:	26060048 	addiu	a2,s0,72
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:654 (discriminator 1)

	mmc_wait_response();

	count = 0;

	while(byte_count)
bc007a40:	1260003a 	beqz	s3,bc007b2c <mmc_block_read+0x198>
bc007a44:	8e839918 	lw	v1,-26344(s4)
mci_pull_data32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:166
{
	u32 *pdata = (u32 *)buf;

	len = len >> 2;
	while(len > 0) {
		*pdata = readl(SDIO0_DATA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007a48:	02608021 	move	s0,s3
mmc_block_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:656

	count = 0;

	while(byte_count)
	{
		while(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & ((1 << 5)|(1 << 10)))
bc007a4c:	00031d80 	sll	v1,v1,0x16
bc007a50:	007e1021 	addu	v0,v1,s8
mci_pull_data32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:166
{
	u32 *pdata = (u32 *)buf;

	len = len >> 2;
	while(len > 0) {
		*pdata = readl(SDIO0_DATA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007a54:	00772021 	addu	a0,v1,s7
mmc_block_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:656 (discriminator 1)

	count = 0;

	while(byte_count)
	{
		while(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & ((1 << 5)|(1 << 10)))
bc007a58:	8c470000 	lw	a3,0(v0)
bc007a5c:	30e70420 	andi	a3,a3,0x420
bc007a60:	10e00004 	beqz	a3,bc007a74 <mmc_block_read+0xe0>
bc007a64:	2e070004 	sltiu	a3,s0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:658
		{
			writel((1 << 5)|(1 << 10) , SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007a68:	ac450000 	sw	a1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:660

			if(byte_count < 4)
bc007a6c:	10e00009 	beqz	a3,bc007a94 <mmc_block_read+0x100>
bc007a70:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:668
			mci_pull_data32(buf + i, 4);
			byte_count -= 4;
			i += 4;
		}

		if(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 3))
bc007a74:	8c470000 	lw	a3,0(v0)
bc007a78:	30e70008 	andi	a3,a3,0x8
bc007a7c:	50e00016 	beqzl	a3,bc007ad8 <mmc_block_read+0x144>
bc007a80:	2e020004 	sltiu	v0,s0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:670
		{
			writel((1<<3) , SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007a84:	24070008 	li	a3,8
bc007a88:	ac470000 	sw	a3,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:671
			while(!(readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 2)))
bc007a8c:	0b001eb2 	j	bc007ac8 <mmc_block_read+0x134>
bc007a90:	00661821 	addu	v1,v1,a2
mci_pull_data32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:166
{
	u32 *pdata = (u32 *)buf;

	len = len >> 2;
	while(len > 0) {
		*pdata = readl(SDIO0_DATA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007a94:	8c880000 	lw	t0,0(a0)
bc007a98:	02d13821 	addu	a3,s6,s1
mmc_block_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:664

			if(byte_count < 4)
				break;

			mci_pull_data32(buf + i, 4);
			byte_count -= 4;
bc007a9c:	2610fffc 	addiu	s0,s0,-4
mci_pull_data32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:166
{
	u32 *pdata = (u32 *)buf;

	len = len >> 2;
	while(len > 0) {
		*pdata = readl(SDIO0_DATA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007aa0:	ace80000 	sw	t0,0(a3)
mmc_block_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:665
			if(byte_count < 4)
				break;

			mci_pull_data32(buf + i, 4);
			byte_count -= 4;
			i += 4;
bc007aa4:	0b001e96 	j	bc007a58 <mmc_block_read+0xc4>
bc007aa8:	26310004 	addiu	s1,s1,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:673
		if(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 3))
		{
			writel((1<<3) , SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
			while(!(readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 2)))
			{
				if(byte_count < 4)
bc007aac:	54400020 	bnezl	v0,bc007b30 <mmc_block_read+0x19c>
bc007ab0:	2eb50002 	sltiu	s5,s5,2
mci_pull_data32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:166
{
	u32 *pdata = (u32 *)buf;

	len = len >> 2;
	while(len > 0) {
		*pdata = readl(SDIO0_DATA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007ab4:	8c870000 	lw	a3,0(a0)
bc007ab8:	02d11021 	addu	v0,s6,s1
mmc_block_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:677
			{
				if(byte_count < 4)
					break;

				mci_pull_data32(buf + i, 4);
				byte_count -= 4;
bc007abc:	2610fffc 	addiu	s0,s0,-4
mci_pull_data32():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:166
{
	u32 *pdata = (u32 *)buf;

	len = len >> 2;
	while(len > 0) {
		*pdata = readl(SDIO0_DATA + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007ac0:	ac470000 	sw	a3,0(v0)
mmc_block_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:678
				if(byte_count < 4)
					break;

				mci_pull_data32(buf + i, 4);
				byte_count -= 4;
				i += 4;
bc007ac4:	26310004 	addiu	s1,s1,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:671 (discriminator 1)
		}

		if(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 3))
		{
			writel((1<<3) , SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
			while(!(readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET) & (1 << 2)))
bc007ac8:	8c620000 	lw	v0,0(v1)
bc007acc:	30420004 	andi	v0,v0,0x4
bc007ad0:	1040fff6 	beqz	v0,bc007aac <mmc_block_read+0x118>
bc007ad4:	2e020004 	sltiu	v0,s0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:682
				byte_count -= 4;
				i += 4;
			}
		}

		if(byte_count < 4)
bc007ad8:	54400015 	bnezl	v0,bc007b30 <mmc_block_read+0x19c>
bc007adc:	2eb50002 	sltiu	s5,s5,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:685
			break;

		if(byte_count == tmp_size)
bc007ae0:	56130010 	bnel	s0,s3,bc007b24 <mmc_block_read+0x190>
bc007ae4:	00009021 	move	s2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:687
		{
			count++;
bc007ae8:	26520001 	addiu	s2,s2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:688
			u_delay(4);
bc007aec:	24040004 	li	a0,4
bc007af0:	afa50018 	sw	a1,24(sp)
bc007af4:	0f001080 	jal	bc004200 <u_delay_cpu>
bc007af8:	afa6001c 	sw	a2,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:689
			if(count > COUNT_MAX1){
bc007afc:	2e4200c9 	sltiu	v0,s2,201
bc007b00:	8fa50018 	lw	a1,24(sp)
bc007b04:	14400007 	bnez	v0,bc007b24 <mmc_block_read+0x190>
bc007b08:	8fa6001c 	lw	a2,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:690
				printf("MMC%d block read wait blk_size timeout!\n",mmc_no);
bc007b0c:	8e859918 	lw	a1,-26344(s4)
bc007b10:	3c04bc01 	lui	a0,0xbc01
bc007b14:	0f002379 	jal	bc008de4 <printf>
bc007b18:	24849520 	addiu	a0,a0,-27360
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:691
				break;
bc007b1c:	0b001ecc 	j	bc007b30 <mmc_block_read+0x19c>
bc007b20:	2eb50002 	sltiu	s5,s5,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:696 (discriminator 1)
			}
		}
		else
		{
			count = 0;
bc007b24:	0b001e90 	j	bc007a40 <mmc_block_read+0xac>
bc007b28:	02009821 	move	s3,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:701
			tmp_size = byte_count;
		}
	}

	if(blk_count > 1){
bc007b2c:	2eb50002 	sltiu	s5,s5,2
bc007b30:	16a0000c 	bnez	s5,bc007b64 <mmc_block_read+0x1d0>
bc007b34:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:702
		mmc_send_cmd(0x0, SD_CMD_STOP_TRANSMISSION, 0);
bc007b38:	2405000c 	li	a1,12
bc007b3c:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007b40:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:704

		mmc_wait_response();
bc007b44:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007b48:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:705
		readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007b4c:	8e839918 	lw	v1,-26344(s4)
bc007b50:	3c02b780 	lui	v0,0xb780
bc007b54:	24420030 	addiu	v0,v0,48
bc007b58:	00031d80 	sll	v1,v1,0x16
bc007b5c:	00621021 	addu	v0,v1,v0
bc007b60:	8c420000 	lw	v0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:712

	if(count > COUNT_MAX1)
		return -EINVAL;
	else
		return 0;
}
bc007b64:	8fbf0044 	lw	ra,68(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:708

		mmc_wait_response();
		readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
	}

	if(count > COUNT_MAX1)
bc007b68:	2e5200c9 	sltiu	s2,s2,201
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:709
		return -EINVAL;
bc007b6c:	2402ffea 	li	v0,-22
bc007b70:	0012100b 	movn	v0,zero,s2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:712
	else
		return 0;
}
bc007b74:	8fbe0040 	lw	s8,64(sp)
bc007b78:	8fb7003c 	lw	s7,60(sp)
bc007b7c:	8fb60038 	lw	s6,56(sp)
bc007b80:	8fb50034 	lw	s5,52(sp)
bc007b84:	8fb40030 	lw	s4,48(sp)
bc007b88:	8fb3002c 	lw	s3,44(sp)
bc007b8c:	8fb20028 	lw	s2,40(sp)
bc007b90:	8fb10024 	lw	s1,36(sp)
bc007b94:	8fb00020 	lw	s0,32(sp)
bc007b98:	03e00008 	jr	ra
bc007b9c:	27bd0048 	addiu	sp,sp,72

bc007ba0 <mmc_initialization>:
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:552
	return RES_0;
}


int mmc_initialization(u32 dev_choose)
{
bc007ba0:	27bdffc0 	addiu	sp,sp,-64
bc007ba4:	afb30028 	sw	s3,40(sp)
bc007ba8:	afb10020 	sw	s1,32(sp)
mmc_power_enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:186
 */

static void mmc_power_enable(void)
{

	writel(0x1 , SDIO0_PWREN + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007bac:	3c13b780 	lui	s3,0xb780
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:558
	u32 RCA;
	u32 ret = 0;
	u32 div_1 = 0,div_2 = 0;
	u32 clock = 0;

	mmc_no = dev_choose;
bc007bb0:	3c11bc01 	lui	s1,0xbc01
bc007bb4:	ae249918 	sw	a0,-26344(s1)
mmc_power_enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:186
 */

static void mmc_power_enable(void)
{

	writel(0x1 , SDIO0_PWREN + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007bb8:	26620004 	addiu	v0,s3,4
bc007bbc:	00042580 	sll	a0,a0,0x16
bc007bc0:	00822021 	addu	a0,a0,v0
bc007bc4:	24020001 	li	v0,1
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:552
	return RES_0;
}


int mmc_initialization(u32 dev_choose)
{
bc007bc8:	afbf003c 	sw	ra,60(sp)
bc007bcc:	afb70038 	sw	s7,56(sp)
bc007bd0:	afb60034 	sw	s6,52(sp)
bc007bd4:	afb50030 	sw	s5,48(sp)
bc007bd8:	afb4002c 	sw	s4,44(sp)
bc007bdc:	afb20024 	sw	s2,36(sp)
bc007be0:	afb0001c 	sw	s0,28(sp)
mmc_power_enable():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:186
 */

static void mmc_power_enable(void)
{

	writel(0x1 , SDIO0_PWREN + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007be4:	ac820000 	sw	v0,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:187
	u_delay(50);
bc007be8:	0f001080 	jal	bc004200 <u_delay_cpu>
bc007bec:	24040032 	li	a0,50
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:566
	div_1 = (clock-1)/(MMC_INIT_RATE*2)+1;
	div_2 = (clock-1)/(MMC_WR_RATE*2)+1;

	mmc_power_enable();

	ret = mmc_clk_set(div_1);
bc007bf0:	0f001dc4 	jal	bc007710 <mmc_clk_set>
bc007bf4:	240400bc 	li	a0,188
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:567
	if(ret){
bc007bf8:	1440008f 	bnez	v0,bc007e38 <mmc_initialization+0x298>
bc007bfc:	00002021 	move	a0,zero
mmc_enter_idle():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:265
static int mmc_enter_idle(void)
{
	u32 ret = 0;
	u32 count=0;

	mmc_send_cmd(0x0, MMC_CMD_GO_IDLE_STATE, 0);
bc007c00:	00002821 	move	a1,zero
bc007c04:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007c08:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:267
	//send CMD0 to enter the IDLE status.
	ret = mmc_wait_START();
bc007c0c:	0f001d9f 	jal	bc00767c <mmc_wait_START>
bc007c10:	02208021 	move	s0,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:268
	if(ret){
bc007c14:	241200c8 	li	s2,200
bc007c18:	10400005 	beqz	v0,bc007c30 <mmc_initialization+0x90>
bc007c1c:	26750044 	addiu	s5,s3,68
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:269
		printf("mmc%d enter idle wait start timeout !!!\n",mmc_no);
bc007c20:	3c04bc01 	lui	a0,0xbc01
bc007c24:	2484954c 	addiu	a0,a0,-27316
mmc_initialization():
bc007c28:	0b001f8c 	j	bc007e30 <mmc_initialization+0x290>
bc007c2c:	8e259918 	lw	a1,-26344(s1)
mmc_enter_idle():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:275
		return -EINVAL;
	}

	while(count < COUNT_MAX1)
	{
		if(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET)&(1 << 2))
bc007c30:	8e039918 	lw	v1,-26344(s0)
bc007c34:	3c13bc01 	lui	s3,0xbc01
bc007c38:	3c14b780 	lui	s4,0xb780
bc007c3c:	00031580 	sll	v0,v1,0x16
bc007c40:	00551021 	addu	v0,v0,s5
bc007c44:	8c440000 	lw	a0,0(v0)
bc007c48:	30840004 	andi	a0,a0,0x4
bc007c4c:	1080001b 	beqz	a0,bc007cbc <mmc_initialization+0x11c>
bc007c50:	24040032 	li	a0,50
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:277
		{
			writel((1<<2),SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007c54:	24040004 	li	a0,4
bc007c58:	ac440000 	sw	a0,0(v0)
mmc_voltage_match():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:308
{
	u32 RES_0;
	u32 count = 0;
	u32 arg = 0;

	if(mmc_no == 1){
bc007c5c:	24020001 	li	v0,1
bc007c60:	1462003e 	bne	v1,v0,bc007d5c <mmc_initialization+0x1bc>
bc007c64:	3c11bc01 	lui	s1,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:310
		//send CMD8 to get sd version and decide if need to set HCS.
		mmc_send_cmd(0x1aa, SD_CMD_SEND_IF_COND, 0);
bc007c68:	240401aa 	li	a0,426
bc007c6c:	24050008 	li	a1,8
bc007c70:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007c74:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:312

		mmc_wait_response();
bc007c78:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007c7c:	26940030 	addiu	s4,s4,48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:314

		RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007c80:	8e629918 	lw	v0,-26344(s3)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:332

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);

			//send the ACMD41 to match the voltage.(2.7~3.6 V)
			if(sd_version_2)
				arg |= 0xFF8000 | OCR_HCS;
bc007c84:	3c1540ff 	lui	s5,0x40ff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:314
		//send CMD8 to get sd version and decide if need to set HCS.
		mmc_send_cmd(0x1aa, SD_CMD_SEND_IF_COND, 0);

		mmc_wait_response();

		RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007c88:	00021580 	sll	v0,v0,0x16
bc007c8c:	00541021 	addu	v0,v0,s4
bc007c90:	8c420000 	lw	v0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:334

			//send the ACMD41 to match the voltage.(2.7~3.6 V)
			if(sd_version_2)
				arg |= 0xFF8000 | OCR_HCS;
			else
				arg |= 0xFF8000;
bc007c94:	3c1600ff 	lui	s6,0xff
mmc_enter_idle():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:268
	u32 count=0;

	mmc_send_cmd(0x0, MMC_CMD_GO_IDLE_STATE, 0);
	//send CMD0 to enter the IDLE status.
	ret = mmc_wait_START();
	if(ret){
bc007c98:	241200c9 	li	s2,201
mmc_voltage_match():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:315
		mmc_send_cmd(0x1aa, SD_CMD_SEND_IF_COND, 0);

		mmc_wait_response();

		RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
		if((RES_0 & 0xff) == 0xaa)
bc007c9c:	304200ff 	andi	v0,v0,0xff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:316
			sd_version_2 = 1;
bc007ca0:	384200aa 	xori	v0,v0,0xaa
bc007ca4:	2c420001 	sltiu	v0,v0,1
bc007ca8:	ae229910 	sw	v0,-26352(s1)
mmc_enter_idle():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:268
	u32 count=0;

	mmc_send_cmd(0x0, MMC_CMD_GO_IDLE_STATE, 0);
	//send CMD0 to enter the IDLE status.
	ret = mmc_wait_START();
	if(ret){
bc007cac:	00009821 	move	s3,zero
mmc_voltage_match():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:332

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);

			//send the ACMD41 to match the voltage.(2.7~3.6 V)
			if(sd_version_2)
				arg |= 0xFF8000 | OCR_HCS;
bc007cb0:	36b58000 	ori	s5,s5,0x8000
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:334
			else
				arg |= 0xFF8000;
bc007cb4:	0b001f39 	j	bc007ce4 <mmc_initialization+0x144>
bc007cb8:	36d68000 	ori	s6,s6,0x8000
mmc_enter_idle():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:280
		if(readl(SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET)&(1 << 2))
		{
			writel((1<<2),SDIO0_RINTSTS + mmc_no * SIFLOWER_SDIO_OFFSET);
			break;
		}
		u_delay(50);
bc007cbc:	0f001080 	jal	bc004200 <u_delay_cpu>
bc007cc0:	2652ffff 	addiu	s2,s2,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:273
	if(ret){
		printf("mmc%d enter idle wait start timeout !!!\n",mmc_no);
		return -EINVAL;
	}

	while(count < COUNT_MAX1)
bc007cc4:	1640ffdb 	bnez	s2,bc007c34 <mmc_initialization+0x94>
bc007cc8:	8e039918 	lw	v1,-26344(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:285
		u_delay(50);
		count++;
	}

	if(count >= COUNT_MAX1){
		printf("mmc%d enter idle timeout !!!\n",mmc_no);
bc007ccc:	3c04bc01 	lui	a0,0xbc01
bc007cd0:	248495cc 	addiu	a0,a0,-27188
mmc_initialization():
bc007cd4:	0b001f8c 	j	bc007e30 <mmc_initialization+0x290>
bc007cd8:	8e659918 	lw	a1,-26344(s3)
mmc_voltage_match():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:350
			if(count>COUNT_MAX1){
				printf("voltage match timeout !!!\n");
				break;
			}
		}
		while(!(RES_0 & OCR_BUSY));
bc007cdc:	06e2003b 	bltzl	s7,bc007dcc <mmc_initialization+0x22c>
bc007ce0:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:324

		//send ACMD41 to get voltage matched.
		do
		{
			//send CMD55 to tell the card the next CMD is ACMD.
			mmc_send_cmd(0x0, SD_CMD_APP_CMD, 0);
bc007ce4:	00002021 	move	a0,zero
bc007ce8:	24050037 	li	a1,55
bc007cec:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007cf0:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:326

			mmc_wait_response();
bc007cf4:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007cf8:	02769825 	or	s3,s3,s6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:328

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007cfc:	8e029918 	lw	v0,-26344(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:336
			if(sd_version_2)
				arg |= 0xFF8000 | OCR_HCS;
			else
				arg |= 0xFF8000;

			mmc_send_cmd(arg, SD_CMD_APP_SEND_OP_COND, 0);
bc007d00:	24050029 	li	a1,41
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:328
			//send CMD55 to tell the card the next CMD is ACMD.
			mmc_send_cmd(0x0, SD_CMD_APP_CMD, 0);

			mmc_wait_response();

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007d04:	00021580 	sll	v0,v0,0x16
bc007d08:	00541021 	addu	v0,v0,s4
bc007d0c:	8c420000 	lw	v0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:331

			//send the ACMD41 to match the voltage.(2.7~3.6 V)
			if(sd_version_2)
bc007d10:	8e229910 	lw	v0,-26352(s1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:336
				arg |= 0xFF8000 | OCR_HCS;
			else
				arg |= 0xFF8000;

			mmc_send_cmd(arg, SD_CMD_APP_SEND_OP_COND, 0);
bc007d14:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:326
		do
		{
			//send CMD55 to tell the card the next CMD is ACMD.
			mmc_send_cmd(0x0, SD_CMD_APP_CMD, 0);

			mmc_wait_response();
bc007d18:	2652ffff 	addiu	s2,s2,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:334

			//send the ACMD41 to match the voltage.(2.7~3.6 V)
			if(sd_version_2)
				arg |= 0xFF8000 | OCR_HCS;
			else
				arg |= 0xFF8000;
bc007d1c:	02a2980b 	movn	s3,s5,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:336

			mmc_send_cmd(arg, SD_CMD_APP_SEND_OP_COND, 0);
bc007d20:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007d24:	02602021 	move	a0,s3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:338

			mmc_wait_response();
bc007d28:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007d2c:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:340

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007d30:	8e029918 	lw	v0,-26344(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:342

			u_delay(10);
bc007d34:	2404000a 	li	a0,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:340

			mmc_send_cmd(arg, SD_CMD_APP_SEND_OP_COND, 0);

			mmc_wait_response();

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007d38:	00021580 	sll	v0,v0,0x16
bc007d3c:	00541021 	addu	v0,v0,s4
bc007d40:	8c570000 	lw	s7,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:342

			u_delay(10);
bc007d44:	0f001080 	jal	bc004200 <u_delay_cpu>
bc007d48:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:345

			count++;
			if(count>COUNT_MAX1){
bc007d4c:	1640ffe3 	bnez	s2,bc007cdc <mmc_initialization+0x13c>
bc007d50:	3c04bc01 	lui	a0,0xbc01
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:346
				printf("voltage match timeout !!!\n");
bc007d54:	0b001f6c 	j	bc007db0 <mmc_initialization+0x210>
bc007d58:	24849578 	addiu	a0,a0,-27272
mmc_voltage_match():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:357
	else{
		sd_version_2 = 1;
		//send ACMD41 to get voltage matched.
		do
		{
			mmc_send_cmd(0x40FF8000, MMC_CMD_SEND_OP_COND, 0);
bc007d5c:	3c1240ff 	lui	s2,0x40ff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:353
			}
		}
		while(!(RES_0 & OCR_BUSY));
	}
	else{
		sd_version_2 = 1;
bc007d60:	ae229910 	sw	v0,-26352(s1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:357
		//send ACMD41 to get voltage matched.
		do
		{
			mmc_send_cmd(0x40FF8000, MMC_CMD_SEND_OP_COND, 0);
bc007d64:	36528000 	ori	s2,s2,0x8000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:353
			}
		}
		while(!(RES_0 & OCR_BUSY));
	}
	else{
		sd_version_2 = 1;
bc007d68:	241100c9 	li	s1,201
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:361
		{
			mmc_send_cmd(0x40FF8000, MMC_CMD_SEND_OP_COND, 0);

			mmc_wait_response();

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007d6c:	26940030 	addiu	s4,s4,48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:357
	else{
		sd_version_2 = 1;
		//send ACMD41 to get voltage matched.
		do
		{
			mmc_send_cmd(0x40FF8000, MMC_CMD_SEND_OP_COND, 0);
bc007d70:	02402021 	move	a0,s2
bc007d74:	24050001 	li	a1,1
bc007d78:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007d7c:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:359

			mmc_wait_response();
bc007d80:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007d84:	2631ffff 	addiu	s1,s1,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:361

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007d88:	8e029918 	lw	v0,-26344(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:363

			u_delay(10);
bc007d8c:	2404000a 	li	a0,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:361
		{
			mmc_send_cmd(0x40FF8000, MMC_CMD_SEND_OP_COND, 0);

			mmc_wait_response();

			RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007d90:	00021580 	sll	v0,v0,0x16
bc007d94:	00541021 	addu	v0,v0,s4
bc007d98:	8c530000 	lw	s3,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:363

			u_delay(10);
bc007d9c:	0f001080 	jal	bc004200 <u_delay_cpu>
bc007da0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:366

			count++;
			if(count>COUNT_MAX1){
bc007da4:	16200006 	bnez	s1,bc007dc0 <mmc_initialization+0x220>
bc007da8:	3c04bc01 	lui	a0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:367
				printf("match the voltage timeout!\n");
bc007dac:	24849594 	addiu	a0,a0,-27244
bc007db0:	0f00239b 	jal	bc008e6c <puts>
bc007db4:	00000000 	nop
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:394
	u32 RES_1,RES_2,RES_3;
	u32 cmd_flag = 0;

	//send CMD2 to get cid
	cmd_flag |= (SDIO0_CMD_RESP_LONG | SDIO0_CMD_RESP_CRC);
	mmc_send_cmd(0x0, SD_CMD_ALL_SEND_CID, cmd_flag);
bc007db8:	0b001f73 	j	bc007dcc <mmc_initialization+0x22c>
bc007dbc:	00002021 	move	a0,zero
mmc_voltage_match():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:371
			if(count>COUNT_MAX1){
				printf("match the voltage timeout!\n");
				break;
			}
		}
		while(!(RES_0 & OCR_BUSY));
bc007dc0:	0661ffec 	bgez	s3,bc007d74 <mmc_initialization+0x1d4>
bc007dc4:	02402021 	move	a0,s2
mmc_get_cid():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:394
	u32 RES_1,RES_2,RES_3;
	u32 cmd_flag = 0;

	//send CMD2 to get cid
	cmd_flag |= (SDIO0_CMD_RESP_LONG | SDIO0_CMD_RESP_CRC);
	mmc_send_cmd(0x0, SD_CMD_ALL_SEND_CID, cmd_flag);
bc007dc8:	00002021 	move	a0,zero
bc007dcc:	24050002 	li	a1,2
bc007dd0:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007dd4:	24060180 	li	a2,384
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:396

	mmc_wait_response();
bc007dd8:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007ddc:	3c12b780 	lui	s2,0xb780
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:398

	RES_3 = readl(SDIO0_RESP3 + mmc_no * SIFLOWER_SDIO_OFFSET);//0x3C
bc007de0:	8e059918 	lw	a1,-26344(s0)
bc007de4:	2643003c 	addiu	v1,s2,60
bc007de8:	00051580 	sll	v0,a1,0x16
bc007dec:	00431821 	addu	v1,v0,v1
bc007df0:	8c640000 	lw	a0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:399
	RES_2 = readl(SDIO0_RESP2 + mmc_no * SIFLOWER_SDIO_OFFSET);//0x38
bc007df4:	26430038 	addiu	v1,s2,56
bc007df8:	00431821 	addu	v1,v0,v1
bc007dfc:	8c660000 	lw	a2,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:400
	RES_1 = readl(SDIO0_RESP1 + mmc_no * SIFLOWER_SDIO_OFFSET);//0x34
bc007e00:	26430034 	addiu	v1,s2,52
bc007e04:	00431821 	addu	v1,v0,v1
bc007e08:	8c630000 	lw	v1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:401
	/*RES_0 = */readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);//0x30
bc007e0c:	26510030 	addiu	s1,s2,48
bc007e10:	00511021 	addu	v0,v0,s1
bc007e14:	8c420000 	lw	v0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:403

	if(RES_3 == 0 && RES_2 == 0 && RES_1 == 0)
bc007e18:	00c41025 	or	v0,a2,a0
bc007e1c:	00431025 	or	v0,v0,v1
bc007e20:	14400007 	bnez	v0,bc007e40 <mmc_initialization+0x2a0>
bc007e24:	3c13bc01 	lui	s3,0xbc01
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:581
	mmc_voltage_match();

	ret = mmc_get_cid();

	if(ret){
		printf("MMC%d init cid Failed!!!\n",mmc_no);
bc007e28:	3c04bc01 	lui	a0,0xbc01
bc007e2c:	248495ec 	addiu	a0,a0,-27156
mmc_enter_idle():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:285
		u_delay(50);
		count++;
	}

	if(count >= COUNT_MAX1){
		printf("mmc%d enter idle timeout !!!\n",mmc_no);
bc007e30:	0f002379 	jal	bc008de4 <printf>
bc007e34:	00000000 	nop
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:573
		return -EINVAL;
	}

	ret = mmc_enter_idle();
	if(ret){
		return -EINVAL;
bc007e38:	0b001ff5 	j	bc007fd4 <mmc_initialization+0x434>
bc007e3c:	2402ffea 	li	v0,-22
mmc_get_rca():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:424
static int mmc_get_rca(void)
{
	u32 RCA;

	//send CMD3 to get rca
	mmc_send_cmd(0x0, SD_CMD_SEND_RELATIVE_ADDR, SDIO0_CMD_RESP_CRC);
bc007e40:	00002021 	move	a0,zero
bc007e44:	24050003 	li	a1,3
bc007e48:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007e4c:	24060100 	li	a2,256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:426

	mmc_wait_response();
bc007e50:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007e54:	3c160001 	lui	s6,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:428

	RCA = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007e58:	8e629918 	lw	v0,-26344(s3)
mmc_select_card():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:452
static int mmc_select_card(u32 RCA)
{
	u32 RES_0;
	u32 arg = 0;

	arg |= RCA & 0xffff0000;
bc007e5c:	3c15ffff 	lui	s5,0xffff
mmc_get_rca():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:428
	//send CMD3 to get rca
	mmc_send_cmd(0x0, SD_CMD_SEND_RELATIVE_ADDR, SDIO0_CMD_RESP_CRC);

	mmc_wait_response();

	RCA = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007e60:	00021d80 	sll	v1,v0,0x16
bc007e64:	00711821 	addu	v1,v1,s1
bc007e68:	8c630000 	lw	v1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:433

	if(mmc_no == 1)
		return RCA;
	else
		return (1 << 16);
bc007e6c:	38440001 	xori	a0,v0,0x1
mmc_select_card():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:454
	u32 RES_0;
	u32 arg = 0;

	arg |= RCA & 0xffff0000;

	mmc_send_cmd(arg, SD_CMD_SELECT_CARD, 0);
bc007e70:	24050007 	li	a1,7
mmc_get_rca():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:433
	RCA = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);

	if(mmc_no == 1)
		return RCA;
	else
		return (1 << 16);
bc007e74:	02c4180b 	movn	v1,s6,a0
mmc_select_card():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:454
	u32 RES_0;
	u32 arg = 0;

	arg |= RCA & 0xffff0000;

	mmc_send_cmd(arg, SD_CMD_SELECT_CARD, 0);
bc007e78:	00752024 	and	a0,v1,s5
bc007e7c:	00003021 	move	a2,zero
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:587
		return -EINVAL;
	}

	RCA = mmc_get_rca();

	mmc_rca = RCA;
bc007e80:	3c14bc01 	lui	s4,0xbc01
mmc_select_card():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:454
	u32 RES_0;
	u32 arg = 0;

	arg |= RCA & 0xffff0000;

	mmc_send_cmd(arg, SD_CMD_SELECT_CARD, 0);
bc007e84:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007e88:	ae83991c 	sw	v1,-26340(s4)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:456

	mmc_wait_response();
bc007e8c:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007e90:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:457
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007e94:	8e029918 	lw	v0,-26344(s0)
mmc_set_bus_width():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:510
static int mmc_set_bus_width()
{
	u32 RES_0 = 0;
	u32 arg = 0;

	if(mmc_no == 1){
bc007e98:	24050001 	li	a1,1
mmc_select_card():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:457
	arg |= RCA & 0xffff0000;

	mmc_send_cmd(arg, SD_CMD_SELECT_CARD, 0);

	mmc_wait_response();
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007e9c:	00021d80 	sll	v1,v0,0x16
bc007ea0:	00712021 	addu	a0,v1,s1
bc007ea4:	8c840000 	lw	a0,0(a0)
mmc_set_bus_width():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:510
static int mmc_set_bus_width()
{
	u32 RES_0 = 0;
	u32 arg = 0;

	if(mmc_no == 1){
bc007ea8:	1445001b 	bne	v0,a1,bc007f18 <mmc_initialization+0x378>
bc007eac:	26440018 	addiu	a0,s2,24
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:513
		//ACMD6 set bus width 1/4 bit
		//writel((0 << 0) , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET); //choose 1-bit mode
		writel((1 << 0) , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET); //choose 4-bit mode
bc007eb0:	00641821 	addu	v1,v1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:515

		arg |= (mmc_rca & 0xffff0000);
bc007eb4:	8e84991c 	lw	a0,-26340(s4)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:513
	u32 arg = 0;

	if(mmc_no == 1){
		//ACMD6 set bus width 1/4 bit
		//writel((0 << 0) , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET); //choose 1-bit mode
		writel((1 << 0) , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET); //choose 4-bit mode
bc007eb8:	ac620000 	sw	v0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:517

		arg |= (mmc_rca & 0xffff0000);

		mmc_send_cmd(arg, SD_CMD_APP_CMD, 0);
bc007ebc:	24050037 	li	a1,55
bc007ec0:	02a42024 	and	a0,s5,a0
bc007ec4:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007ec8:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:519

		mmc_wait_response();
bc007ecc:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007ed0:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:521

		RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007ed4:	8e629918 	lw	v0,-26344(s3)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:524

		//writel(0 , SDIO0_CMDARG + mmc_no * SIFLOWER_SDIO_OFFSET);//0x28 1-bit
		mmc_send_cmd(0x2, SD_CMD_APP_SET_BUS_WIDTH, SDIO0_CMD_RESP_CRC);
bc007ed8:	24040002 	li	a0,2
bc007edc:	24050006 	li	a1,6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:521

		mmc_send_cmd(arg, SD_CMD_APP_CMD, 0);

		mmc_wait_response();

		RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007ee0:	00021580 	sll	v0,v0,0x16
bc007ee4:	00511021 	addu	v0,v0,s1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:524

		//writel(0 , SDIO0_CMDARG + mmc_no * SIFLOWER_SDIO_OFFSET);//0x28 1-bit
		mmc_send_cmd(0x2, SD_CMD_APP_SET_BUS_WIDTH, SDIO0_CMD_RESP_CRC);
bc007ee8:	24060100 	li	a2,256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:521

		mmc_send_cmd(arg, SD_CMD_APP_CMD, 0);

		mmc_wait_response();

		RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007eec:	8c420000 	lw	v0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:524

		//writel(0 , SDIO0_CMDARG + mmc_no * SIFLOWER_SDIO_OFFSET);//0x28 1-bit
		mmc_send_cmd(0x2, SD_CMD_APP_SET_BUS_WIDTH, SDIO0_CMD_RESP_CRC);
bc007ef0:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007ef4:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:526

		mmc_wait_response();
bc007ef8:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007efc:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:528

		RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007f00:	8e629918 	lw	v0,-26344(s3)
bc007f04:	00021580 	sll	v0,v0,0x16
bc007f08:	00518821 	addu	s1,v0,s1
bc007f0c:	8e220000 	lw	v0,0(s1)
bc007f10:	0b001fe7 	j	bc007f9c <mmc_initialization+0x3fc>
bc007f14:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:533
	}
	else{
		//writel(0x1 , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET);   //set controller bus width---four data line
		//arg = (0x3 << 24) | (0xB7 << 16) | (0x1 << 8);
		writel((1 << 16) , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET);   //set controller bus width---eight data line
bc007f18:	00641821 	addu	v1,v1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:539
		arg = (0x3 << 24) | (0xB7 << 16) | (0x2 << 8);
		//writel(0x0 , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET);   //set controller bus width---one data line
		//arg = (0x3 << 24) | (0xB7 << 16) | (0x0 << 8);

		//send CMD6 to set the Device bus width
		mmc_send_cmd(arg, MMC_CMD_SWITCH, 0);
bc007f1c:	3c0403b7 	lui	a0,0x3b7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:533
		RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
	}
	else{
		//writel(0x1 , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET);   //set controller bus width---four data line
		//arg = (0x3 << 24) | (0xB7 << 16) | (0x1 << 8);
		writel((1 << 16) , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET);   //set controller bus width---eight data line
bc007f20:	ac760000 	sw	s6,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:539
		arg = (0x3 << 24) | (0xB7 << 16) | (0x2 << 8);
		//writel(0x0 , SDIO0_CTYPE + mmc_no * SIFLOWER_SDIO_OFFSET);   //set controller bus width---one data line
		//arg = (0x3 << 24) | (0xB7 << 16) | (0x0 << 8);

		//send CMD6 to set the Device bus width
		mmc_send_cmd(arg, MMC_CMD_SWITCH, 0);
bc007f24:	24840200 	addiu	a0,a0,512
bc007f28:	24050006 	li	a1,6
bc007f2c:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc007f30:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:541

		mmc_wait_response();
bc007f34:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc007f38:	26520048 	addiu	s2,s2,72
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:542
		/*RES_0 = */readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007f3c:	8e629918 	lw	v0,-26344(s3)
bc007f40:	00021580 	sll	v0,v0,0x16
bc007f44:	00518821 	addu	s1,v0,s1
mmc_wait_busy():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:54
static void mmc_wait_busy(void)
{
	u32 reg;
	u32 count = 0;

	reg = readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007f48:	00521021 	addu	v0,v0,s2
mmc_set_bus_width():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:542

		//send CMD6 to set the Device bus width
		mmc_send_cmd(arg, MMC_CMD_SWITCH, 0);

		mmc_wait_response();
		/*RES_0 = */readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007f4c:	8e230000 	lw	v1,0(s1)
mmc_wait_busy():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:54
static void mmc_wait_busy(void)
{
	u32 reg;
	u32 count = 0;

	reg = readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007f50:	8c530000 	lw	s3,0(v0)
bc007f54:	24114e21 	li	s1,20001
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:55
	while(reg & ((1<<9)|(1<<10))){
bc007f58:	32730600 	andi	s3,s3,0x600
bc007f5c:	1260000f 	beqz	s3,bc007f9c <mmc_initialization+0x3fc>
bc007f60:	8e029918 	lw	v0,-26344(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:58
		reg = readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET);
		count++;
		u_delay(10);
bc007f64:	2404000a 	li	a0,10
bc007f68:	2631ffff 	addiu	s1,s1,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:56
	u32 reg;
	u32 count = 0;

	reg = readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET);
	while(reg & ((1<<9)|(1<<10))){
		reg = readl(SDIO0_STATUS + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007f6c:	00021580 	sll	v0,v0,0x16
bc007f70:	00521021 	addu	v0,v0,s2
bc007f74:	8c530000 	lw	s3,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:58
		count++;
		u_delay(10);
bc007f78:	0f001080 	jal	bc004200 <u_delay_cpu>
bc007f7c:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:59
		if(count > COUNT_MAX1*100){
bc007f80:	1620fff6 	bnez	s1,bc007f5c <mmc_initialization+0x3bc>
bc007f84:	32730600 	andi	s3,s3,0x600
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:60
			printf("mmc%d wait_busy_timeout!!!\n",mmc_no);
bc007f88:	3c02bc01 	lui	v0,0xbc01
bc007f8c:	8c459918 	lw	a1,-26344(v0)
bc007f90:	3c04bc01 	lui	a0,0xbc01
bc007f94:	0f002379 	jal	bc008de4 <printf>
bc007f98:	248495b0 	addiu	a0,a0,-27216
mmc_initialization():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:593

	mmc_select_card(RCA);

	mmc_set_bus_width();

	mmc_clk_set(div_2);
bc007f9c:	0f001dc4 	jal	bc007710 <mmc_clk_set>
bc007fa0:	2404000f 	li	a0,15
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:595

	writel((0x4 << 16)|(0x4 << 0), SDIO0_FIFOTH + mmc_no * SIFLOWER_SDIO_OFFSET);
bc007fa4:	8e039918 	lw	v1,-26344(s0)
bc007fa8:	3c02b780 	lui	v0,0xb780
bc007fac:	2442004c 	addiu	v0,v0,76
bc007fb0:	00032580 	sll	a0,v1,0x16
bc007fb4:	00821021 	addu	v0,a0,v0
bc007fb8:	3c040004 	lui	a0,0x4
bc007fbc:	24840004 	addiu	a0,a0,4
bc007fc0:	ac440000 	sw	a0,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:598

	if(mmc_no == 1)
		return 0x1234;
bc007fc4:	38630001 	xori	v1,v1,0x1
bc007fc8:	24021234 	li	v0,4660
bc007fcc:	24044321 	li	a0,17185
bc007fd0:	0083100b 	movn	v0,a0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:602
	else
		return 0x4321;

}
bc007fd4:	8fbf003c 	lw	ra,60(sp)
bc007fd8:	8fb70038 	lw	s7,56(sp)
bc007fdc:	8fb60034 	lw	s6,52(sp)
bc007fe0:	8fb50030 	lw	s5,48(sp)
bc007fe4:	8fb4002c 	lw	s4,44(sp)
bc007fe8:	8fb30028 	lw	s3,40(sp)
bc007fec:	8fb20024 	lw	s2,36(sp)
bc007ff0:	8fb10020 	lw	s1,32(sp)
bc007ff4:	8fb0001c 	lw	s0,28(sp)
bc007ff8:	03e00008 	jr	ra
bc007ffc:	27bd0040 	addiu	sp,sp,64

bc008000 <mmc_data_read>:
mmc_data_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:721
	u32 blk_count;
	u32 offset = (sd_version_2 == 1)?blk_size:1;
	u8 *remained_data = 0;
	u32 remained_len = 0;

	if(addr%blk_size)
bc008000:	0086001b 	divu	zero,a0,a2
bc008004:	00c001f4 	teq	a2,zero,0x7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:717
}

int mmc_data_read(u32 addr, u8 * buf, u32 blk_size , u32 byte_count)
{
	u32 blk_count;
	u32 offset = (sd_version_2 == 1)?blk_size:1;
bc008008:	3c02bc01 	lui	v0,0xbc01
bc00800c:	8c429910 	lw	v0,-26352(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:715
	else
		return 0;
}

int mmc_data_read(u32 addr, u8 * buf, u32 blk_size , u32 byte_count)
{
bc008010:	27bdffc0 	addiu	sp,sp,-64
bc008014:	afb5002c 	sw	s5,44(sp)
bc008018:	afb40028 	sw	s4,40(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:717
	u32 blk_count;
	u32 offset = (sd_version_2 == 1)?blk_size:1;
bc00801c:	38420001 	xori	v0,v0,0x1
bc008020:	24140001 	li	s4,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:715
	else
		return 0;
}

int mmc_data_read(u32 addr, u8 * buf, u32 blk_size , u32 byte_count)
{
bc008024:	afb60030 	sw	s6,48(sp)
bc008028:	afb30024 	sw	s3,36(sp)
bc00802c:	afb20020 	sw	s2,32(sp)
bc008030:	afb1001c 	sw	s1,28(sp)
bc008034:	afb00018 	sw	s0,24(sp)
bc008038:	afbf003c 	sw	ra,60(sp)
bc00803c:	afbe0038 	sw	s8,56(sp)
bc008040:	afb70034 	sw	s7,52(sp)
bc008044:	00808821 	move	s1,a0
bc008048:	00a09821 	move	s3,a1
bc00804c:	00c08021 	move	s0,a2
bc008050:	00e09021 	move	s2,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:717
	u32 blk_count;
	u32 offset = (sd_version_2 == 1)?blk_size:1;
bc008054:	00c2a00a 	movz	s4,a2,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:721
	u8 *remained_data = 0;
	u32 remained_len = 0;

	if(addr%blk_size)
bc008058:	0000a810 	mfhi	s5
bc00805c:	12a0001a 	beqz	s5,bc0080c8 <mmc_data_read+0xc8>
bc008060:	3c16bc01 	lui	s6,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:723
	{
		remained_data = (u8 *)malloc(blk_size * sizeof(char));
bc008064:	0f002091 	jal	bc008244 <malloc>
bc008068:	00c02021 	move	a0,a2
bc00806c:	0040f021 	move	s8,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:726
		remained_len = (blk_size - addr%blk_size);
		addr -= (addr%blk_size);
		if(mmc_no == 0){
bc008070:	8ec29918 	lw	v0,-26344(s6)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:724
	u32 remained_len = 0;

	if(addr%blk_size)
	{
		remained_data = (u8 *)malloc(blk_size * sizeof(char));
		remained_len = (blk_size - addr%blk_size);
bc008074:	0215b823 	subu	s7,s0,s5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:726
		addr -= (addr%blk_size);
		if(mmc_no == 0){
bc008078:	14400005 	bnez	v0,bc008090 <mmc_data_read+0x90>
bc00807c:	02358823 	subu	s1,s1,s5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:727
			mmc_set_block_length(blk_size);
bc008080:	0f001e43 	jal	bc00790c <mmc_set_block_length>
bc008084:	02002021 	move	a0,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:728
			mmc_set_block_count(1);
bc008088:	0f001e54 	jal	bc007950 <mmc_set_block_count>
bc00808c:	24040001 	li	a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:730
		}
		mmc_block_read(addr/blk_size,remained_data,blk_size,1);
bc008090:	0230001b 	divu	zero,s1,s0
bc008094:	020001f4 	teq	s0,zero,0x7
bc008098:	03c02821 	move	a1,s8
bc00809c:	02003021 	move	a2,s0
bc0080a0:	24070001 	li	a3,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:732
		memcpy((void *)buf, (void *)(remained_data + (blk_size - remained_len)), remained_len);
		byte_count -= remained_len;
bc0080a4:	02579023 	subu	s2,s2,s7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:733
		addr += blk_size;
bc0080a8:	02308821 	addu	s1,s1,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:730
		addr -= (addr%blk_size);
		if(mmc_no == 0){
			mmc_set_block_length(blk_size);
			mmc_set_block_count(1);
		}
		mmc_block_read(addr/blk_size,remained_data,blk_size,1);
bc0080ac:	0f001e65 	jal	bc007994 <mmc_block_read>
bc0080b0:	00002012 	mflo	a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:731
		memcpy((void *)buf, (void *)(remained_data + (blk_size - remained_len)), remained_len);
bc0080b4:	02602021 	move	a0,s3
bc0080b8:	03d52821 	addu	a1,s8,s5
bc0080bc:	02e03021 	move	a2,s7
bc0080c0:	0f00113c 	jal	bc0044f0 <memcpy>
bc0080c4:	02779821 	addu	s3,s3,s7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:737
		byte_count -= remained_len;
		addr += blk_size;
		buf += remained_len;
	}

	blk_count = byte_count/blk_size;
bc0080c8:	0250001b 	divu	zero,s2,s0
bc0080cc:	020001f4 	teq	s0,zero,0x7
bc0080d0:	00001012 	mflo	v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:738
	if(byte_count > (blk_count * blk_size))
bc0080d4:	70501802 	mul	v1,v0,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:739
		blk_count ++;
bc0080d8:	0072902b 	sltu	s2,v1,s2
bc0080dc:	02429021 	addu	s2,s2,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:741

	if(mmc_no == 0){
bc0080e0:	8ec29918 	lw	v0,-26344(s6)
bc0080e4:	14400005 	bnez	v0,bc0080fc <mmc_data_read+0xfc>
bc0080e8:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:742
		mmc_set_block_length(blk_size);
bc0080ec:	0f001e43 	jal	bc00790c <mmc_set_block_length>
bc0080f0:	02002021 	move	a0,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:743
		mmc_set_block_count(blk_count);
bc0080f4:	0f001e54 	jal	bc007950 <mmc_set_block_count>
bc0080f8:	02402021 	move	a0,s2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:746
	}

	if(blk_count > 0){
bc0080fc:	12400025 	beqz	s2,bc008194 <mmc_data_read+0x194>
bc008100:	8fbf003c 	lw	ra,60(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:747
		mmc_block_read(addr/offset,buf,blk_size,blk_count);
bc008104:	0234001b 	divu	zero,s1,s4
bc008108:	028001f4 	teq	s4,zero,0x7
mmc_card_status_check():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:471

	arg |= RCA & 0xffff0000;
	mmc_send_cmd(arg, SD_CMD_SEND_STATUS, SDIO0_CMD_RESP_CRC);

	mmc_wait_response();
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc00810c:	3c11b780 	lui	s1,0xb780
mmc_data_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:747
		mmc_set_block_length(blk_size);
		mmc_set_block_count(blk_count);
	}

	if(blk_count > 0){
		mmc_block_read(addr/offset,buf,blk_size,blk_count);
bc008110:	02602821 	move	a1,s3
bc008114:	02003021 	move	a2,s0
bc008118:	02403821 	move	a3,s2
bc00811c:	241007d1 	li	s0,2001
mmc_card_status_wait():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:483
	u32 RES_0;
	u32 count = 0;

	do
	{
		RES_0 = mmc_card_status_check(mmc_rca);
bc008120:	3c12bc01 	lui	s2,0xbc01
mmc_card_status_check():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:467
static int mmc_card_status_check(u32 RCA)
{
	u32 RES_0;
	u32 arg = 0;

	arg |= RCA & 0xffff0000;
bc008124:	3c13ffff 	lui	s3,0xffff
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:471
	mmc_send_cmd(arg, SD_CMD_SEND_STATUS, SDIO0_CMD_RESP_CRC);

	mmc_wait_response();
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc008128:	26310030 	addiu	s1,s1,48
mmc_data_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:747
		mmc_set_block_length(blk_size);
		mmc_set_block_count(blk_count);
	}

	if(blk_count > 0){
		mmc_block_read(addr/offset,buf,blk_size,blk_count);
bc00812c:	0f001e65 	jal	bc007994 <mmc_block_read>
bc008130:	00002012 	mflo	a0
mmc_card_status_check():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:468
{
	u32 RES_0;
	u32 arg = 0;

	arg |= RCA & 0xffff0000;
	mmc_send_cmd(arg, SD_CMD_SEND_STATUS, SDIO0_CMD_RESP_CRC);
bc008134:	8e44991c 	lw	a0,-26340(s2)
bc008138:	2405000d 	li	a1,13
bc00813c:	24060100 	li	a2,256
bc008140:	0f001d8a 	jal	bc007628 <mmc_send_cmd>
bc008144:	02642024 	and	a0,s3,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:470

	mmc_wait_response();
bc008148:	0f001e19 	jal	bc007864 <mmc_wait_response>
bc00814c:	2610ffff 	addiu	s0,s0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:471
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc008150:	8ec29918 	lw	v0,-26344(s6)
mmc_card_status_wait():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:485

	do
	{
		RES_0 = mmc_card_status_check(mmc_rca);
		count++;
		u_delay(10);
bc008154:	2404000a 	li	a0,10
mmc_card_status_check():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:471

	arg |= RCA & 0xffff0000;
	mmc_send_cmd(arg, SD_CMD_SEND_STATUS, SDIO0_CMD_RESP_CRC);

	mmc_wait_response();
	RES_0 = readl(SDIO0_RESP0 + mmc_no * SIFLOWER_SDIO_OFFSET);
bc008158:	00021580 	sll	v0,v0,0x16
bc00815c:	00511021 	addu	v0,v0,s1
bc008160:	8c540000 	lw	s4,0(v0)
mmc_card_status_wait():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:485

	do
	{
		RES_0 = mmc_card_status_check(mmc_rca);
		count++;
		u_delay(10);
bc008164:	0f001080 	jal	bc004200 <u_delay_cpu>
bc008168:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:486
		if(count > COUNT_MAX1*10){
bc00816c:	16000006 	bnez	s0,bc008188 <mmc_data_read+0x188>
bc008170:	32940100 	andi	s4,s4,0x100
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:487
			printf("card status wait timeout!\n");
bc008174:	3c04bc01 	lui	a0,0xbc01
bc008178:	0f00239b 	jal	bc008e6c <puts>
bc00817c:	24849608 	addiu	a0,a0,-27128
mmc_data_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:752
		mmc_block_read(addr/offset,buf,blk_size,blk_count);
		mmc_card_status_wait(0x100, 0x100);
	}

	return 0;
}
bc008180:	0b002065 	j	bc008194 <mmc_data_read+0x194>
bc008184:	8fbf003c 	lw	ra,60(sp)
mmc_card_status_wait():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:490
		u_delay(10);
		if(count > COUNT_MAX1*10){
			printf("card status wait timeout!\n");
			break;
		}
	}while((RES_0 & masked) != experted);
bc008188:	1280ffeb 	beqz	s4,bc008138 <mmc_data_read+0x138>
bc00818c:	8e44991c 	lw	a0,-26340(s2)
mmc_data_read():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/mmc/mmc.c:752
		mmc_block_read(addr/offset,buf,blk_size,blk_count);
		mmc_card_status_wait(0x100, 0x100);
	}

	return 0;
}
bc008190:	8fbf003c 	lw	ra,60(sp)
bc008194:	8fbe0038 	lw	s8,56(sp)
bc008198:	8fb70034 	lw	s7,52(sp)
bc00819c:	8fb60030 	lw	s6,48(sp)
bc0081a0:	8fb5002c 	lw	s5,44(sp)
bc0081a4:	8fb40028 	lw	s4,40(sp)
bc0081a8:	8fb30024 	lw	s3,36(sp)
bc0081ac:	8fb20020 	lw	s2,32(sp)
bc0081b0:	8fb1001c 	lw	s1,28(sp)
bc0081b4:	8fb00018 	lw	s0,24(sp)
bc0081b8:	00001021 	move	v0,zero
bc0081bc:	03e00008 	jr	ra
bc0081c0:	27bd0040 	addiu	sp,sp,64

bc0081c4 <prvInsertBlockIntoFreeList>:
prvInsertBlockIntoFreeList():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:420
BlockLink_t *pxIterator;
u8 *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
bc0081c4:	3c02bc01 	lui	v0,0xbc01
bc0081c8:	24429930 	addiu	v0,v0,-26320
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:420 (discriminator 1)
bc0081cc:	8c430000 	lw	v1,0(v0)
bc0081d0:	0064282b 	sltu	a1,v1,a0
bc0081d4:	50a00003 	beqzl	a1,bc0081e4 <prvInsertBlockIntoFreeList+0x20>
bc0081d8:	8c450004 	lw	a1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:420
bc0081dc:	0b002073 	j	bc0081cc <prvInsertBlockIntoFreeList+0x8>
bc0081e0:	00601021 	move	v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:428
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( u8 * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( u8 * ) pxBlockToInsert )
bc0081e4:	00453021 	addu	a2,v0,a1
bc0081e8:	54c40006 	bnel	a2,a0,bc008204 <prvInsertBlockIntoFreeList+0x40>
bc0081ec:	8c850004 	lw	a1,4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:430
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
bc0081f0:	8c840004 	lw	a0,4(a0)
bc0081f4:	00852821 	addu	a1,a0,a1
bc0081f8:	ac450004 	sw	a1,4(v0)
bc0081fc:	00402021 	move	a0,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:441
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( u8 * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( u8 * ) pxIterator->pxNextFreeBlock )
bc008200:	8c850004 	lw	a1,4(a0)
bc008204:	00853021 	addu	a2,a0,a1
bc008208:	14c30009 	bne	a2,v1,bc008230 <prvInsertBlockIntoFreeList+0x6c>
bc00820c:	3c06bc01 	lui	a2,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:443
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
bc008210:	8cc6992c 	lw	a2,-26324(a2)
bc008214:	10660006 	beq	v1,a2,bc008230 <prvInsertBlockIntoFreeList+0x6c>
bc008218:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:446
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
bc00821c:	8c630004 	lw	v1,4(v1)
bc008220:	00652821 	addu	a1,v1,a1
bc008224:	ac850004 	sw	a1,4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:447
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
bc008228:	8c430000 	lw	v1,0(v0)
bc00822c:	8c630000 	lw	v1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:463

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
bc008230:	10440002 	beq	v0,a0,bc00823c <prvInsertBlockIntoFreeList+0x78>
bc008234:	ac830000 	sw	v1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:465
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
bc008238:	ac440000 	sw	a0,0(v0)
bc00823c:	03e00008 	jr	ra
bc008240:	00000000 	nop

bc008244 <malloc>:
malloc():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:158

	//vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
bc008244:	3c06bc01 	lui	a2,0xbc01
bc008248:	8cc2992c 	lw	v0,-26324(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:150
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *malloc( size_t xWantedSize )
{
bc00824c:	27bdffd0 	addiu	sp,sp,-48
bc008250:	3c07bc01 	lui	a3,0xbc01
bc008254:	afbf002c 	sw	ra,44(sp)
bc008258:	afb40028 	sw	s4,40(sp)
bc00825c:	afb30024 	sw	s3,36(sp)
bc008260:	afb20020 	sw	s2,32(sp)
bc008264:	afb1001c 	sw	s1,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:158

	//vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
bc008268:	1440001f 	bnez	v0,bc0082e8 <malloc+0xa4>
bc00826c:	afb00018 	sw	s0,24(sp)
prvHeapInit():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:373
u8 *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
bc008270:	3c02bc01 	lui	v0,0xbc01
bc008274:	24429a40 	addiu	v0,v0,-26048
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:375

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
bc008278:	30430007 	andi	v1,v0,0x7
bc00827c:	10600006 	beqz	v1,bc008298 <malloc+0x54>
bc008280:	34058000 	li	a1,0x8000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:377
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
bc008284:	24450007 	addiu	a1,v0,7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:378
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
bc008288:	2402fff8 	li	v0,-8
bc00828c:	00a21024 	and	v0,a1,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:379
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
bc008290:	24a57ff9 	addiu	a1,a1,32761
bc008294:	00a22823 	subu	a1,a1,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:386

	pucAlignedHeap = ( u8 * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
bc008298:	3c03bc01 	lui	v1,0xbc01
bc00829c:	ac629930 	sw	v0,-26320(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:391
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
bc0082a0:	00452821 	addu	a1,v0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:387
	pucAlignedHeap = ( u8 * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
bc0082a4:	24639930 	addiu	v1,v1,-26320
bc0082a8:	ac600004 	sw	zero,4(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:392

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
bc0082ac:	24a5fff8 	addiu	a1,a1,-8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:393
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
bc0082b0:	2403fff8 	li	v1,-8
bc0082b4:	00a32824 	and	a1,a1,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:401
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
bc0082b8:	00a21823 	subu	v1,a1,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:395
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
bc0082bc:	aca00004 	sw	zero,4(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:396
	pxEnd->pxNextFreeBlock = NULL;
bc0082c0:	aca00000 	sw	zero,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:401

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
bc0082c4:	ac430004 	sw	v1,4(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:402
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
bc0082c8:	ac450000 	sw	a1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:405

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
bc0082cc:	3c02bc01 	lui	v0,0xbc01
bc0082d0:	ac439924 	sw	v1,-26332(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:406
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
bc0082d4:	3c02bc01 	lui	v0,0xbc01
bc0082d8:	ac439928 	sw	v1,-26328(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:409

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
bc0082dc:	3c028000 	lui	v0,0x8000
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:394
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
bc0082e0:	acc5992c 	sw	a1,-26324(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:409
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
bc0082e4:	ace29920 	sw	v0,-26336(a3)
malloc():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:171

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
bc0082e8:	8cf29920 	lw	s2,-26336(a3)
bc0082ec:	00921024 	and	v0,a0,s2
bc0082f0:	14400038 	bnez	v0,bc0083d4 <malloc+0x190>
bc0082f4:	00008821 	move	s1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:175
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
bc0082f8:	10800037 	beqz	a0,bc0083d8 <malloc+0x194>
bc0082fc:	8fbf002c 	lw	ra,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:177
			{
				xWantedSize += xHeapStructSize;
bc008300:	24830008 	addiu	v1,a0,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:181

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
bc008304:	30620007 	andi	v0,v1,0x7
bc008308:	10400003 	beqz	v0,bc008318 <malloc+0xd4>
bc00830c:	2402fff8 	li	v0,-8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:184
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
bc008310:	00621824 	and	v1,v1,v0
bc008314:	24630008 	addiu	v1,v1,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:197
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
bc008318:	1060002e 	beqz	v1,bc0083d4 <malloc+0x190>
bc00831c:	00008821 	move	s1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:197 (discriminator 1)
bc008320:	3c02bc01 	lui	v0,0xbc01
bc008324:	8c539928 	lw	s3,-26328(v0)
bc008328:	0263202b 	sltu	a0,s3,v1
bc00832c:	14800029 	bnez	a0,bc0083d4 <malloc+0x190>
bc008330:	0040a021 	move	s4,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:202
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
bc008334:	3c04bc01 	lui	a0,0xbc01
bc008338:	8c909930 	lw	s0,-26320(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:201

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
bc00833c:	24849930 	addiu	a0,a0,-26320
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:203 (discriminator 1)
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
bc008340:	8e020004 	lw	v0,4(s0)
bc008344:	0043102b 	sltu	v0,v0,v1
bc008348:	54400006 	bnezl	v0,bc008364 <malloc+0x120>
bc00834c:	8e020000 	lw	v0,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:211
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
bc008350:	8cc2992c 	lw	v0,-26324(a2)
bc008354:	16020008 	bne	s0,v0,bc008378 <malloc+0x134>
bc008358:	00008821 	move	s1,zero
bc00835c:	0b0020f6 	j	bc0083d8 <malloc+0x194>
bc008360:	8fbf002c 	lw	ra,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:203 (discriminator 2)
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
bc008364:	5040fffb 	beqzl	v0,bc008354 <malloc+0x110>
bc008368:	8cc2992c 	lw	v0,-26324(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:203
bc00836c:	02002021 	move	a0,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:206
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
bc008370:	0b0020d0 	j	bc008340 <malloc+0xfc>
bc008374:	00408021 	move	s0,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:219
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( u8 * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
bc008378:	8e020000 	lw	v0,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:215
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( u8 * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
bc00837c:	8c910000 	lw	s1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:219

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
bc008380:	ac820000 	sw	v0,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:223

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
bc008384:	8e020004 	lw	v0,4(s0)
bc008388:	00431023 	subu	v0,v0,v1
bc00838c:	2c440011 	sltiu	a0,v0,17
bc008390:	14800005 	bnez	a0,bc0083a8 <malloc+0x164>
bc008394:	26310008 	addiu	s1,s1,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:229
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( u8 * ) pxBlock ) + xWantedSize );
bc008398:	02032021 	addu	a0,s0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:234
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
bc00839c:	ac820004 	sw	v0,4(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:238
						pxBlock->xBlockSize = xWantedSize;

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
bc0083a0:	0f002071 	jal	bc0081c4 <prvInsertBlockIntoFreeList>
bc0083a4:	ae030004 	sw	v1,4(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:245
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
bc0083a8:	8e030004 	lw	v1,4(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:247

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
bc0083ac:	3c04bc01 	lui	a0,0xbc01
bc0083b0:	8c859924 	lw	a1,-26332(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:245
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
bc0083b4:	02631023 	subu	v0,s3,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:247

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
bc0083b8:	0045282b 	sltu	a1,v0,a1
bc0083bc:	10a00002 	beqz	a1,bc0083c8 <malloc+0x184>
bc0083c0:	ae829928 	sw	v0,-26328(s4)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:249
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
bc0083c4:	ac829924 	sw	v0,-26332(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:258 (discriminator 2)
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
bc0083c8:	00729025 	or	s2,v1,s2
bc0083cc:	ae120004 	sw	s2,4(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:259 (discriminator 2)
					pxBlock->pxNextFreeBlock = NULL;
bc0083d0:	ae000000 	sw	zero,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/heap.c:296
	}
	#endif

	configASSERT( ( ( ( u32 ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
bc0083d4:	8fbf002c 	lw	ra,44(sp)
bc0083d8:	02201021 	move	v0,s1
bc0083dc:	8fb40028 	lw	s4,40(sp)
bc0083e0:	8fb30024 	lw	s3,36(sp)
bc0083e4:	8fb20020 	lw	s2,32(sp)
bc0083e8:	8fb1001c 	lw	s1,28(sp)
bc0083ec:	8fb00018 	lw	s0,24(sp)
bc0083f0:	03e00008 	jr	ra
bc0083f4:	27bd0030 	addiu	sp,sp,48

bc0083f8 <number>:
number():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:24
	int i = 0;
	while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
	return i;
}
static char *number(char *str, long num, int base, int size, int precision, int type)
{
bc0083f8:	27bdffb0 	addiu	sp,sp,-80
bc0083fc:	8fa20064 	lw	v0,100(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:28
	char c, sign, tmp[66];
	char *dig = digits;
	int i;
	if (type & LARGE)  dig = upper_digits;
bc008400:	30430040 	andi	v1,v0,0x40
bc008404:	14600004 	bnez	v1,bc008418 <number+0x20>
bc008408:	8faa0060 	lw	t2,96(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:26
	return i;
}
static char *number(char *str, long num, int base, int size, int precision, int type)
{
	char c, sign, tmp[66];
	char *dig = digits;
bc00840c:	3c0cbc01 	lui	t4,0xbc01
bc008410:	0b002108 	j	bc008420 <number+0x28>
bc008414:	258c9624 	addiu	t4,t4,-27100
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:28
	int i;
	if (type & LARGE)  dig = upper_digits;
bc008418:	3c0cbc01 	lui	t4,0xbc01
bc00841c:	258c964c 	addiu	t4,t4,-27060
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:29
	if (type & LEFT) type &= ~ZEROPAD;
bc008420:	30430010 	andi	v1,v0,0x10
bc008424:	10600004 	beqz	v1,bc008438 <number+0x40>
bc008428:	24c3fffe 	addiu	v1,a2,-2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:29 (discriminator 1)
bc00842c:	2403fffe 	li	v1,-2
bc008430:	00431024 	and	v0,v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:30
	if (base < 2 || base > 36) return 0;
bc008434:	24c3fffe 	addiu	v1,a2,-2
bc008438:	2c630023 	sltiu	v1,v1,35
bc00843c:	10600088 	beqz	v1,bc008660 <number+0x268>
bc008440:	30480001 	andi	t0,v0,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:32

	c = (type & ZEROPAD) ? '0' : ' ';
bc008444:	24030020 	li	v1,32
bc008448:	24090030 	li	t1,48
bc00844c:	0068480a 	movz	t1,v1,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:34
	sign = 0;
	if (type & SIGN)
bc008450:	30430002 	andi	v1,v0,0x2
bc008454:	10600010 	beqz	v1,bc008498 <number+0xa0>
bc008458:	00004021 	move	t0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:36
	{
		if (num < 0)
bc00845c:	04a10005 	bgez	a1,bc008474 <number+0x7c>
bc008460:	30430004 	andi	v1,v0,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:39
		{
			sign = '-';
			num = -num;
bc008464:	00052823 	negu	a1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:40
			size--;
bc008468:	24e7ffff 	addiu	a3,a3,-1
bc00846c:	0b002126 	j	bc008498 <number+0xa0>
bc008470:	2408002d 	li	t0,45
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:42
		}
		else if (type & PLUS)
bc008474:	10600004 	beqz	v1,bc008488 <number+0x90>
bc008478:	30430008 	andi	v1,v0,0x8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:45
		{
			sign = '+';
			size--;
bc00847c:	24e7ffff 	addiu	a3,a3,-1
bc008480:	0b002126 	j	bc008498 <number+0xa0>
bc008484:	2408002b 	li	t0,43
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:47
		}
		else if (type & SPACE)
bc008488:	10600004 	beqz	v1,bc00849c <number+0xa4>
bc00848c:	304b0020 	andi	t3,v0,0x20
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:50
		{
			sign = ' ';
			size--;
bc008490:	24e7ffff 	addiu	a3,a3,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:49
			sign = '+';
			size--;
		}
		else if (type & SPACE)
		{
			sign = ' ';
bc008494:	24080020 	li	t0,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:53
			size--;
		}
	}
	if (type & SPECIAL)
bc008498:	304b0020 	andi	t3,v0,0x20
bc00849c:	11600007 	beqz	t3,bc0084bc <number+0xc4>
bc0084a0:	24030010 	li	v1,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:55
	{
		if (base == 16)
bc0084a4:	14c30003 	bne	a2,v1,bc0084b4 <number+0xbc>
bc0084a8:	38c30008 	xori	v1,a2,0x8
bc0084ac:	0b00212f 	j	bc0084bc <number+0xc4>
bc0084b0:	24e7fffe 	addiu	a3,a3,-2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:58
			size -= 2;
		else if (base == 8)
			size--;
bc0084b4:	2c630001 	sltiu	v1,v1,1
bc0084b8:	00e33823 	subu	a3,a3,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:61
	}
	i = 0;
	if (num == 0)
bc0084bc:	54a00005 	bnezl	a1,bc0084d4 <number+0xdc>
bc0084c0:	00001821 	move	v1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:62
		tmp[i++] = '0';
bc0084c4:	24030030 	li	v1,48
bc0084c8:	a3a30008 	sb	v1,8(sp)
bc0084cc:	0b002140 	j	bc008500 <number+0x108>
bc0084d0:	24030001 	li	v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:67
	else
	{
		while (num != 0)
		{
			tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
bc0084d4:	00a6001b 	divu	zero,a1,a2
bc0084d8:	00c001f4 	teq	a2,zero,0x7
bc0084dc:	27ae0008 	addiu	t6,sp,8
bc0084e0:	24630001 	addiu	v1,v1,1
bc0084e4:	01c36821 	addu	t5,t6,v1
bc0084e8:	00007010 	mfhi	t6
bc0084ec:	018e7021 	addu	t6,t4,t6
bc0084f0:	91ce0000 	lbu	t6,0(t6)
bc0084f4:	00002812 	mflo	a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:65
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
	{
		while (num != 0)
bc0084f8:	14a0fff6 	bnez	a1,bc0084d4 <number+0xdc>
bc0084fc:	a1aeffff 	sb	t6,-1(t5)
bc008500:	006a282a 	slt	a1,v1,t2
bc008504:	0065500a 	movz	t2,v1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:73
			num = ((unsigned long) num) / (unsigned) base;
		}
	}
	if (i > precision) precision = i;
	size -= precision;
	if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
bc008508:	30450011 	andi	a1,v0,0x11
bc00850c:	14a0000f 	bnez	a1,bc00854c <number+0x154>
bc008510:	00ea3823 	subu	a3,a3,t2
bc008514:	00802821 	move	a1,a0
bc008518:	00876821 	addu	t5,a0,a3
bc00851c:	240e0020 	li	t6,32
bc008520:	01a56023 	subu	t4,t5,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:73 (discriminator 1)
bc008524:	19800003 	blez	t4,bc008534 <number+0x13c>
bc008528:	24a50001 	addiu	a1,a1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:73 (discriminator 2)
bc00852c:	0b002148 	j	bc008520 <number+0x128>
bc008530:	a0aeffff 	sb	t6,-1(a1)
bc008534:	28e50000 	slti	a1,a3,0
bc008538:	00006021 	move	t4,zero
bc00853c:	00e5600a 	movz	t4,a3,a1
bc008540:	24e7ffff 	addiu	a3,a3,-1
bc008544:	008c2021 	addu	a0,a0,t4
bc008548:	00ec3823 	subu	a3,a3,t4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:74
	if (sign) *str++ = sign;
bc00854c:	11000003 	beqz	t0,bc00855c <number+0x164>
bc008550:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:74 (discriminator 1)
bc008554:	a0880000 	sb	t0,0(a0)
bc008558:	24840001 	addiu	a0,a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:76

	if (type & SPECIAL)
bc00855c:	51600010 	beqzl	t3,bc0085a0 <number+0x1a8>
bc008560:	30420010 	andi	v0,v0,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:78
	{
		if (base == 8)
bc008564:	24050008 	li	a1,8
bc008568:	14c50005 	bne	a2,a1,bc008580 <number+0x188>
bc00856c:	24050010 	li	a1,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:79
			*str++ = '0';
bc008570:	24050030 	li	a1,48
bc008574:	a0850000 	sb	a1,0(a0)
bc008578:	0b002167 	j	bc00859c <number+0x1a4>
bc00857c:	24840001 	addiu	a0,a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:80
		else if (base == 16)
bc008580:	54c50007 	bnel	a2,a1,bc0085a0 <number+0x1a8>
bc008584:	30420010 	andi	v0,v0,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:82
		{
			*str++ = '0';
bc008588:	24050030 	li	a1,48
bc00858c:	a0850000 	sb	a1,0(a0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:83
			*str++ = digits[33];
bc008590:	24050078 	li	a1,120
bc008594:	a0850001 	sb	a1,1(a0)
bc008598:	24840002 	addiu	a0,a0,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:86
		}
	}
	if (!(type & LEFT)) while (size-- > 0) *str++ = c;
bc00859c:	30420010 	andi	v0,v0,0x10
bc0085a0:	5440000f 	bnezl	v0,bc0085e0 <number+0x1e8>
bc0085a4:	008a5021 	addu	t2,a0,t2
bc0085a8:	00801021 	move	v0,a0
bc0085ac:	00873021 	addu	a2,a0,a3
bc0085b0:	00c22823 	subu	a1,a2,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:86 (discriminator 1)
bc0085b4:	18a00003 	blez	a1,bc0085c4 <number+0x1cc>
bc0085b8:	24420001 	addiu	v0,v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:86 (discriminator 2)
bc0085bc:	0b00216c 	j	bc0085b0 <number+0x1b8>
bc0085c0:	a049ffff 	sb	t1,-1(v0)
bc0085c4:	28e20000 	slti	v0,a3,0
bc0085c8:	00007021 	move	t6,zero
bc0085cc:	00e2700a 	movz	t6,a3,v0
bc0085d0:	24e7ffff 	addiu	a3,a3,-1
bc0085d4:	008e2021 	addu	a0,a0,t6
bc0085d8:	00ee3823 	subu	a3,a3,t6
bc0085dc:	008a5021 	addu	t2,a0,t2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:87 (discriminator 1)
	while (i < precision--) *str++ = '0';
bc0085e0:	24050030 	li	a1,48
bc0085e4:	01441023 	subu	v0,t2,a0
bc0085e8:	0062102a 	slt	v0,v1,v0
bc0085ec:	50400004 	beqzl	v0,bc008600 <number+0x208>
bc0085f0:	00802821 	move	a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:87 (discriminator 2)
bc0085f4:	24840001 	addiu	a0,a0,1
bc0085f8:	0b002179 	j	bc0085e4 <number+0x1ec>
bc0085fc:	a085ffff 	sb	a1,-1(a0)
bc008600:	00601021 	move	v0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:88 (discriminator 1)
	while (i-- > 0) *str++ = tmp[i];
bc008604:	18400007 	blez	v0,bc008624 <number+0x22c>
bc008608:	27a80008 	addiu	t0,sp,8
bc00860c:	01023021 	addu	a2,t0,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:88 (discriminator 2)
bc008610:	90c6ffff 	lbu	a2,-1(a2)
bc008614:	24840001 	addiu	a0,a0,1
bc008618:	2442ffff 	addiu	v0,v0,-1
bc00861c:	0b002181 	j	bc008604 <number+0x20c>
bc008620:	a086ffff 	sb	a2,-1(a0)
bc008624:	28620000 	slti	v0,v1,0
bc008628:	0002180b 	movn	v1,zero,v0
bc00862c:	00a31821 	addu	v1,a1,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:88
bc008630:	00602021 	move	a0,v1
bc008634:	00672821 	addu	a1,v1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:89
	while (size-- > 0) *str++ = ' ';
bc008638:	24060020 	li	a2,32
bc00863c:	00a41023 	subu	v0,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:89 (discriminator 1)
bc008640:	18400003 	blez	v0,bc008650 <number+0x258>
bc008644:	24840001 	addiu	a0,a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:89 (discriminator 2)
bc008648:	0b00218f 	j	bc00863c <number+0x244>
bc00864c:	a086ffff 	sb	a2,-1(a0)
bc008650:	28e20000 	slti	v0,a3,0
bc008654:	0002380b 	movn	a3,zero,v0
bc008658:	0b002199 	j	bc008664 <number+0x26c>
bc00865c:	00671021 	addu	v0,v1,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:30
	char c, sign, tmp[66];
	char *dig = digits;
	int i;
	if (type & LARGE)  dig = upper_digits;
	if (type & LEFT) type &= ~ZEROPAD;
	if (base < 2 || base > 36) return 0;
bc008660:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:91
	if (!(type & LEFT)) while (size-- > 0) *str++ = c;
	while (i < precision--) *str++ = '0';
	while (i-- > 0) *str++ = tmp[i];
	while (size-- > 0) *str++ = ' ';
	return str;
}
bc008664:	03e00008 	jr	ra
bc008668:	27bd0050 	addiu	sp,sp,80

bc00866c <vsprintf>:
vsprintf():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:336
}
#endif


int vsprintf(char *buf, const char *fmt, va_list args)
{
bc00866c:	27bdffa0 	addiu	sp,sp,-96
bc008670:	afb4004c 	sw	s4,76(sp)
bc008674:	3c14bc01 	lui	s4,0xbc01
bc008678:	afb60054 	sw	s6,84(sp)
bc00867c:	afb50050 	sw	s5,80(sp)
bc008680:	afb30048 	sw	s3,72(sp)
bc008684:	afb20044 	sw	s2,68(sp)
bc008688:	afb10040 	sw	s1,64(sp)
bc00868c:	afb0003c 	sw	s0,60(sp)
bc008690:	afbf005c 	sw	ra,92(sp)
bc008694:	afb70058 	sw	s7,88(sp)
bc008698:	0080b021 	move	s6,a0
bc00869c:	00a08821 	move	s1,a1
bc0086a0:	00c08021 	move	s0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:347
	int flags;            // Flags to number()
	int field_width;      // Width of output field
	int precision;        // Min. # of digits for integers; max number of chars for from string
	int qualifier;        // 'h', 'l', or 'L' for integer fields
	int str_len = 0;
	for (str = buf; *fmt; fmt++)
bc0086a4:	00801021 	move	v0,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:346
	char *s;
	int flags;            // Flags to number()
	int field_width;      // Width of output field
	int precision;        // Min. # of digits for integers; max number of chars for from string
	int qualifier;        // 'h', 'l', or 'L' for integer fields
	int str_len = 0;
bc0086a8:	0000a821 	move	s5,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:420
				while (--field_width > 0) *str++ = ' ';
				continue;

			case 's':
				s = va_arg(args, char *);
				if (!s) s = "<NULL>";
bc0086ac:	3c12bc01 	lui	s2,0xbc01
bc0086b0:	26949624 	addiu	s4,s4,-27100
eaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:97
static char *eaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
	char tmp[24];
	char *dig = digits;
	int i, len;
	if (type & LARGE)  dig = upper_digits;
bc0086b4:	3c13bc01 	lui	s3,0xbc01
vsprintf():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:347 (discriminator 1)
	int flags;            // Flags to number()
	int field_width;      // Width of output field
	int precision;        // Min. # of digits for integers; max number of chars for from string
	int qualifier;        // 'h', 'l', or 'L' for integer fields
	int str_len = 0;
	for (str = buf; *fmt; fmt++)
bc0086b8:	82230000 	lb	v1,0(s1)
bc0086bc:	106001bc 	beqz	v1,bc008db0 <vsprintf+0x744>
bc0086c0:	24040025 	li	a0,37
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:349
	{
		if (*fmt != '%')
bc0086c4:	54640008 	bnel	v1,a0,bc0086e8 <vsprintf+0x7c>
bc0086c8:	26b50001 	addiu	s5,s5,1
bc0086cc:	00001821 	move	v1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:364

		// Process flags
		flags = 0;
repeat:
		fmt++; // This also skips first '%'
		switch (*fmt)
bc0086d0:	2404002b 	li	a0,43
bc0086d4:	2407002d 	li	a3,45
bc0086d8:	24080030 	li	t0,48
bc0086dc:	24090020 	li	t1,32
bc0086e0:	0b0021c7 	j	bc00871c <vsprintf+0xb0>
bc0086e4:	240a0023 	li	t2,35
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:351
	int str_len = 0;
	for (str = buf; *fmt; fmt++)
	{
		if (*fmt != '%')
		{
			*str++ = *fmt;
bc0086e8:	a0430000 	sb	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:354
			str_len++;

			if(str_len < LOG_BUF_LEN_MAX )
bc0086ec:	2aa30100 	slti	v1,s5,256
bc0086f0:	546001ad 	bnezl	v1,bc008da8 <vsprintf+0x73c>
bc0086f4:	24420001 	addiu	v0,v0,1
bc0086f8:	0b00236e 	j	bc008db8 <vsprintf+0x74c>
bc0086fc:	02a01021 	move	v0,s5
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:364

		// Process flags
		flags = 0;
repeat:
		fmt++; // This also skips first '%'
		switch (*fmt)
bc008700:	28cb002c 	slti	t3,a2,44
bc008704:	1560000a 	bnez	t3,bc008730 <vsprintf+0xc4>
bc008708:	00000000 	nop
bc00870c:	14c7000e 	bne	a2,a3,bc008748 <vsprintf+0xdc>
bc008710:	00000000 	nop
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:366
		{
			case '-': flags |= LEFT; goto repeat;
bc008714:	34630010 	ori	v1,v1,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:363
		}

		// Process flags
		flags = 0;
repeat:
		fmt++; // This also skips first '%'
bc008718:	00a08821 	move	s1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:364
		switch (*fmt)
bc00871c:	82260001 	lb	a2,1(s1)
bc008720:	14c4fff7 	bne	a2,a0,bc008700 <vsprintf+0x94>
bc008724:	26250001 	addiu	a1,s1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:367
		{
			case '-': flags |= LEFT; goto repeat;
			case '+': flags |= PLUS; goto repeat;
bc008728:	0b0021d6 	j	bc008758 <vsprintf+0xec>
bc00872c:	34630004 	ori	v1,v1,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:364

		// Process flags
		flags = 0;
repeat:
		fmt++; // This also skips first '%'
		switch (*fmt)
bc008730:	50c9fff9 	beql	a2,t1,bc008718 <vsprintf+0xac>
bc008734:	34630008 	ori	v1,v1,0x8
bc008738:	54ca0009 	bnel	a2,t2,bc008760 <vsprintf+0xf4>
bc00873c:	24c4ffd0 	addiu	a0,a2,-48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:369
		{
			case '-': flags |= LEFT; goto repeat;
			case '+': flags |= PLUS; goto repeat;
			case ' ': flags |= SPACE; goto repeat;
			case '#': flags |= SPECIAL; goto repeat;
bc008740:	0b0021c6 	j	bc008718 <vsprintf+0xac>
bc008744:	34630020 	ori	v1,v1,0x20
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:364

		// Process flags
		flags = 0;
repeat:
		fmt++; // This also skips first '%'
		switch (*fmt)
bc008748:	54c80005 	bnel	a2,t0,bc008760 <vsprintf+0xf4>
bc00874c:	24c4ffd0 	addiu	a0,a2,-48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:370
		{
			case '-': flags |= LEFT; goto repeat;
			case '+': flags |= PLUS; goto repeat;
			case ' ': flags |= SPACE; goto repeat;
			case '#': flags |= SPECIAL; goto repeat;
			case '0': flags |= ZEROPAD; goto repeat;
bc008750:	0b0021c6 	j	bc008718 <vsprintf+0xac>
bc008754:	34630001 	ori	v1,v1,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:367
repeat:
		fmt++; // This also skips first '%'
		switch (*fmt)
		{
			case '-': flags |= LEFT; goto repeat;
			case '+': flags |= PLUS; goto repeat;
bc008758:	0b0021c7 	j	bc00871c <vsprintf+0xb0>
bc00875c:	00a08821 	move	s1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:375
			case '0': flags |= ZEROPAD; goto repeat;
		}

		// Get field width
		field_width = -1;
		if (is_digit(*fmt))
bc008760:	308400ff 	andi	a0,a0,0xff
bc008764:	2c84000a 	sltiu	a0,a0,10
bc008768:	1080000d 	beqz	a0,bc0087a0 <vsprintf+0x134>
bc00876c:	2404002a 	li	a0,42
bc008770:	00003821 	move	a3,zero
skip_atoi():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:20
	return sc - s;
}
static int skip_atoi(const char **s)
{
	int i = 0;
	while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
bc008774:	2408000a 	li	t0,10
bc008778:	80a40000 	lb	a0,0(a1)
bc00877c:	2486ffd0 	addiu	a2,a0,-48
bc008780:	30c600ff 	andi	a2,a2,0xff
bc008784:	2cc6000a 	sltiu	a2,a2,10
bc008788:	10c0000d 	beqz	a2,bc0087c0 <vsprintf+0x154>
bc00878c:	70e83002 	mul	a2,a3,t0
bc008790:	24a50001 	addiu	a1,a1,1
bc008794:	00c43821 	addu	a3,a2,a0
vsprintf():
bc008798:	0b0021de 	j	bc008778 <vsprintf+0x10c>
bc00879c:	24e7ffd0 	addiu	a3,a3,-48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:377

		// Get field width
		field_width = -1;
		if (is_digit(*fmt))
			field_width = skip_atoi(&fmt);
		else if (*fmt == '*')
bc0087a0:	14c40007 	bne	a2,a0,bc0087c0 <vsprintf+0x154>
bc0087a4:	2407ffff 	li	a3,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:380
		{
			fmt++;
			field_width = va_arg(args, int);
bc0087a8:	8e070000 	lw	a3,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:379
		field_width = -1;
		if (is_digit(*fmt))
			field_width = skip_atoi(&fmt);
		else if (*fmt == '*')
		{
			fmt++;
bc0087ac:	26250002 	addiu	a1,s1,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:381
			field_width = va_arg(args, int);
			if (field_width < 0)
bc0087b0:	04e10003 	bgez	a3,bc0087c0 <vsprintf+0x154>
bc0087b4:	26100004 	addiu	s0,s0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:383
			{
				field_width = -field_width;
bc0087b8:	00073823 	negu	a3,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:384
				flags |= LEFT;
bc0087bc:	34630010 	ori	v1,v1,0x10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:389
			}
		}
		// Get the precision
		precision = -1;
		if (*fmt == '.')
bc0087c0:	80a60000 	lb	a2,0(a1)
bc0087c4:	2404002e 	li	a0,46
bc0087c8:	54c4001c 	bnel	a2,a0,bc00883c <vsprintf+0x1d0>
bc0087cc:	00a08821 	move	s1,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:392
		{
			++fmt;
			if (is_digit(*fmt))
bc0087d0:	80a60001 	lb	a2,1(a1)
bc0087d4:	24c4ffd0 	addiu	a0,a2,-48
bc0087d8:	308400ff 	andi	a0,a0,0xff
bc0087dc:	2c84000a 	sltiu	a0,a0,10
bc0087e0:	1080000d 	beqz	a0,bc008818 <vsprintf+0x1ac>
bc0087e4:	24b10001 	addiu	s1,a1,1
bc0087e8:	00002021 	move	a0,zero
skip_atoi():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:20
	return sc - s;
}
static int skip_atoi(const char **s)
{
	int i = 0;
	while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
bc0087ec:	2408000a 	li	t0,10
bc0087f0:	82250000 	lb	a1,0(s1)
bc0087f4:	24a6ffd0 	addiu	a2,a1,-48
bc0087f8:	30c600ff 	andi	a2,a2,0xff
bc0087fc:	2cc6000a 	sltiu	a2,a2,10
bc008800:	10c0000b 	beqz	a2,bc008830 <vsprintf+0x1c4>
bc008804:	70883002 	mul	a2,a0,t0
bc008808:	26310001 	addiu	s1,s1,1
bc00880c:	00c52021 	addu	a0,a2,a1
vsprintf():
bc008810:	0b0021fc 	j	bc0087f0 <vsprintf+0x184>
bc008814:	2484ffd0 	addiu	a0,a0,-48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:394
		if (*fmt == '.')
		{
			++fmt;
			if (is_digit(*fmt))
				precision = skip_atoi(&fmt);
			else if (*fmt == '*')
bc008818:	2408002a 	li	t0,42
bc00881c:	14c80008 	bne	a2,t0,bc008840 <vsprintf+0x1d4>
bc008820:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:397
			{
				++fmt;
				precision = va_arg(args, int);
bc008824:	8e040000 	lw	a0,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:396
			++fmt;
			if (is_digit(*fmt))
				precision = skip_atoi(&fmt);
			else if (*fmt == '*')
			{
				++fmt;
bc008828:	24b10002 	addiu	s1,a1,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:397
				precision = va_arg(args, int);
bc00882c:	26100004 	addiu	s0,s0,4
bc008830:	28850000 	slti	a1,a0,0
bc008834:	0b002210 	j	bc008840 <vsprintf+0x1d4>
bc008838:	0005200b 	movn	a0,zero,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:388
				field_width = -field_width;
				flags |= LEFT;
			}
		}
		// Get the precision
		precision = -1;
bc00883c:	2404ffff 	li	a0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:403
			}
			if (precision < 0) precision = 0;
		}
		// Get the conversion qualifier
		qualifier = -1;
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
bc008840:	82250000 	lb	a1,0(s1)
bc008844:	24060068 	li	a2,104
bc008848:	10a60005 	beq	a1,a2,bc008860 <vsprintf+0x1f4>
bc00884c:	2409ffdf 	li	t1,-33
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:403 (discriminator 1)
bc008850:	00a94824 	and	t1,a1,t1
bc008854:	2406004c 	li	a2,76
bc008858:	15260004 	bne	t1,a2,bc00886c <vsprintf+0x200>
bc00885c:	2408ffff 	li	t0,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:405
		{
			qualifier = *fmt;
bc008860:	00a04021 	move	t0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:406
			fmt++;
bc008864:	26310001 	addiu	s1,s1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:410
		}
		// Default base
		base = 10;
		switch (*fmt)
bc008868:	82250000 	lb	a1,0(s1)
bc00886c:	24060069 	li	a2,105
bc008870:	50a6013a 	beql	a1,a2,bc008d5c <vsprintf+0x6f0>
bc008874:	34630002 	ori	v1,v1,0x2
bc008878:	28a6006a 	slti	a2,a1,106
bc00887c:	10c00014 	beqz	a2,bc0088d0 <vsprintf+0x264>
bc008880:	24060070 	li	a2,112
bc008884:	24060061 	li	a2,97
bc008888:	10a60088 	beq	a1,a2,bc008aac <vsprintf+0x440>
bc00888c:	28a60062 	slti	a2,a1,98
bc008890:	10c00007 	beqz	a2,bc0088b0 <vsprintf+0x244>
bc008894:	24060041 	li	a2,65
bc008898:	10a60083 	beq	a1,a2,bc008aa8 <vsprintf+0x43c>
bc00889c:	24060058 	li	a2,88
bc0088a0:	10a60130 	beq	a1,a2,bc008d64 <vsprintf+0x6f8>
bc0088a4:	34630040 	ori	v1,v1,0x40
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:484
				str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
				continue;
#endif

			default:
				if (*fmt != '%') *str++ = '%';
bc0088a8:	0b00234d 	j	bc008d34 <vsprintf+0x6c8>
bc0088ac:	24030025 	li	v1,37
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:410
			qualifier = *fmt;
			fmt++;
		}
		// Default base
		base = 10;
		switch (*fmt)
bc0088b0:	24060063 	li	a2,99
bc0088b4:	50a6001f 	beql	a1,a2,bc008934 <vsprintf+0x2c8>
bc0088b8:	30630010 	andi	v1,v1,0x10
bc0088bc:	24060064 	li	a2,100
bc0088c0:	50a60126 	beql	a1,a2,bc008d5c <vsprintf+0x6f0>
bc0088c4:	34630002 	ori	v1,v1,0x2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:484
				str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
				continue;
#endif

			default:
				if (*fmt != '%') *str++ = '%';
bc0088c8:	0b00234d 	j	bc008d34 <vsprintf+0x6c8>
bc0088cc:	24030025 	li	v1,37
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:410
			qualifier = *fmt;
			fmt++;
		}
		// Default base
		base = 10;
		switch (*fmt)
bc0088d0:	10a60062 	beq	a1,a2,bc008a5c <vsprintf+0x3f0>
bc0088d4:	28a60071 	slti	a2,a1,113
bc0088d8:	10c00008 	beqz	a2,bc0088fc <vsprintf+0x290>
bc0088dc:	24060075 	li	a2,117
bc0088e0:	2406006e 	li	a2,110
bc0088e4:	10a6006a 	beq	a1,a2,bc008a90 <vsprintf+0x424>
bc0088e8:	2409006f 	li	t1,111
bc0088ec:	10a9011e 	beq	a1,t1,bc008d68 <vsprintf+0x6fc>
bc0088f0:	24060008 	li	a2,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:484
				str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
				continue;
#endif

			default:
				if (*fmt != '%') *str++ = '%';
bc0088f4:	0b00234d 	j	bc008d34 <vsprintf+0x6c8>
bc0088f8:	24030025 	li	v1,37
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:410
			qualifier = *fmt;
			fmt++;
		}
		// Default base
		base = 10;
		switch (*fmt)
bc0088fc:	10a6011a 	beq	a1,a2,bc008d68 <vsprintf+0x6fc>
bc008900:	2406000a 	li	a2,10
bc008904:	24060078 	li	a2,120
bc008908:	10a60116 	beq	a1,a2,bc008d64 <vsprintf+0x6f8>
bc00890c:	24060073 	li	a2,115
bc008910:	54a60108 	bnel	a1,a2,bc008d34 <vsprintf+0x6c8>
bc008914:	24030025 	li	v1,37
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:419
				*str++ = (unsigned char) va_arg(args, int);
				while (--field_width > 0) *str++ = ' ';
				continue;

			case 's':
				s = va_arg(args, char *);
bc008918:	8e050000 	lw	a1,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:420
				if (!s) s = "<NULL>";
bc00891c:	26489674 	addiu	t0,s2,-27020
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:419
				*str++ = (unsigned char) va_arg(args, int);
				while (--field_width > 0) *str++ = ' ';
				continue;

			case 's':
				s = va_arg(args, char *);
bc008920:	26060004 	addiu	a2,s0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:420
				if (!s) s = "<NULL>";
bc008924:	0105280a 	movz	a1,t0,a1
bc008928:	00a44021 	addu	t0,a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:14
static char sprint_buf[LOG_BUF_LEN_MAX + 4];

static size_t strnlen(const char *s, size_t count)
{
	const char *sc;
	for (sc = s; *sc != 0 && count--; ++sc);
bc00892c:	0b002272 	j	bc0089c8 <vsprintf+0x35c>
bc008930:	00a02021 	move	a0,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:413
		// Default base
		base = 10;
		switch (*fmt)
		{
			case 'c':
				if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
bc008934:	54600010 	bnezl	v1,bc008978 <vsprintf+0x30c>
bc008938:	8e030000 	lw	v1,0(s0)
bc00893c:	00e01821 	move	v1,a3
bc008940:	00402021 	move	a0,v0
bc008944:	24050020 	li	a1,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:413 (discriminator 1)
bc008948:	2463ffff 	addiu	v1,v1,-1
bc00894c:	18600003 	blez	v1,bc00895c <vsprintf+0x2f0>
bc008950:	24840001 	addiu	a0,a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:413 (discriminator 2)
bc008954:	0b002252 	j	bc008948 <vsprintf+0x2dc>
bc008958:	a085ffff 	sb	a1,-1(a0)
bc00895c:	24e7ffff 	addiu	a3,a3,-1
bc008960:	28e30000 	slti	v1,a3,0
bc008964:	00004021 	move	t0,zero
bc008968:	00e3400a 	movz	t0,a3,v1
bc00896c:	00481021 	addu	v0,v0,t0
bc008970:	00e83823 	subu	a3,a3,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:414
				*str++ = (unsigned char) va_arg(args, int);
bc008974:	8e030000 	lw	v1,0(s0)
bc008978:	24440001 	addiu	a0,v0,1
bc00897c:	26050004 	addiu	a1,s0,4
bc008980:	a0430000 	sb	v1,0(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:415
				while (--field_width > 0) *str++ = ' ';
bc008984:	24060020 	li	a2,32
bc008988:	00e01021 	move	v0,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:414
		base = 10;
		switch (*fmt)
		{
			case 'c':
				if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
				*str++ = (unsigned char) va_arg(args, int);
bc00898c:	00801821 	move	v1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:415 (discriminator 1)
				while (--field_width > 0) *str++ = ' ';
bc008990:	2442ffff 	addiu	v0,v0,-1
bc008994:	18400003 	blez	v0,bc0089a4 <vsprintf+0x338>
bc008998:	24630001 	addiu	v1,v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:415 (discriminator 2)
bc00899c:	0b002264 	j	bc008990 <vsprintf+0x324>
bc0089a0:	a066ffff 	sb	a2,-1(v1)
bc0089a4:	24e2ffff 	addiu	v0,a3,-1
bc0089a8:	28430000 	slti	v1,v0,0
bc0089ac:	0003100b 	movn	v0,zero,v1
bc0089b0:	00821021 	addu	v0,a0,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:414
		base = 10;
		switch (*fmt)
		{
			case 'c':
				if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
				*str++ = (unsigned char) va_arg(args, int);
bc0089b4:	0b00236a 	j	bc008da8 <vsprintf+0x73c>
bc0089b8:	00a08021 	move	s0,a1
strnlen():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:14
static char sprint_buf[LOG_BUF_LEN_MAX + 4];

static size_t strnlen(const char *s, size_t count)
{
	const char *sc;
	for (sc = s; *sc != 0 && count--; ++sc);
bc0089bc:	50880006 	beql	a0,t0,bc0089d8 <vsprintf+0x36c>
bc0089c0:	30630010 	andi	v1,v1,0x10
bc0089c4:	24840001 	addiu	a0,a0,1
bc0089c8:	80890000 	lb	t1,0(a0)
bc0089cc:	1520fffb 	bnez	t1,bc0089bc <vsprintf+0x350>
bc0089d0:	00000000 	nop
vsprintf():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:422

			case 's':
				s = va_arg(args, char *);
				if (!s) s = "<NULL>";
				len = strnlen(s, precision);
				if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
bc0089d4:	30630010 	andi	v1,v1,0x10
bc0089d8:	1460000a 	bnez	v1,bc008a04 <vsprintf+0x398>
bc0089dc:	00852023 	subu	a0,a0,a1
bc0089e0:	24080020 	li	t0,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:422 (discriminator 1)
bc0089e4:	24e7ffff 	addiu	a3,a3,-1
bc0089e8:	24e30001 	addiu	v1,a3,1
bc0089ec:	0083182a 	slt	v1,a0,v1
bc0089f0:	10600005 	beqz	v1,bc008a08 <vsprintf+0x39c>
bc0089f4:	00001821 	move	v1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:422 (discriminator 2)
bc0089f8:	24420001 	addiu	v0,v0,1
bc0089fc:	0b002279 	j	bc0089e4 <vsprintf+0x378>
bc008a00:	a048ffff 	sb	t0,-1(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:423
				for (i = 0; i < len; ++i) *str++ = *s++;
bc008a04:	00001821 	move	v1,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:423 (discriminator 1)
bc008a08:	0064402a 	slt	t0,v1,a0
bc008a0c:	11000006 	beqz	t0,bc008a28 <vsprintf+0x3bc>
bc008a10:	00a34021 	addu	t0,a1,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:423 (discriminator 2)
bc008a14:	81090000 	lb	t1,0(t0)
bc008a18:	00434021 	addu	t0,v0,v1
bc008a1c:	24630001 	addiu	v1,v1,1
bc008a20:	0b002282 	j	bc008a08 <vsprintf+0x39c>
bc008a24:	a1090000 	sb	t1,0(t0)
bc008a28:	28830000 	slti	v1,a0,0
bc008a2c:	00004821 	move	t1,zero
bc008a30:	0083480a 	movz	t1,a0,v1
bc008a34:	00491021 	addu	v0,v0,t1
bc008a38:	00473821 	addu	a3,v0,a3
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:424
				while (len < field_width--) *str++ = ' ';
bc008a3c:	24050020 	li	a1,32
bc008a40:	00e21823 	subu	v1,a3,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:424 (discriminator 1)
bc008a44:	0083182a 	slt	v1,a0,v1
bc008a48:	106000d7 	beqz	v1,bc008da8 <vsprintf+0x73c>
bc008a4c:	00c08021 	move	s0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:424 (discriminator 2)
bc008a50:	24420001 	addiu	v0,v0,1
bc008a54:	0b002290 	j	bc008a40 <vsprintf+0x3d4>
bc008a58:	a045ffff 	sb	a1,-1(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:428
				continue;

			case 'p':
				if (field_width == -1)
bc008a5c:	2405ffff 	li	a1,-1
bc008a60:	14e50003 	bne	a3,a1,bc008a70 <vsprintf+0x404>
bc008a64:	8e050000 	lw	a1,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:431
				{
					field_width = 2 * sizeof(void *);
					flags |= ZEROPAD;
bc008a68:	34630001 	ori	v1,v1,0x1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:430
				continue;

			case 'p':
				if (field_width == -1)
				{
					field_width = 2 * sizeof(void *);
bc008a6c:	24070008 	li	a3,8
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:433
					flags |= ZEROPAD;
				}
				str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
bc008a70:	26170004 	addiu	s7,s0,4
bc008a74:	afa40010 	sw	a0,16(sp)
bc008a78:	afa30014 	sw	v1,20(sp)
bc008a7c:	00402021 	move	a0,v0
bc008a80:	0f0020fe 	jal	bc0083f8 <number>
bc008a84:	24060010 	li	a2,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:434
				continue;
bc008a88:	0b00236a 	j	bc008da8 <vsprintf+0x73c>
bc008a8c:	02e08021 	move	s0,s7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:444
					long *ip = va_arg(args, long *);
					*ip = (str - buf);
				}
				else
				{
					int *ip = va_arg(args, int *);
bc008a90:	8e050000 	lw	a1,0(s0)
bc008a94:	26030004 	addiu	v1,s0,4
bc008a98:	00562023 	subu	a0,v0,s6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:445
					*ip = (str - buf);
bc008a9c:	aca40000 	sw	a0,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:444
					long *ip = va_arg(args, long *);
					*ip = (str - buf);
				}
				else
				{
					int *ip = va_arg(args, int *);
bc008aa0:	0b00236a 	j	bc008da8 <vsprintf+0x73c>
bc008aa4:	00608021 	move	s0,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:450
					*ip = (str - buf);
				}
				continue;

			case 'A':
				flags |= LARGE;
bc008aa8:	34630040 	ori	v1,v1,0x40
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:452
			case 'a':
				if (qualifier == 'l')
bc008aac:	2404006c 	li	a0,108
bc008ab0:	260a0004 	addiu	t2,s0,4
bc008ab4:	1504003e 	bne	t0,a0,bc008bb0 <vsprintf+0x544>
bc008ab8:	8e0b0000 	lw	t3,0(s0)
eaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:97
static char *eaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
	char tmp[24];
	char *dig = digits;
	int i, len;
	if (type & LARGE)  dig = upper_digits;
bc008abc:	30640040 	andi	a0,v1,0x40
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:95
	return str;
}
static char *eaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
	char tmp[24];
	char *dig = digits;
bc008ac0:	2666964c 	addiu	a2,s3,-27060
bc008ac4:	0284300a 	movz	a2,s4,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:98
	int i, len;
	if (type & LARGE)  dig = upper_digits;
	len = 0;
bc008ac8:	00004021 	move	t0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:99
	for (i = 0; i < 6; i++)
bc008acc:	00002021 	move	a0,zero
bc008ad0:	240d0006 	li	t5,6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:101
	{
		if (i != 0) tmp[len++] = ':';
bc008ad4:	240e003a 	li	t6,58
bc008ad8:	01642821 	addu	a1,t3,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:102
		tmp[len++] = dig[addr[i] >> 4];
bc008adc:	90ac0000 	lbu	t4,0(a1)
bc008ae0:	27a50020 	addiu	a1,sp,32
bc008ae4:	00a84821 	addu	t1,a1,t0
bc008ae8:	000c2902 	srl	a1,t4,0x4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:103
		tmp[len++] = dig[addr[i] & 0x0F];
bc008aec:	318c000f 	andi	t4,t4,0xf
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:102
	if (type & LARGE)  dig = upper_digits;
	len = 0;
	for (i = 0; i < 6; i++)
	{
		if (i != 0) tmp[len++] = ':';
		tmp[len++] = dig[addr[i] >> 4];
bc008af0:	00c52821 	addu	a1,a2,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:103
		tmp[len++] = dig[addr[i] & 0x0F];
bc008af4:	00cc6021 	addu	t4,a2,t4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:102
	if (type & LARGE)  dig = upper_digits;
	len = 0;
	for (i = 0; i < 6; i++)
	{
		if (i != 0) tmp[len++] = ':';
		tmp[len++] = dig[addr[i] >> 4];
bc008af8:	90a50000 	lbu	a1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:103
		tmp[len++] = dig[addr[i] & 0x0F];
bc008afc:	918c0000 	lbu	t4,0(t4)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:99
	char tmp[24];
	char *dig = digits;
	int i, len;
	if (type & LARGE)  dig = upper_digits;
	len = 0;
	for (i = 0; i < 6; i++)
bc008b00:	24840001 	addiu	a0,a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:102
	{
		if (i != 0) tmp[len++] = ':';
		tmp[len++] = dig[addr[i] >> 4];
bc008b04:	a1250000 	sb	a1,0(t1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:103
		tmp[len++] = dig[addr[i] & 0x0F];
bc008b08:	a12c0001 	sb	t4,1(t1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:99
	char tmp[24];
	char *dig = digits;
	int i, len;
	if (type & LARGE)  dig = upper_digits;
	len = 0;
	for (i = 0; i < 6; i++)
bc008b0c:	108d0006 	beq	a0,t5,bc008b28 <vsprintf+0x4bc>
bc008b10:	25050002 	addiu	a1,t0,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:101
	{
		if (i != 0) tmp[len++] = ':';
bc008b14:	27a90020 	addiu	t1,sp,32
bc008b18:	01252821 	addu	a1,t1,a1
bc008b1c:	25080003 	addiu	t0,t0,3
vsprintf():
bc008b20:	0b0022b6 	j	bc008ad8 <vsprintf+0x46c>
bc008b24:	a0ae0000 	sb	t6,0(a1)
eaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:105
		tmp[len++] = dig[addr[i] >> 4];
		tmp[len++] = dig[addr[i] & 0x0F];
	}
	if (!(type & LEFT)) while (len < size--) *str++ = ' ';
bc008b28:	30630010 	andi	v1,v1,0x10
bc008b2c:	14600009 	bnez	v1,bc008b54 <vsprintf+0x4e8>
bc008b30:	24040020 	li	a0,32
bc008b34:	24e7ffff 	addiu	a3,a3,-1
bc008b38:	24e30001 	addiu	v1,a3,1
bc008b3c:	00a3182a 	slt	v1,a1,v1
bc008b40:	10600005 	beqz	v1,bc008b58 <vsprintf+0x4ec>
bc008b44:	00001821 	move	v1,zero
bc008b48:	24420001 	addiu	v0,v0,1
vsprintf():
bc008b4c:	0b0022cd 	j	bc008b34 <vsprintf+0x4c8>
bc008b50:	a044ffff 	sb	a0,-1(v0)
eaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:107

	for (i = 0; i < len; ++i) *str++ = tmp[i];
bc008b54:	00001821 	move	v1,zero
bc008b58:	0065202a 	slt	a0,v1,a1
bc008b5c:	10800007 	beqz	a0,bc008b7c <vsprintf+0x510>
bc008b60:	27a80020 	addiu	t0,sp,32
bc008b64:	01033021 	addu	a2,t0,v1
bc008b68:	90c60000 	lbu	a2,0(a2)
bc008b6c:	00432021 	addu	a0,v0,v1
bc008b70:	24630001 	addiu	v1,v1,1
vsprintf():
bc008b74:	0b0022d6 	j	bc008b58 <vsprintf+0x4ec>
bc008b78:	a0860000 	sb	a2,0(a0)
bc008b7c:	28a30000 	slti	v1,a1,0
bc008b80:	00004821 	move	t1,zero
bc008b84:	00a3480a 	movz	t1,a1,v1
bc008b88:	00491021 	addu	v0,v0,t1
bc008b8c:	00473821 	addu	a3,v0,a3
eaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:109

	while (len < size--) *str++ = ' ';
bc008b90:	24040020 	li	a0,32
bc008b94:	00e21823 	subu	v1,a3,v0
bc008b98:	00a3182a 	slt	v1,a1,v1
bc008b9c:	10600082 	beqz	v1,bc008da8 <vsprintf+0x73c>
bc008ba0:	01408021 	move	s0,t2
bc008ba4:	24420001 	addiu	v0,v0,1
vsprintf():
bc008ba8:	0b0022e5 	j	bc008b94 <vsprintf+0x528>
bc008bac:	a044ffff 	sb	a0,-1(v0)
iaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:118
static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
	char tmp[24];
	int i, n, len;
	len = 0;
	for (i = 0; i < 4; i++)
bc008bb0:	00002021 	move	a0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:117
}
static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
	char tmp[24];
	int i, n, len;
	len = 0;
bc008bb4:	00003021 	move	a2,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:136
				tmp[len++] = digits[n / 10];
				n = n % 10;
			}
			else if (n >= 10)
			{
				tmp[len++] = digits[n / 10];
bc008bb8:	2409000a 	li	t1,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:129
			tmp[len++] = digits[0];
		else
		{
			if (n >= 100)
			{
				tmp[len++] = digits[n / 100];
bc008bbc:	240c0064 	li	t4,100
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:124
	{
		if (i != 0) tmp[len++] = '.';
		n = addr[i];

		if (n == 0)
			tmp[len++] = digits[0];
bc008bc0:	240f0030 	li	t7,48
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:118
static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
	char tmp[24];
	int i, n, len;
	len = 0;
	for (i = 0; i < 4; i++)
bc008bc4:	240e0004 	li	t6,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:120
	{
		if (i != 0) tmp[len++] = '.';
bc008bc8:	2410002e 	li	s0,46
bc008bcc:	01642821 	addu	a1,t3,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:121
		n = addr[i];
bc008bd0:	90a50000 	lbu	a1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:123

		if (n == 0)
bc008bd4:	14a00005 	bnez	a1,bc008bec <vsprintf+0x580>
bc008bd8:	24c80001 	addiu	t0,a2,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:124
			tmp[len++] = digits[0];
bc008bdc:	27a50020 	addiu	a1,sp,32
bc008be0:	00a63021 	addu	a2,a1,a2
vsprintf():
bc008be4:	0b002324 	j	bc008c90 <vsprintf+0x624>
bc008be8:	a0cf0000 	sb	t7,0(a2)
iaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:127
		else
		{
			if (n >= 100)
bc008bec:	28ad0064 	slti	t5,a1,100
bc008bf0:	15a00015 	bnez	t5,bc008c48 <vsprintf+0x5dc>
bc008bf4:	28ad000a 	slti	t5,a1,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:129
			{
				tmp[len++] = digits[n / 100];
bc008bf8:	00ac001a 	div	zero,a1,t4
bc008bfc:	018001f4 	teq	t4,zero,0x7
bc008c00:	27ad0020 	addiu	t5,sp,32
bc008c04:	01a6b821 	addu	s7,t5,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:131
				n = n % 100;
				tmp[len++] = digits[n / 10];
bc008c08:	24c60002 	addiu	a2,a2,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:129
			tmp[len++] = digits[0];
		else
		{
			if (n >= 100)
			{
				tmp[len++] = digits[n / 100];
bc008c0c:	00006810 	mfhi	t5
bc008c10:	00002812 	mflo	a1
bc008c14:	02852821 	addu	a1,s4,a1
bc008c18:	90a50000 	lbu	a1,0(a1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:131
				n = n % 100;
				tmp[len++] = digits[n / 10];
bc008c1c:	01a9001a 	div	zero,t5,t1
bc008c20:	012001f4 	teq	t1,zero,0x7
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:129
			tmp[len++] = digits[0];
		else
		{
			if (n >= 100)
			{
				tmp[len++] = digits[n / 100];
bc008c24:	a2e50000 	sb	a1,0(s7)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:131
				n = n % 100;
				tmp[len++] = digits[n / 10];
bc008c28:	27a50020 	addiu	a1,sp,32
bc008c2c:	00a84021 	addu	t0,a1,t0
bc008c30:	00006812 	mflo	t5
bc008c34:	028d6821 	addu	t5,s4,t5
bc008c38:	91ad0000 	lbu	t5,0(t5)
bc008c3c:	00002810 	mfhi	a1
vsprintf():
bc008c40:	0b00231e 	j	bc008c78 <vsprintf+0x60c>
bc008c44:	a10d0000 	sb	t5,0(t0)
iaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:134
				n = n % 10;
			}
			else if (n >= 10)
bc008c48:	55a0000c 	bnezl	t5,bc008c7c <vsprintf+0x610>
bc008c4c:	02852821 	addu	a1,s4,a1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:136
			{
				tmp[len++] = digits[n / 10];
bc008c50:	00a9001a 	div	zero,a1,t1
bc008c54:	012001f4 	teq	t1,zero,0x7
bc008c58:	27ad0020 	addiu	t5,sp,32
bc008c5c:	01a63021 	addu	a2,t5,a2
bc008c60:	00006812 	mflo	t5
bc008c64:	028d6821 	addu	t5,s4,t5
bc008c68:	91ad0000 	lbu	t5,0(t5)
bc008c6c:	00002810 	mfhi	a1
bc008c70:	a0cd0000 	sb	t5,0(a2)
bc008c74:	01003021 	move	a2,t0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:139
				n = n % 10;
			}
			tmp[len++] = digits[n];
bc008c78:	02852821 	addu	a1,s4,a1
bc008c7c:	90a50000 	lbu	a1,0(a1)
bc008c80:	27ad0020 	addiu	t5,sp,32
bc008c84:	24c80001 	addiu	t0,a2,1
bc008c88:	01a63021 	addu	a2,t5,a2
bc008c8c:	a0c50000 	sb	a1,0(a2)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:118
static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type)
{
	char tmp[24];
	int i, n, len;
	len = 0;
	for (i = 0; i < 4; i++)
bc008c90:	24840001 	addiu	a0,a0,1
bc008c94:	108e0005 	beq	a0,t6,bc008cac <vsprintf+0x640>
bc008c98:	27ad0020 	addiu	t5,sp,32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:120
	{
		if (i != 0) tmp[len++] = '.';
bc008c9c:	25060001 	addiu	a2,t0,1
bc008ca0:	01a84021 	addu	t0,t5,t0
vsprintf():
bc008ca4:	0b0022f3 	j	bc008bcc <vsprintf+0x560>
bc008ca8:	a1100000 	sb	s0,0(t0)
iaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:142
				n = n % 10;
			}
			tmp[len++] = digits[n];
		}
	}
	if (!(type & LEFT)) while (len < size--) *str++ = ' ';
bc008cac:	30630010 	andi	v1,v1,0x10
bc008cb0:	14600009 	bnez	v1,bc008cd8 <vsprintf+0x66c>
bc008cb4:	24040020 	li	a0,32
bc008cb8:	24e7ffff 	addiu	a3,a3,-1
bc008cbc:	24e30001 	addiu	v1,a3,1
bc008cc0:	0103182a 	slt	v1,t0,v1
bc008cc4:	10600005 	beqz	v1,bc008cdc <vsprintf+0x670>
bc008cc8:	00001821 	move	v1,zero
bc008ccc:	24420001 	addiu	v0,v0,1
vsprintf():
bc008cd0:	0b00232e 	j	bc008cb8 <vsprintf+0x64c>
bc008cd4:	a044ffff 	sb	a0,-1(v0)
iaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:143
	for (i = 0; i < len; ++i) *str++ = tmp[i];
bc008cd8:	00001821 	move	v1,zero
bc008cdc:	0068202a 	slt	a0,v1,t0
bc008ce0:	10800007 	beqz	a0,bc008d00 <vsprintf+0x694>
bc008ce4:	27a60020 	addiu	a2,sp,32
bc008ce8:	00c32821 	addu	a1,a2,v1
bc008cec:	90a50000 	lbu	a1,0(a1)
bc008cf0:	00432021 	addu	a0,v0,v1
bc008cf4:	24630001 	addiu	v1,v1,1
vsprintf():
bc008cf8:	0b002337 	j	bc008cdc <vsprintf+0x670>
bc008cfc:	a0850000 	sb	a1,0(a0)
bc008d00:	29030000 	slti	v1,t0,0
bc008d04:	00004821 	move	t1,zero
bc008d08:	0103480a 	movz	t1,t0,v1
bc008d0c:	00491021 	addu	v0,v0,t1
bc008d10:	00473821 	addu	a3,v0,a3
iaddr():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:144
	while (len < size--) *str++ = ' ';
bc008d14:	24040020 	li	a0,32
bc008d18:	00e21823 	subu	v1,a3,v0
bc008d1c:	0103182a 	slt	v1,t0,v1
bc008d20:	10600021 	beqz	v1,bc008da8 <vsprintf+0x73c>
bc008d24:	01408021 	move	s0,t2
bc008d28:	24420001 	addiu	v0,v0,1
vsprintf():
bc008d2c:	0b002346 	j	bc008d18 <vsprintf+0x6ac>
bc008d30:	a044ffff 	sb	a0,-1(v0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:484
				str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
				continue;
#endif

			default:
				if (*fmt != '%') *str++ = '%';
bc008d34:	50a30004 	beql	a1,v1,bc008d48 <vsprintf+0x6dc>
bc008d38:	82230000 	lb	v1,0(s1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:484 (discriminator 1)
bc008d3c:	a0430000 	sb	v1,0(v0)
bc008d40:	24420001 	addiu	v0,v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:485
				if (*fmt)
bc008d44:	82230000 	lb	v1,0(s1)
bc008d48:	50600017 	beqzl	v1,bc008da8 <vsprintf+0x73c>
bc008d4c:	2631ffff 	addiu	s1,s1,-1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:486
					*str++ = *fmt;
bc008d50:	a0430000 	sb	v1,0(v0)
bc008d54:	0b00236a 	j	bc008da8 <vsprintf+0x73c>
bc008d58:	24420001 	addiu	v0,v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:409
		{
			qualifier = *fmt;
			fmt++;
		}
		// Default base
		base = 10;
bc008d5c:	0b00235a 	j	bc008d68 <vsprintf+0x6fc>
bc008d60:	2406000a 	li	a2,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:465
				base = 8;
				break;
			case 'X':
				flags |= LARGE;
			case 'x':
				base = 16;
bc008d64:	24060010 	li	a2,16
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:493
					--fmt;
				continue;

		}

		if (qualifier == 'l')
bc008d68:	2405006c 	li	a1,108
bc008d6c:	11050008 	beq	t0,a1,bc008d90 <vsprintf+0x724>
bc008d70:	26090004 	addiu	t1,s0,4
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:495
			num = va_arg(args, unsigned long);
		else if (qualifier == 'h')
bc008d74:	240a0068 	li	t2,104
bc008d78:	150a0005 	bne	t0,t2,bc008d90 <vsprintf+0x724>
bc008d7c:	30650002 	andi	a1,v1,0x2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:497
		{
			if (flags & SIGN)
bc008d80:	50a00004 	beqzl	a1,bc008d94 <vsprintf+0x728>
bc008d84:	96050000 	lhu	a1,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:498
				num = va_arg(args, short);
bc008d88:	0b002365 	j	bc008d94 <vsprintf+0x728>
bc008d8c:	86050000 	lh	a1,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:505
				num = va_arg(args, unsigned short);
		}
		else if (flags & SIGN)
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
bc008d90:	8e050000 	lw	a1,0(s0)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:506
		str = number(str, num, base, field_width, precision, flags);
bc008d94:	afa40010 	sw	a0,16(sp)
bc008d98:	afa30014 	sw	v1,20(sp)
bc008d9c:	00402021 	move	a0,v0
bc008da0:	0f0020fe 	jal	bc0083f8 <number>
bc008da4:	01208021 	move	s0,t1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:347
	int flags;            // Flags to number()
	int field_width;      // Width of output field
	int precision;        // Min. # of digits for integers; max number of chars for from string
	int qualifier;        // 'h', 'l', or 'L' for integer fields
	int str_len = 0;
	for (str = buf; *fmt; fmt++)
bc008da8:	0b0021ae 	j	bc0086b8 <vsprintf+0x4c>
bc008dac:	26310001 	addiu	s1,s1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:509
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}

	*str = 0;
bc008db0:	a0400000 	sb	zero,0(v0)
bc008db4:	00561023 	subu	v0,v0,s6
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:511
	return str - buf;
}
bc008db8:	8fbf005c 	lw	ra,92(sp)
bc008dbc:	8fb70058 	lw	s7,88(sp)
bc008dc0:	8fb60054 	lw	s6,84(sp)
bc008dc4:	8fb50050 	lw	s5,80(sp)
bc008dc8:	8fb4004c 	lw	s4,76(sp)
bc008dcc:	8fb30048 	lw	s3,72(sp)
bc008dd0:	8fb20044 	lw	s2,68(sp)
bc008dd4:	8fb10040 	lw	s1,64(sp)
bc008dd8:	8fb0003c 	lw	s0,60(sp)
bc008ddc:	03e00008 	jr	ra
bc008de0:	27bd0060 	addiu	sp,sp,96

bc008de4 <printf>:
printf():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:514

int printf(const char *fmt, ...)
{
bc008de4:	27bdffe0 	addiu	sp,sp,-32
bc008de8:	afb00018 	sw	s0,24(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:519
	va_list args;
	int n;

	va_start(args, fmt);
	n = vsprintf(sprint_buf, fmt, args);
bc008dec:	3c10bc01 	lui	s0,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:514
	*str = 0;
	return str - buf;
}

int printf(const char *fmt, ...)
{
bc008df0:	afa50024 	sw	a1,36(sp)
bc008df4:	afa60028 	sw	a2,40(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:519
	va_list args;
	int n;

	va_start(args, fmt);
	n = vsprintf(sprint_buf, fmt, args);
bc008df8:	00802821 	move	a1,a0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:514
	*str = 0;
	return str - buf;
}

int printf(const char *fmt, ...)
{
bc008dfc:	afa40020 	sw	a0,32(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:519
	va_list args;
	int n;

	va_start(args, fmt);
	n = vsprintf(sprint_buf, fmt, args);
bc008e00:	27a60024 	addiu	a2,sp,36
bc008e04:	26049938 	addiu	a0,s0,-26312
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:514
	*str = 0;
	return str - buf;
}

int printf(const char *fmt, ...)
{
bc008e08:	afbf001c 	sw	ra,28(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:519
	va_list args;
	int n;

	va_start(args, fmt);
	n = vsprintf(sprint_buf, fmt, args);
bc008e0c:	0f00219b 	jal	bc00866c <vsprintf>
bc008e10:	afa7002c 	sw	a3,44(sp)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:522
	va_end(args);

    if(n < LOG_BUF_LEN_MAX)
bc008e14:	28450100 	slti	a1,v0,256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:519
{
	va_list args;
	int n;

	va_start(args, fmt);
	n = vsprintf(sprint_buf, fmt, args);
bc008e18:	02002021 	move	a0,s0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:522
	va_end(args);

    if(n < LOG_BUF_LEN_MAX)
bc008e1c:	10a00006 	beqz	a1,bc008e38 <printf+0x54>
bc008e20:	26039938 	addiu	v1,s0,-26312
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:524
    {
        sprint_buf[n] = '\r';
bc008e24:	00621821 	addu	v1,v1,v0
bc008e28:	2405000d 	li	a1,13
bc008e2c:	a0650000 	sb	a1,0(v1)
bc008e30:	0b002393 	j	bc008e4c <printf+0x68>
bc008e34:	24500001 	addiu	s0,v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:530
        n++;
    }
    else
    {
        n = LOG_BUF_LEN_MAX;
        sprint_buf[n] = '\n';
bc008e38:	2402000a 	li	v0,10
bc008e3c:	a0620100 	sb	v0,256(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:532
        n++;
        sprint_buf[n] = '\r';
bc008e40:	2402000d 	li	v0,13
bc008e44:	a0620101 	sb	v0,257(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:533
        n++;
bc008e48:	24100102 	li	s0,258
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:541
#ifdef SIMULATION
	n = 1;
#endif

#if defined(UART) || defined(UART_LOG)
	uart_tx_debug_msg((char *)sprint_buf,(unsigned int)n);
bc008e4c:	02002821 	move	a1,s0
bc008e50:	0f001d42 	jal	bc007508 <uart_tx_debug_msg>
bc008e54:	24849938 	addiu	a0,a0,-26312
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:545
#endif

	return n;
}
bc008e58:	8fbf001c 	lw	ra,28(sp)
bc008e5c:	02001021 	move	v0,s0
bc008e60:	8fb00018 	lw	s0,24(sp)
bc008e64:	03e00008 	jr	ra
bc008e68:	27bd0020 	addiu	sp,sp,32

bc008e6c <puts>:
puts():
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:550

int puts(const char *str)
{
	int n = 0;
	char *p = sprint_buf;
bc008e6c:	3c03bc01 	lui	v1,0xbc01
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:548

	return n;
}

int puts(const char *str)
{
bc008e70:	27bdffe0 	addiu	sp,sp,-32
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:550
	int n = 0;
	char *p = sprint_buf;
bc008e74:	24639938 	addiu	v1,v1,-26312
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:549
	return n;
}

int puts(const char *str)
{
	int n = 0;
bc008e78:	00001021 	move	v0,zero
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:548

	return n;
}

int puts(const char *str)
{
bc008e7c:	afbf001c 	sw	ra,28(sp)
bc008e80:	afb00018 	sw	s0,24(sp)
bc008e84:	00603021 	move	a2,v1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:559
	{
		if(n < LOG_BUF_LEN_MAX)
		{
			c = *str;
			*p++ = *str++;
			if(c == 0xa)
bc008e88:	2407000a 	li	a3,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:561
			{
				*p++ = '\r';
bc008e8c:	2408000d 	li	t0,13
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:553 (discriminator 1)
{
	int n = 0;
	char *p = sprint_buf;
	char c = 0;

	while(*str!='\0')
bc008e90:	80850000 	lb	a1,0(a0)
bc008e94:	10a0000d 	beqz	a1,bc008ecc <puts+0x60>
bc008e98:	28490100 	slti	t1,v0,256
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:555
	{
		if(n < LOG_BUF_LEN_MAX)
bc008e9c:	5120000c 	beqzl	t1,bc008ed0 <puts+0x64>
bc008ea0:	00c21821 	addu	v1,a2,v0
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:558
		{
			c = *str;
			*p++ = *str++;
bc008ea4:	24840001 	addiu	a0,a0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:559
			if(c == 0xa)
bc008ea8:	10a70003 	beq	a1,a3,bc008eb8 <puts+0x4c>
bc008eac:	a0650000 	sb	a1,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:558
	while(*str!='\0')
	{
		if(n < LOG_BUF_LEN_MAX)
		{
			c = *str;
			*p++ = *str++;
bc008eb0:	0b0023b1 	j	bc008ec4 <puts+0x58>
bc008eb4:	24630001 	addiu	v1,v1,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:561
			if(c == 0xa)
			{
				*p++ = '\r';
bc008eb8:	a0680001 	sb	t0,1(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:562
				n++;
bc008ebc:	24420001 	addiu	v0,v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:561
		{
			c = *str;
			*p++ = *str++;
			if(c == 0xa)
			{
				*p++ = '\r';
bc008ec0:	24630002 	addiu	v1,v1,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:564
				n++;
			}
			n++;
bc008ec4:	0b0023a4 	j	bc008e90 <puts+0x24>
bc008ec8:	24420001 	addiu	v0,v0,1
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:572
		{
			break;
		}
	}

	sprint_buf[n] = '\n';
bc008ecc:	00c21821 	addu	v1,a2,v0
bc008ed0:	2404000a 	li	a0,10
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:575
	n++;
	sprint_buf[n] = '\r';
	n++;
bc008ed4:	24500002 	addiu	s0,v0,2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:572
		{
			break;
		}
	}

	sprint_buf[n] = '\n';
bc008ed8:	a0640000 	sb	a0,0(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:574
	n++;
	sprint_buf[n] = '\r';
bc008edc:	2404000d 	li	a0,13
bc008ee0:	a0640001 	sb	a0,1(v1)
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:577
	n++;

	uart_tx_debug_msg((char *)sprint_buf,(unsigned int)n);
bc008ee4:	02002821 	move	a1,s0
bc008ee8:	0f001d42 	jal	bc007508 <uart_tx_debug_msg>
bc008eec:	00c02021 	move	a0,a2
/home/robert/cc_clean/sdk/sf16a18-sdk-4.2.9/uboot/bare_spl/common/stdio.c:580

	return n;
}
bc008ef0:	8fbf001c 	lw	ra,28(sp)
bc008ef4:	02001021 	move	v0,s0
bc008ef8:	8fb00018 	lw	s0,24(sp)
bc008efc:	03e00008 	jr	ra
bc008f00:	27bd0020 	addiu	sp,sp,32
	...
bc008f14:	00000003 	sra	zero,zero,0x0
bc008f18:	00000004 	sllv	zero,zero,zero
bc008f1c:	00000001 	movf	zero,zero,$fcc0
bc008f20:	00000014 	0x14
bc008f24:	00000000 	nop
bc008f28:	00000001 	movf	zero,zero,$fcc0
bc008f2c:	00000001 	movf	zero,zero,$fcc0
bc008f30:	00000015 	0x15
bc008f34:	00000000 	nop
bc008f38:	00000001 	movf	zero,zero,$fcc0
bc008f3c:	00000001 	movf	zero,zero,$fcc0
bc008f40:	ffffffff 	sdc3	$31,-1(ra)
bc008f44:	ffffffff 	sdc3	$31,-1(ra)
bc008f48:	ffffffff 	sdc3	$31,-1(ra)
bc008f4c:	ffffffff 	sdc3	$31,-1(ra)
bc008f50:	bc00468c 	cache	0x0,18060(zero)
bc008f54:	bc00469c 	cache	0x0,18076(zero)
bc008f58:	bc00468c 	cache	0x0,18060(zero)
bc008f5c:	bc0046b4 	cache	0x0,18100(zero)
bc008f60:	bc0046b4 	cache	0x0,18100(zero)
bc008f64:	6d692d55 	0x6d692d55
bc008f68:	3a656761 	xori	a1,s3,0x6761
bc008f6c:	2c732520 	sltiu	s3,v1,9504
bc008f70:	7a697320 	0x7a697320
bc008f74:	73692065 	0x73692065
bc008f78:	0a642520 	j	b9909480 <_ftext_init-0x26fab80>
bc008f7c:	00000000 	nop
bc008f80:	20232323 	addi	v1,at,8995
bc008f84:	4f525245 	c3	0x1525245
bc008f88:	23232052 	addi	v1,t9,8274
bc008f8c:	6c502023 	0x6c502023
bc008f90:	65736165 	0x65736165
bc008f94:	53455220 	beql	k0,a1,bc01d818 <_gp+0xbf10>
bc008f98:	74205445 	jalx	b0815114 <_ftext_init-0xb7eeeec>
bc008f9c:	62206568 	0x62206568
bc008fa0:	6472616f 	0x6472616f
bc008fa4:	23232320 	addi	v1,t9,8992
bc008fa8:	0000000a 	movz	zero,zero,zero
bc008fac:	6c466953 	0x6c466953
bc008fb0:	7265776f 	0x7265776f
bc008fb4:	41465320 	0x41465320
bc008fb8:	42203858 	c0	0x203858
bc008fbc:	6c746f6f 	0x6c746f6f
bc008fc0:	6564616f 	0x6564616f
bc008fc4:	25282072 	addiu	t0,t1,8306
bc008fc8:	202d2073 	addi	t5,at,8307
bc008fcc:	0a297325 	j	b8a5cc94 <_ftext_init-0x35a736c>
bc008fd0:	00000000 	nop
bc008fd4:	2072614d 	addi	s2,v1,24909
bc008fd8:	32203032 	andi	zero,s1,0x3032
bc008fdc:	00393130 	tge	at,t9,0xc4
bc008fe0:	353a3431 	ori	k0,t1,0x3431
bc008fe4:	37353a32 	ori	s5,t9,0x3a32
bc008fe8:	00000000 	nop
bc008fec:	746f6f42 	jalx	b1bdbd08 <_ftext_init-0xa4282f8>
bc008ff0:	6f726620 	0x6f726620
bc008ff4:	7073206d 	0x7073206d
bc008ff8:	616e2d69 	0x616e2d69
bc008ffc:	0000646e 	0x646e
bc009000:	746f6f42 	jalx	b1bdbd08 <_ftext_init-0xa4282f8>
bc009004:	6f726620 	0x6f726620
bc009008:	7073206d 	0x7073206d
bc00900c:	6c662d69 	0x6c662d69
bc009010:	00687361 	0x687361
bc009014:	746f6f42 	jalx	b1bdbd08 <_ftext_init-0xa4282f8>
bc009018:	6f726620 	0x6f726620
bc00901c:	6473206d 	0x6473206d
bc009020:	00000000 	nop
bc009024:	746f6f42 	jalx	b1bdbd08 <_ftext_init-0xa4282f8>
bc009028:	6f726620 	0x6f726620
bc00902c:	6d65206d 	0x6d65206d
bc009030:	0000636d 	0x636d
bc009034:	6f727245 	0x6f727245
bc009038:	4e203a72 	c3	0x203a72
bc00903c:	6f62206f 	0x6f62206f
bc009040:	6e69746f 	0x6e69746f
bc009044:	65642067 	0x65642067
bc009048:	65636976 	0x65636976
bc00904c:	00212121 	0x212121
bc009050:	66207325 	0x66207325
bc009054:	656c6961 	0x656c6961
bc009058:	00000a64 	0xa64
bc00905c:	64616f6c 	0x64616f6c
bc009060:	2d206465 	sltiu	zero,t1,25701
bc009064:	6d756a20 	0x6d756a20
bc009068:	676e6970 	0x676e6970
bc00906c:	206f7420 	addi	t7,v1,29728
bc009070:	6f422d55 	0x6f422d55
bc009074:	2e2e746f 	sltiu	t6,s1,29807
bc009078:	0000002e 	0x2e

bc00907c <__func__.3068>:
bc00907c:	6c5f6c62 5f64616f 67616d69 00000065     bl_load_image...
bc00908c:	705f6673 735f6461 665f7465 20636e75     sf_pad_set_func 
bc00909c:	6f727265 69202172 7865646e 2064253a     error! index:%d 
bc0090ac:	636e7566 2064253a 0000000a bc005200     func:%d .....R..
bc0090bc:	bc005378 bc0054d0 bc005650 bc0057ac     xS...T..PV...W..
bc0090cc:	bc005938 bc005d10 bc005d48 bc005d40     8Y...]..H]..@]..
bc0090dc:	bc005d40 bc005d40 bc005c5c bc005c6c     @]..@]..\\..l\..
bc0090ec:	bc005cb0 bc005c88 bc005c90 bc005ca0     .\...\...\...\..
bc0090fc:	bc005ca8 bc005d40 bc005c78 bc005d40     .\..@]..x\..@]..
bc00910c:	bc005cc0 bc005cd0 bc005d40 bc005d40     .\...\..@]..@]..
bc00911c:	bc005cf8 bc005d00 bc005d40 bc005d40     .\...]..@]..@]..
bc00912c:	bc005ce0 bc005ce8 20726464 74736574     .\...\..ddr test
bc00913c:	00000000 42315244 70252057 0a4b4f20     ....DR1BW %p OK.
bc00914c:	00000000 42315244 41462052 00004c49     ....DR1BR FAIL..
bc00915c:	42315244 4b4f2052 00000000 42325244     DR1BR OK....DR2B
bc00916c:	70252057 0a4b4f20 00000000 42325244     W %p OK.....DR2B
bc00917c:	41462052 00004c49 42325244 4b4f2052     R FAIL..DR2BR OK
bc00918c:	00000000 42345244 70252057 0a4b4f20     ....DR4BW %p OK.
bc00919c:	00000000 42345244 41462052 00004c49     ....DR4BR FAIL..
bc0091ac:	42345244 4b4f2052 00000000 42385244     DR4BR OK....DR8B
bc0091bc:	70252057 0a4b4f20 00000000 42385244     W %p OK.....DR8B
bc0091cc:	41462052 00004c49 42385244 4b4f2052     R FAIL..DR8BR OK
bc0091dc:	00000000 33726464 20732520 74696e69     ....ddr3 %s init
bc0091ec:	61747320 000a7472 6335746e 38323163      start..nt5cc128
bc0091fc:	6936316d 6d652f70 31646736 6b776536     m16ip/em6gd16ewk
bc00920c:	6d652f67 31646736 62776536 00000068     g/em6gd16ewbh...
bc00921c:	20776f6e 20726464 71657266 636e6575     now ddr frequenc
bc00922c:	73692079 4d642520 21217a48 00000a21     y is %dMHz!!!...
bc00923c:	20524444 69617274 676e696e 72726520     DDR training err
bc00924c:	2528726f 21297823 000a2121 20524444     or(%#x)!!!..DDR 
bc00925c:	69617274 676e696e 63757320 73736563     training success
bc00926c:	00000000 5f4d454d 5f594850 5f4b4c43     ....MEM_PHY_CLK_
bc00927c:	20564944 2325203d 00000a78 4f525245     DIV = %#x...ERRO
bc00928c:	44203a52 66205244 20716572 484d6425     R: DDR freq %dMH
bc00929c:	6f6e207a 75732074 726f7070 21212174     z not support!!!
bc0092ac:	0000000a 20657355 61666564 20746c75     ....Use default 
bc0092bc:	756c6176 64252065 217a484d 000a2121     value %dMHz!!!..
bc0092cc:	203a4653 6c696146 74206465 6573206f     SF: Failed to se
bc0092dc:	6320646e 616d6d6f 2820646e 62207525     nd command (%u b
bc0092ec:	73657479 25203a29 00000a64 203a4653     ytes): %d...SF: 
bc0092fc:	6c696146 74206465 7274206f 66736e61     Failed to transf
bc00930c:	25207265 79622075 20736574 6420666f     er %u bytes of d
bc00931c:	3a617461 0a642520 00000000 676f7270     ata: %d.....prog
bc00932c:	006d6172 65676170 61726520 00006573     ram.page erase..
bc00933c:	203a4653 656d6954 2174756f 00000000     SF: Timeout!....
bc00934c:	203a4653 74697277 73252065 6d697420     SF: write %s tim
bc00935c:	6f206465 000a7475 203a4653 64616572     ed out..SF: read
bc00936c:	69616620 0064656c 203a4653 74697277      failed.SF: writ
bc00937c:	61662065 64656c69 00000000 203a4653     e failed....SF: 
bc00938c:	73617245 666f2065 74657366 6e656c2f     Erase offset/len
bc00939c:	20687467 20746f6e 746c756d 656c7069     gth not multiple
bc0093ac:	20666f20 73617265 69732065 0000657a      of erase size..
bc0093bc:	6f727245 6e693a72 20747570 72772061     Error:input a wr
bc0093cc:	20676e6f 73616c66 65732068 726f7463     ong flash sector
bc0093dc:	7a697320 00002165 203a4653 73617265      size!..SF: eras
bc0093ec:	61662065 64656c69 00000000 5f697073     e failed....spi_
bc0093fc:	72656678 6d697420 756f2065 21212174     xfer time out!!!
bc00940c:	00000000 6f727245 78723a72 66696620     ....Error:rx fif
bc00941c:	7369206f 706d6520 77207974 206e6568     o is empty when 
bc00942c:	65636572 20657669 61746164 20746120     receive data at 
bc00943c:	5f697073 645f7872 21617461 00000000     spi_rx_data!....
bc00944c:	74726175 61686320 6c656e6e 2064253a     uart channel:%d 
bc00945c:	64756162 65746172 2064253a 0000000a     baudrate:%d ....
bc00946c:	74726175 61686320 6c656e6e 2064253a     uart channel:%d 
bc00947c:	61746164 6e656c5f 2064253a 0000000a     data_len:%d ....
bc00948c:	74726175 61686320 6c656e6e 2064253a     uart channel:%d 
bc00949c:	69726170 253a7974 00000a64 bc007424     parity:%d...$t..
bc0094ac:	bc007430 bc007438 bc007444 bc007454     0t..8t..Dt..Tt..
bc0094bc:	25636d6d 6c632064 6573206b 72652074     mmc%d clk set er
bc0094cc:	31726f72 000a2121 25636d6d 6c632064     ror1!!..mmc%d cl
bc0094dc:	6573206b 72652074 32726f72 000a2121     k set error2!!..
bc0094ec:	25636d6d 6c632064 6573206b 72652074     mmc%d clk set er
bc0094fc:	33726f72 000a2121 70736572 65736e6f     ror3!!..response
bc00950c:	69617720 69742074 756f656d 21212174      wait timeout!!!
bc00951c:	00000021 25434d4d 6c622064 206b636f     !...MMC%d block 
bc00952c:	64616572 69617720 6c622074 69735f6b     read wait blk_si
bc00953c:	7420657a 6f656d69 0a217475 00000000     ze timeout!.....
bc00954c:	25636d6d 6e652064 20726574 656c6469     mmc%d enter idle
bc00955c:	69617720 74732074 20747261 656d6974      wait start time
bc00956c:	2074756f 0a212121 00000000 746c6f76     out !!!.....volt
bc00957c:	20656761 6374616d 69742068 756f656d     age match timeou
bc00958c:	21212074 00000021 6374616d 68742068     t !!!...match th
bc00959c:	6f762065 6761746c 69742065 756f656d     e voltage timeou
bc0095ac:	00002174 25636d6d 61772064 625f7469     t!..mmc%d wait_b
bc0095bc:	5f797375 656d6974 2174756f 000a2121     usy_timeout!!!..
bc0095cc:	25636d6d 6e652064 20726574 656c6469     mmc%d enter idle
bc0095dc:	6d697420 74756f65 21212120 0000000a      timeout !!!....
bc0095ec:	25434d4d 6e692064 63207469 46206469     MMC%d init cid F
bc0095fc:	656c6961 21212164 0000000a 64726163     ailed!!!....card
bc00960c:	61747320 20737574 74696177 6d697420      status wait tim
bc00961c:	74756f65 00000021 33323130 37363534     eout!...01234567
bc00962c:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
bc00963c:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....
bc00964c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
bc00965c:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
bc00966c:	5a595857 00000000 4c554e3c 00003e4c     WXYZ....<NULL>..
bc00967c:	00000000                                ....
